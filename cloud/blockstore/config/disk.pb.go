// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/blockstore/config/disk.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EDeviceEraseMethod int32

const (
	EDeviceEraseMethod_DEVICE_ERASE_METHOD_ZERO_FILL       EDeviceEraseMethod = 0
	EDeviceEraseMethod_DEVICE_ERASE_METHOD_USER_DATA_ERASE EDeviceEraseMethod = 1
	EDeviceEraseMethod_DEVICE_ERASE_METHOD_CRYPTO_ERASE    EDeviceEraseMethod = 2
	EDeviceEraseMethod_DEVICE_ERASE_METHOD_NONE            EDeviceEraseMethod = 3
	EDeviceEraseMethod_DEVICE_ERASE_METHOD_DEALLOCATE      EDeviceEraseMethod = 4
)

// Enum value maps for EDeviceEraseMethod.
var (
	EDeviceEraseMethod_name = map[int32]string{
		0: "DEVICE_ERASE_METHOD_ZERO_FILL",
		1: "DEVICE_ERASE_METHOD_USER_DATA_ERASE",
		2: "DEVICE_ERASE_METHOD_CRYPTO_ERASE",
		3: "DEVICE_ERASE_METHOD_NONE",
		4: "DEVICE_ERASE_METHOD_DEALLOCATE",
	}
	EDeviceEraseMethod_value = map[string]int32{
		"DEVICE_ERASE_METHOD_ZERO_FILL":       0,
		"DEVICE_ERASE_METHOD_USER_DATA_ERASE": 1,
		"DEVICE_ERASE_METHOD_CRYPTO_ERASE":    2,
		"DEVICE_ERASE_METHOD_NONE":            3,
		"DEVICE_ERASE_METHOD_DEALLOCATE":      4,
	}
)

func (x EDeviceEraseMethod) Enum() *EDeviceEraseMethod {
	p := new(EDeviceEraseMethod)
	*p = x
	return p
}

func (x EDeviceEraseMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDeviceEraseMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_blockstore_config_disk_proto_enumTypes[0].Descriptor()
}

func (EDeviceEraseMethod) Type() protoreflect.EnumType {
	return &file_cloud_blockstore_config_disk_proto_enumTypes[0]
}

func (x EDeviceEraseMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDeviceEraseMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDeviceEraseMethod(num)
	return nil
}

// Deprecated: Use EDeviceEraseMethod.Descriptor instead.
func (EDeviceEraseMethod) EnumDescriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_disk_proto_rawDescGZIP(), []int{0}
}

type EDiskAgentBackendType int32

const (
	EDiskAgentBackendType_DISK_AGENT_BACKEND_SPDK EDiskAgentBackendType = 0
	EDiskAgentBackendType_DISK_AGENT_BACKEND_AIO  EDiskAgentBackendType = 1
	EDiskAgentBackendType_DISK_AGENT_BACKEND_NULL EDiskAgentBackendType = 2
)

// Enum value maps for EDiskAgentBackendType.
var (
	EDiskAgentBackendType_name = map[int32]string{
		0: "DISK_AGENT_BACKEND_SPDK",
		1: "DISK_AGENT_BACKEND_AIO",
		2: "DISK_AGENT_BACKEND_NULL",
	}
	EDiskAgentBackendType_value = map[string]int32{
		"DISK_AGENT_BACKEND_SPDK": 0,
		"DISK_AGENT_BACKEND_AIO":  1,
		"DISK_AGENT_BACKEND_NULL": 2,
	}
)

func (x EDiskAgentBackendType) Enum() *EDiskAgentBackendType {
	p := new(EDiskAgentBackendType)
	*p = x
	return p
}

func (x EDiskAgentBackendType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDiskAgentBackendType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_blockstore_config_disk_proto_enumTypes[1].Descriptor()
}

func (EDiskAgentBackendType) Type() protoreflect.EnumType {
	return &file_cloud_blockstore_config_disk_proto_enumTypes[1]
}

func (x EDiskAgentBackendType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDiskAgentBackendType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDiskAgentBackendType(num)
	return nil
}

// Deprecated: Use EDiskAgentBackendType.Descriptor instead.
func (EDiskAgentBackendType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_disk_proto_rawDescGZIP(), []int{1}
}

type TMemoryDeviceArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	BlocksCount *uint64 `protobuf:"varint,2,opt,name=BlocksCount" json:"BlocksCount,omitempty"`
	BlockSize   *uint32 `protobuf:"varint,3,opt,name=BlockSize" json:"BlockSize,omitempty"`
	// Device identifier. Must be globally unique.
	DeviceId *string `protobuf:"bytes,4,opt,name=DeviceId" json:"DeviceId,omitempty"`
	// Device pool name.
	PoolName *string `protobuf:"bytes,5,opt,name=PoolName" json:"PoolName,omitempty"`
}

func (x *TMemoryDeviceArgs) Reset() {
	*x = TMemoryDeviceArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_disk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMemoryDeviceArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMemoryDeviceArgs) ProtoMessage() {}

func (x *TMemoryDeviceArgs) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_disk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMemoryDeviceArgs.ProtoReflect.Descriptor instead.
func (*TMemoryDeviceArgs) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_disk_proto_rawDescGZIP(), []int{0}
}

func (x *TMemoryDeviceArgs) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TMemoryDeviceArgs) GetBlocksCount() uint64 {
	if x != nil && x.BlocksCount != nil {
		return *x.BlocksCount
	}
	return 0
}

func (x *TMemoryDeviceArgs) GetBlockSize() uint32 {
	if x != nil && x.BlockSize != nil {
		return *x.BlockSize
	}
	return 0
}

func (x *TMemoryDeviceArgs) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *TMemoryDeviceArgs) GetPoolName() string {
	if x != nil && x.PoolName != nil {
		return *x.PoolName
	}
	return ""
}

type TFileDeviceArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      *string `protobuf:"bytes,1,opt,name=Path" json:"Path,omitempty"`
	BlockSize *uint32 `protobuf:"varint,2,opt,name=BlockSize" json:"BlockSize,omitempty"`
	// Device identifier. Must be globally unique.
	DeviceId *string `protobuf:"bytes,3,opt,name=DeviceId" json:"DeviceId,omitempty"`
	// Device pool name.
	PoolName *string `protobuf:"bytes,4,opt,name=PoolName" json:"PoolName,omitempty"`
	// Serial number. For testing purposes.
	SerialNumber *string `protobuf:"bytes,5,opt,name=SerialNumber" json:"SerialNumber,omitempty"`
	// Data offset relative to the beginning of the file.
	Offset *uint64 `protobuf:"varint,6,opt,name=Offset" json:"Offset,omitempty"`
	// File size override.
	FileSize *uint64 `protobuf:"varint,7,opt,name=FileSize" json:"FileSize,omitempty"`
}

func (x *TFileDeviceArgs) Reset() {
	*x = TFileDeviceArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_disk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFileDeviceArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFileDeviceArgs) ProtoMessage() {}

func (x *TFileDeviceArgs) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_disk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFileDeviceArgs.ProtoReflect.Descriptor instead.
func (*TFileDeviceArgs) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_disk_proto_rawDescGZIP(), []int{1}
}

func (x *TFileDeviceArgs) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *TFileDeviceArgs) GetBlockSize() uint32 {
	if x != nil && x.BlockSize != nil {
		return *x.BlockSize
	}
	return 0
}

func (x *TFileDeviceArgs) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *TFileDeviceArgs) GetPoolName() string {
	if x != nil && x.PoolName != nil {
		return *x.PoolName
	}
	return ""
}

func (x *TFileDeviceArgs) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *TFileDeviceArgs) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *TFileDeviceArgs) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

type TNVMeDeviceArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseName    *string `protobuf:"bytes,1,opt,name=BaseName" json:"BaseName,omitempty"`
	TransportId *string `protobuf:"bytes,2,opt,name=TransportId" json:"TransportId,omitempty"`
	// Device identifier. Must be globally unique.
	DeviceIds []string `protobuf:"bytes,3,rep,name=DeviceIds" json:"DeviceIds,omitempty"`
	// Device pool name.
	PoolName *string `protobuf:"bytes,4,opt,name=PoolName" json:"PoolName,omitempty"`
}

func (x *TNVMeDeviceArgs) Reset() {
	*x = TNVMeDeviceArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_disk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TNVMeDeviceArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TNVMeDeviceArgs) ProtoMessage() {}

func (x *TNVMeDeviceArgs) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_disk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TNVMeDeviceArgs.ProtoReflect.Descriptor instead.
func (*TNVMeDeviceArgs) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_disk_proto_rawDescGZIP(), []int{2}
}

func (x *TNVMeDeviceArgs) GetBaseName() string {
	if x != nil && x.BaseName != nil {
		return *x.BaseName
	}
	return ""
}

func (x *TNVMeDeviceArgs) GetTransportId() string {
	if x != nil && x.TransportId != nil {
		return *x.TransportId
	}
	return ""
}

func (x *TNVMeDeviceArgs) GetDeviceIds() []string {
	if x != nil {
		return x.DeviceIds
	}
	return nil
}

func (x *TNVMeDeviceArgs) GetPoolName() string {
	if x != nil && x.PoolName != nil {
		return *x.PoolName
	}
	return ""
}

type TNVMeTargetArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nqn          *string  `protobuf:"bytes,1,opt,name=Nqn" json:"Nqn,omitempty"`
	TransportIds []string `protobuf:"bytes,2,rep,name=TransportIds" json:"TransportIds,omitempty"`
}

func (x *TNVMeTargetArgs) Reset() {
	*x = TNVMeTargetArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_disk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TNVMeTargetArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TNVMeTargetArgs) ProtoMessage() {}

func (x *TNVMeTargetArgs) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_disk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TNVMeTargetArgs.ProtoReflect.Descriptor instead.
func (*TNVMeTargetArgs) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_disk_proto_rawDescGZIP(), []int{3}
}

func (x *TNVMeTargetArgs) GetNqn() string {
	if x != nil && x.Nqn != nil {
		return *x.Nqn
	}
	return ""
}

func (x *TNVMeTargetArgs) GetTransportIds() []string {
	if x != nil {
		return x.TransportIds
	}
	return nil
}

type TStorageDiscoveryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathConfigs []*TStorageDiscoveryConfig_TPathConfig `protobuf:"bytes,1,rep,name=PathConfigs" json:"PathConfigs,omitempty"`
}

func (x *TStorageDiscoveryConfig) Reset() {
	*x = TStorageDiscoveryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_disk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TStorageDiscoveryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TStorageDiscoveryConfig) ProtoMessage() {}

func (x *TStorageDiscoveryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_disk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TStorageDiscoveryConfig.ProtoReflect.Descriptor instead.
func (*TStorageDiscoveryConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_disk_proto_rawDescGZIP(), []int{4}
}

func (x *TStorageDiscoveryConfig) GetPathConfigs() []*TStorageDiscoveryConfig_TPathConfig {
	if x != nil {
		return x.PathConfigs
	}
	return nil
}

type TDiskAgentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool `protobuf:"varint,1,opt,name=Enabled" json:"Enabled,omitempty"`
	// Attached devices.
	MemoryDevices []*TMemoryDeviceArgs `protobuf:"bytes,2,rep,name=MemoryDevices" json:"MemoryDevices,omitempty"`
	FileDevices   []*TFileDeviceArgs   `protobuf:"bytes,3,rep,name=FileDevices" json:"FileDevices,omitempty"`
	NvmeDevices   []*TNVMeDeviceArgs   `protobuf:"bytes,4,rep,name=NvmeDevices" json:"NvmeDevices,omitempty"`
	// NVMe-oF target setup.
	NvmeTarget *TNVMeTargetArgs `protobuf:"bytes,5,opt,name=NvmeTarget" json:"NvmeTarget,omitempty"`
	// Disk Agent Id which is used for registration in Disk registry.
	AgentId *string `protobuf:"bytes,6,opt,name=AgentId" json:"AgentId,omitempty"`
	// Allocator.
	PageSize     *uint32 `protobuf:"varint,7,opt,name=PageSize" json:"PageSize,omitempty"`
	MaxPageCount *uint32 `protobuf:"varint,8,opt,name=MaxPageCount" json:"MaxPageCount,omitempty"`
	PageDropSize *uint32 `protobuf:"varint,9,opt,name=PageDropSize" json:"PageDropSize,omitempty"`
	// Timeout (in milliseconds) before retry register agent at Disk Registry.
	RegisterRetryTimeout *uint32 `protobuf:"varint,10,opt,name=RegisterRetryTimeout" json:"RegisterRetryTimeout,omitempty"`
	// Backend to perform IO.
	Backend *EDiskAgentBackendType `protobuf:"varint,11,opt,name=Backend,enum=NCloud.NBlockStore.NProto.EDiskAgentBackendType" json:"Backend,omitempty"`
	// If set, i/o won't work without acquire.
	AcquireRequired *bool `protobuf:"varint,12,opt,name=AcquireRequired" json:"AcquireRequired,omitempty"`
	// Device secure erase method.
	DeviceEraseMethod *EDeviceEraseMethod `protobuf:"varint,13,opt,name=DeviceEraseMethod,enum=NCloud.NBlockStore.NProto.EDeviceEraseMethod" json:"DeviceEraseMethod,omitempty"`
	// Devices can be acquired by another writer after this time interval.
	ReleaseInactiveSessionsTimeout *uint32 `protobuf:"varint,14,opt,name=ReleaseInactiveSessionsTimeout" json:"ReleaseInactiveSessionsTimeout,omitempty"`
	// Open device file without directIO flag. Used with AIO backend & RAM drive.
	DirectIoFlagDisabled *bool `protobuf:"varint,15,opt,name=DirectIoFlagDisabled" json:"DirectIoFlagDisabled,omitempty"`
	// Agent generation number which is used for registration in Disk registry.
	SeqNumber *uint64 `protobuf:"varint,16,opt,name=SeqNumber" json:"SeqNumber,omitempty"`
	// Use disk-agent in dedicated process.
	DedicatedDiskAgent *bool `protobuf:"varint,17,opt,name=DedicatedDiskAgent" json:"DedicatedDiskAgent,omitempty"`
	// Timeout (in seconds) before aborting NVM format command.
	SecureEraseTimeout *uint32 `protobuf:"varint,18,opt,name=SecureEraseTimeout" json:"SecureEraseTimeout,omitempty"`
	// SPDK config used by dedicated disk agent.
	SpdkEnvConfig *TSpdkEnvConfig `protobuf:"bytes,19,opt,name=SpdkEnvConfig" json:"SpdkEnvConfig,omitempty"`
	// RDMA target config.
	RdmaTarget *TRdmaTarget `protobuf:"bytes,20,opt,name=RdmaTarget" json:"RdmaTarget,omitempty"`
	// Use flock to lock devices on agent initialization.
	DeviceLockingEnabled *bool `protobuf:"varint,21,opt,name=DeviceLockingEnabled" json:"DeviceLockingEnabled,omitempty"`
	// Disables random device block reads to check device health (background
	// device scrubbing).
	DeviceHealthCheckDisabled *bool `protobuf:"varint,22,opt,name=DeviceHealthCheckDisabled" json:"DeviceHealthCheckDisabled,omitempty"`
	// After this interval (in milliseconds) disk agent will return E_IO error
	// for the request.
	DeviceIOTimeout *uint32 `protobuf:"varint,23,opt,name=DeviceIOTimeout" json:"DeviceIOTimeout,omitempty"`
	// Disables device IO timeout -> E_IO error conversion logic.
	DeviceIOTimeoutsDisabled *bool `protobuf:"varint,24,opt,name=DeviceIOTimeoutsDisabled" json:"DeviceIOTimeoutsDisabled,omitempty"`
	// During shutdown, the disk agent will wait for I/O requests to complete
	// during this interval (in milliseconds).
	ShutdownTimeout *uint32 `protobuf:"varint,25,opt,name=ShutdownTimeout" json:"ShutdownTimeout,omitempty"`
	// Storage discovery config.
	StorageDiscoveryConfig *TStorageDiscoveryConfig `protobuf:"bytes,26,opt,name=StorageDiscoveryConfig" json:"StorageDiscoveryConfig,omitempty"`
}

func (x *TDiskAgentConfig) Reset() {
	*x = TDiskAgentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_disk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDiskAgentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDiskAgentConfig) ProtoMessage() {}

func (x *TDiskAgentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_disk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDiskAgentConfig.ProtoReflect.Descriptor instead.
func (*TDiskAgentConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_disk_proto_rawDescGZIP(), []int{5}
}

func (x *TDiskAgentConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *TDiskAgentConfig) GetMemoryDevices() []*TMemoryDeviceArgs {
	if x != nil {
		return x.MemoryDevices
	}
	return nil
}

func (x *TDiskAgentConfig) GetFileDevices() []*TFileDeviceArgs {
	if x != nil {
		return x.FileDevices
	}
	return nil
}

func (x *TDiskAgentConfig) GetNvmeDevices() []*TNVMeDeviceArgs {
	if x != nil {
		return x.NvmeDevices
	}
	return nil
}

func (x *TDiskAgentConfig) GetNvmeTarget() *TNVMeTargetArgs {
	if x != nil {
		return x.NvmeTarget
	}
	return nil
}

func (x *TDiskAgentConfig) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *TDiskAgentConfig) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *TDiskAgentConfig) GetMaxPageCount() uint32 {
	if x != nil && x.MaxPageCount != nil {
		return *x.MaxPageCount
	}
	return 0
}

func (x *TDiskAgentConfig) GetPageDropSize() uint32 {
	if x != nil && x.PageDropSize != nil {
		return *x.PageDropSize
	}
	return 0
}

func (x *TDiskAgentConfig) GetRegisterRetryTimeout() uint32 {
	if x != nil && x.RegisterRetryTimeout != nil {
		return *x.RegisterRetryTimeout
	}
	return 0
}

func (x *TDiskAgentConfig) GetBackend() EDiskAgentBackendType {
	if x != nil && x.Backend != nil {
		return *x.Backend
	}
	return EDiskAgentBackendType_DISK_AGENT_BACKEND_SPDK
}

func (x *TDiskAgentConfig) GetAcquireRequired() bool {
	if x != nil && x.AcquireRequired != nil {
		return *x.AcquireRequired
	}
	return false
}

func (x *TDiskAgentConfig) GetDeviceEraseMethod() EDeviceEraseMethod {
	if x != nil && x.DeviceEraseMethod != nil {
		return *x.DeviceEraseMethod
	}
	return EDeviceEraseMethod_DEVICE_ERASE_METHOD_ZERO_FILL
}

func (x *TDiskAgentConfig) GetReleaseInactiveSessionsTimeout() uint32 {
	if x != nil && x.ReleaseInactiveSessionsTimeout != nil {
		return *x.ReleaseInactiveSessionsTimeout
	}
	return 0
}

func (x *TDiskAgentConfig) GetDirectIoFlagDisabled() bool {
	if x != nil && x.DirectIoFlagDisabled != nil {
		return *x.DirectIoFlagDisabled
	}
	return false
}

func (x *TDiskAgentConfig) GetSeqNumber() uint64 {
	if x != nil && x.SeqNumber != nil {
		return *x.SeqNumber
	}
	return 0
}

func (x *TDiskAgentConfig) GetDedicatedDiskAgent() bool {
	if x != nil && x.DedicatedDiskAgent != nil {
		return *x.DedicatedDiskAgent
	}
	return false
}

func (x *TDiskAgentConfig) GetSecureEraseTimeout() uint32 {
	if x != nil && x.SecureEraseTimeout != nil {
		return *x.SecureEraseTimeout
	}
	return 0
}

func (x *TDiskAgentConfig) GetSpdkEnvConfig() *TSpdkEnvConfig {
	if x != nil {
		return x.SpdkEnvConfig
	}
	return nil
}

func (x *TDiskAgentConfig) GetRdmaTarget() *TRdmaTarget {
	if x != nil {
		return x.RdmaTarget
	}
	return nil
}

func (x *TDiskAgentConfig) GetDeviceLockingEnabled() bool {
	if x != nil && x.DeviceLockingEnabled != nil {
		return *x.DeviceLockingEnabled
	}
	return false
}

func (x *TDiskAgentConfig) GetDeviceHealthCheckDisabled() bool {
	if x != nil && x.DeviceHealthCheckDisabled != nil {
		return *x.DeviceHealthCheckDisabled
	}
	return false
}

func (x *TDiskAgentConfig) GetDeviceIOTimeout() uint32 {
	if x != nil && x.DeviceIOTimeout != nil {
		return *x.DeviceIOTimeout
	}
	return 0
}

func (x *TDiskAgentConfig) GetDeviceIOTimeoutsDisabled() bool {
	if x != nil && x.DeviceIOTimeoutsDisabled != nil {
		return *x.DeviceIOTimeoutsDisabled
	}
	return false
}

func (x *TDiskAgentConfig) GetShutdownTimeout() uint32 {
	if x != nil && x.ShutdownTimeout != nil {
		return *x.ShutdownTimeout
	}
	return 0
}

func (x *TDiskAgentConfig) GetStorageDiscoveryConfig() *TStorageDiscoveryConfig {
	if x != nil {
		return x.StorageDiscoveryConfig
	}
	return nil
}

type TDiskRegistryProxyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner    *uint64 `protobuf:"varint,1,opt,name=Owner" json:"Owner,omitempty"`
	OwnerIdx *uint64 `protobuf:"varint,2,opt,name=OwnerIdx" json:"OwnerIdx,omitempty"`
	// timeout (in milliseconds) for lookup/create DR tablet request
	LookupTimeout *uint32 `protobuf:"varint,3,opt,name=LookupTimeout" json:"LookupTimeout,omitempty"`
}

func (x *TDiskRegistryProxyConfig) Reset() {
	*x = TDiskRegistryProxyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_disk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDiskRegistryProxyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDiskRegistryProxyConfig) ProtoMessage() {}

func (x *TDiskRegistryProxyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_disk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDiskRegistryProxyConfig.ProtoReflect.Descriptor instead.
func (*TDiskRegistryProxyConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_disk_proto_rawDescGZIP(), []int{6}
}

func (x *TDiskRegistryProxyConfig) GetOwner() uint64 {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return 0
}

func (x *TDiskRegistryProxyConfig) GetOwnerIdx() uint64 {
	if x != nil && x.OwnerIdx != nil {
		return *x.OwnerIdx
	}
	return 0
}

func (x *TDiskRegistryProxyConfig) GetLookupTimeout() uint32 {
	if x != nil && x.LookupTimeout != nil {
		return *x.LookupTimeout
	}
	return 0
}

type TStorageDiscoveryConfig_TLayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved space at the beginning of the file.
	HeaderSize *uint64 `protobuf:"varint,1,opt,name=HeaderSize" json:"HeaderSize,omitempty"`
	// Space between devices.
	DevicePadding *uint64 `protobuf:"varint,2,opt,name=DevicePadding" json:"DevicePadding,omitempty"`
	// The size of each device.
	DeviceSize *uint64 `protobuf:"varint,3,opt,name=DeviceSize" json:"DeviceSize,omitempty"`
}

func (x *TStorageDiscoveryConfig_TLayout) Reset() {
	*x = TStorageDiscoveryConfig_TLayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_disk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TStorageDiscoveryConfig_TLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TStorageDiscoveryConfig_TLayout) ProtoMessage() {}

func (x *TStorageDiscoveryConfig_TLayout) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_disk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TStorageDiscoveryConfig_TLayout.ProtoReflect.Descriptor instead.
func (*TStorageDiscoveryConfig_TLayout) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_disk_proto_rawDescGZIP(), []int{4, 0}
}

func (x *TStorageDiscoveryConfig_TLayout) GetHeaderSize() uint64 {
	if x != nil && x.HeaderSize != nil {
		return *x.HeaderSize
	}
	return 0
}

func (x *TStorageDiscoveryConfig_TLayout) GetDevicePadding() uint64 {
	if x != nil && x.DevicePadding != nil {
		return *x.DevicePadding
	}
	return 0
}

func (x *TStorageDiscoveryConfig_TLayout) GetDeviceSize() uint64 {
	if x != nil && x.DeviceSize != nil {
		return *x.DeviceSize
	}
	return 0
}

type TStorageDiscoveryConfig_TPoolConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolName *string                          `protobuf:"bytes,1,opt,name=PoolName" json:"PoolName,omitempty"`
	MinSize  *uint64                          `protobuf:"varint,2,opt,name=MinSize" json:"MinSize,omitempty"`
	MaxSize  *uint64                          `protobuf:"varint,3,opt,name=MaxSize" json:"MaxSize,omitempty"`
	Layout   *TStorageDiscoveryConfig_TLayout `protobuf:"bytes,4,opt,name=Layout" json:"Layout,omitempty"`
	// Used to calculate the device ids.
	HashSuffix *string `protobuf:"bytes,5,opt,name=HashSuffix" json:"HashSuffix,omitempty"`
	// The maximum number of devices.
	MaxDeviceCount *uint32 `protobuf:"varint,6,opt,name=MaxDeviceCount" json:"MaxDeviceCount,omitempty"`
}

func (x *TStorageDiscoveryConfig_TPoolConfig) Reset() {
	*x = TStorageDiscoveryConfig_TPoolConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_disk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TStorageDiscoveryConfig_TPoolConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TStorageDiscoveryConfig_TPoolConfig) ProtoMessage() {}

func (x *TStorageDiscoveryConfig_TPoolConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_disk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TStorageDiscoveryConfig_TPoolConfig.ProtoReflect.Descriptor instead.
func (*TStorageDiscoveryConfig_TPoolConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_disk_proto_rawDescGZIP(), []int{4, 1}
}

func (x *TStorageDiscoveryConfig_TPoolConfig) GetPoolName() string {
	if x != nil && x.PoolName != nil {
		return *x.PoolName
	}
	return ""
}

func (x *TStorageDiscoveryConfig_TPoolConfig) GetMinSize() uint64 {
	if x != nil && x.MinSize != nil {
		return *x.MinSize
	}
	return 0
}

func (x *TStorageDiscoveryConfig_TPoolConfig) GetMaxSize() uint64 {
	if x != nil && x.MaxSize != nil {
		return *x.MaxSize
	}
	return 0
}

func (x *TStorageDiscoveryConfig_TPoolConfig) GetLayout() *TStorageDiscoveryConfig_TLayout {
	if x != nil {
		return x.Layout
	}
	return nil
}

func (x *TStorageDiscoveryConfig_TPoolConfig) GetHashSuffix() string {
	if x != nil && x.HashSuffix != nil {
		return *x.HashSuffix
	}
	return ""
}

func (x *TStorageDiscoveryConfig_TPoolConfig) GetMaxDeviceCount() uint32 {
	if x != nil && x.MaxDeviceCount != nil {
		return *x.MaxDeviceCount
	}
	return 0
}

type TStorageDiscoveryConfig_TPathConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path regexp (e.g. /dev/disk/by-partlabel/NVMECOMPUTE([0-9]{2}))
	// it must have at least one group of digits that will be used to
	// calculate device ids.
	PathRegExp *string `protobuf:"bytes,1,opt,name=PathRegExp" json:"PathRegExp,omitempty"`
	// The maximum number of devices that can be discovered by a given path.
	MaxDeviceCount *uint32                                `protobuf:"varint,2,opt,name=MaxDeviceCount" json:"MaxDeviceCount,omitempty"`
	PoolConfigs    []*TStorageDiscoveryConfig_TPoolConfig `protobuf:"bytes,3,rep,name=PoolConfigs" json:"PoolConfigs,omitempty"`
}

func (x *TStorageDiscoveryConfig_TPathConfig) Reset() {
	*x = TStorageDiscoveryConfig_TPathConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_disk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TStorageDiscoveryConfig_TPathConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TStorageDiscoveryConfig_TPathConfig) ProtoMessage() {}

func (x *TStorageDiscoveryConfig_TPathConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_disk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TStorageDiscoveryConfig_TPathConfig.ProtoReflect.Descriptor instead.
func (*TStorageDiscoveryConfig_TPathConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_disk_proto_rawDescGZIP(), []int{4, 2}
}

func (x *TStorageDiscoveryConfig_TPathConfig) GetPathRegExp() string {
	if x != nil && x.PathRegExp != nil {
		return *x.PathRegExp
	}
	return ""
}

func (x *TStorageDiscoveryConfig_TPathConfig) GetMaxDeviceCount() uint32 {
	if x != nil && x.MaxDeviceCount != nil {
		return *x.MaxDeviceCount
	}
	return 0
}

func (x *TStorageDiscoveryConfig_TPathConfig) GetPoolConfigs() []*TStorageDiscoveryConfig_TPoolConfig {
	if x != nil {
		return x.PoolConfigs
	}
	return nil
}

var File_cloud_blockstore_config_disk_proto protoreflect.FileDescriptor

var file_cloud_blockstore_config_disk_proto_rawDesc = []byte{
	0x0a, 0x22, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x22, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x64, 0x6d, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x70, 0x64,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x11, 0x54, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x0f, 0x54, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x89, 0x01, 0x0a, 0x0f, 0x54, 0x4e, 0x56, 0x4d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x0f, 0x54,
	0x4e, 0x56, 0x4d, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x4e, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4e, 0x71, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x73, 0x22, 0xa2, 0x05, 0x0a, 0x17, 0x54, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x60, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x50, 0x61, 0x74, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x1a, 0x6f, 0x0a, 0x07, 0x54, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x1a, 0xf9, 0x01, 0x0a, 0x0b, 0x54, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52,
	0x06, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x61, 0x73, 0x68, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x48, 0x61, 0x73,
	0x68, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0xb7, 0x01, 0x0a, 0x0b, 0x54, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x67, 0x45, 0x78, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x67, 0x45, 0x78, 0x70, 0x12,
	0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x0b, 0x50, 0x6f, 0x6f, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x50, 0x6f,
	0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0xee, 0x0b, 0x0a, 0x10, 0x54, 0x44,
	0x69, 0x73, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x0d, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0b,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x0b, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x4e, 0x76,
	0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4e, 0x56, 0x4d,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x0b, 0x4e, 0x76, 0x6d,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x4e, 0x76, 0x6d, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4e, 0x56, 0x4d, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x67, 0x73, 0x52, 0x0a, 0x4e, 0x76, 0x6d, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61,
	0x78, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x50, 0x61, 0x67, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x50, 0x61, 0x67, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4a, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x44, 0x69, 0x73, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x41, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x11,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x61, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72,
	0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x46, 0x0a, 0x1e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x32, 0x0a, 0x14, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6f, 0x46, 0x6c, 0x61,
	0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x69, 0x73, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x45, 0x72, 0x61,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x45, 0x72, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x53, 0x70, 0x64, 0x6b, 0x45, 0x6e, 0x76, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x70, 0x64, 0x6b, 0x45, 0x6e, 0x76, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x53, 0x70, 0x64, 0x6b, 0x45, 0x6e, 0x76, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x0a, 0x52, 0x64, 0x6d, 0x61, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x64, 0x6d, 0x61, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x0a, 0x52, 0x64, 0x6d, 0x61, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x3c, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x4f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x4f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x4f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x4f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x53,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x6a,
	0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x72, 0x0a, 0x18, 0x54, 0x44,
	0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x2a, 0xc8,
	0x01, 0x0a, 0x12, 0x45, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x61, 0x73, 0x65, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x45, 0x52, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x5a, 0x45, 0x52,
	0x4f, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x45, 0x52, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x52, 0x41, 0x53, 0x45, 0x10,
	0x01, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x41, 0x53,
	0x45, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f,
	0x45, 0x52, 0x41, 0x53, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x45, 0x52, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x45, 0x52, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x44, 0x45, 0x41,
	0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x10, 0x04, 0x2a, 0x6d, 0x0a, 0x15, 0x45, 0x44, 0x69,
	0x73, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x50, 0x44, 0x4b, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x49, 0x4f, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x44,
	0x49, 0x53, 0x4b, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e,
	0x44, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x6e, 0x62, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
}

var (
	file_cloud_blockstore_config_disk_proto_rawDescOnce sync.Once
	file_cloud_blockstore_config_disk_proto_rawDescData = file_cloud_blockstore_config_disk_proto_rawDesc
)

func file_cloud_blockstore_config_disk_proto_rawDescGZIP() []byte {
	file_cloud_blockstore_config_disk_proto_rawDescOnce.Do(func() {
		file_cloud_blockstore_config_disk_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_blockstore_config_disk_proto_rawDescData)
	})
	return file_cloud_blockstore_config_disk_proto_rawDescData
}

var file_cloud_blockstore_config_disk_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cloud_blockstore_config_disk_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_cloud_blockstore_config_disk_proto_goTypes = []interface{}{
	(EDeviceEraseMethod)(0),                     // 0: NCloud.NBlockStore.NProto.EDeviceEraseMethod
	(EDiskAgentBackendType)(0),                  // 1: NCloud.NBlockStore.NProto.EDiskAgentBackendType
	(*TMemoryDeviceArgs)(nil),                   // 2: NCloud.NBlockStore.NProto.TMemoryDeviceArgs
	(*TFileDeviceArgs)(nil),                     // 3: NCloud.NBlockStore.NProto.TFileDeviceArgs
	(*TNVMeDeviceArgs)(nil),                     // 4: NCloud.NBlockStore.NProto.TNVMeDeviceArgs
	(*TNVMeTargetArgs)(nil),                     // 5: NCloud.NBlockStore.NProto.TNVMeTargetArgs
	(*TStorageDiscoveryConfig)(nil),             // 6: NCloud.NBlockStore.NProto.TStorageDiscoveryConfig
	(*TDiskAgentConfig)(nil),                    // 7: NCloud.NBlockStore.NProto.TDiskAgentConfig
	(*TDiskRegistryProxyConfig)(nil),            // 8: NCloud.NBlockStore.NProto.TDiskRegistryProxyConfig
	(*TStorageDiscoveryConfig_TLayout)(nil),     // 9: NCloud.NBlockStore.NProto.TStorageDiscoveryConfig.TLayout
	(*TStorageDiscoveryConfig_TPoolConfig)(nil), // 10: NCloud.NBlockStore.NProto.TStorageDiscoveryConfig.TPoolConfig
	(*TStorageDiscoveryConfig_TPathConfig)(nil), // 11: NCloud.NBlockStore.NProto.TStorageDiscoveryConfig.TPathConfig
	(*TSpdkEnvConfig)(nil),                      // 12: NCloud.NBlockStore.NProto.TSpdkEnvConfig
	(*TRdmaTarget)(nil),                         // 13: NCloud.NBlockStore.NProto.TRdmaTarget
}
var file_cloud_blockstore_config_disk_proto_depIdxs = []int32{
	11, // 0: NCloud.NBlockStore.NProto.TStorageDiscoveryConfig.PathConfigs:type_name -> NCloud.NBlockStore.NProto.TStorageDiscoveryConfig.TPathConfig
	2,  // 1: NCloud.NBlockStore.NProto.TDiskAgentConfig.MemoryDevices:type_name -> NCloud.NBlockStore.NProto.TMemoryDeviceArgs
	3,  // 2: NCloud.NBlockStore.NProto.TDiskAgentConfig.FileDevices:type_name -> NCloud.NBlockStore.NProto.TFileDeviceArgs
	4,  // 3: NCloud.NBlockStore.NProto.TDiskAgentConfig.NvmeDevices:type_name -> NCloud.NBlockStore.NProto.TNVMeDeviceArgs
	5,  // 4: NCloud.NBlockStore.NProto.TDiskAgentConfig.NvmeTarget:type_name -> NCloud.NBlockStore.NProto.TNVMeTargetArgs
	1,  // 5: NCloud.NBlockStore.NProto.TDiskAgentConfig.Backend:type_name -> NCloud.NBlockStore.NProto.EDiskAgentBackendType
	0,  // 6: NCloud.NBlockStore.NProto.TDiskAgentConfig.DeviceEraseMethod:type_name -> NCloud.NBlockStore.NProto.EDeviceEraseMethod
	12, // 7: NCloud.NBlockStore.NProto.TDiskAgentConfig.SpdkEnvConfig:type_name -> NCloud.NBlockStore.NProto.TSpdkEnvConfig
	13, // 8: NCloud.NBlockStore.NProto.TDiskAgentConfig.RdmaTarget:type_name -> NCloud.NBlockStore.NProto.TRdmaTarget
	6,  // 9: NCloud.NBlockStore.NProto.TDiskAgentConfig.StorageDiscoveryConfig:type_name -> NCloud.NBlockStore.NProto.TStorageDiscoveryConfig
	9,  // 10: NCloud.NBlockStore.NProto.TStorageDiscoveryConfig.TPoolConfig.Layout:type_name -> NCloud.NBlockStore.NProto.TStorageDiscoveryConfig.TLayout
	10, // 11: NCloud.NBlockStore.NProto.TStorageDiscoveryConfig.TPathConfig.PoolConfigs:type_name -> NCloud.NBlockStore.NProto.TStorageDiscoveryConfig.TPoolConfig
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_cloud_blockstore_config_disk_proto_init() }
func file_cloud_blockstore_config_disk_proto_init() {
	if File_cloud_blockstore_config_disk_proto != nil {
		return
	}
	file_cloud_blockstore_config_rdma_proto_init()
	file_cloud_blockstore_config_spdk_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloud_blockstore_config_disk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TMemoryDeviceArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_disk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFileDeviceArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_disk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TNVMeDeviceArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_disk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TNVMeTargetArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_disk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TStorageDiscoveryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_disk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDiskAgentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_disk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDiskRegistryProxyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_disk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TStorageDiscoveryConfig_TLayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_disk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TStorageDiscoveryConfig_TPoolConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_disk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TStorageDiscoveryConfig_TPathConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_blockstore_config_disk_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_blockstore_config_disk_proto_goTypes,
		DependencyIndexes: file_cloud_blockstore_config_disk_proto_depIdxs,
		EnumInfos:         file_cloud_blockstore_config_disk_proto_enumTypes,
		MessageInfos:      file_cloud_blockstore_config_disk_proto_msgTypes,
	}.Build()
	File_cloud_blockstore_config_disk_proto = out.File
	file_cloud_blockstore_config_disk_proto_rawDesc = nil
	file_cloud_blockstore_config_disk_proto_goTypes = nil
	file_cloud_blockstore_config_disk_proto_depIdxs = nil
}
