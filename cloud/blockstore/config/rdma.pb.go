// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/blockstore/config/rdma.proto

package config

import (
	protos "github.com/ydb-platform/nbs/cloud/blockstore/public/api/protos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EWaitMode int32

const (
	EWaitMode_WAIT_MODE_POLL          EWaitMode = 0
	EWaitMode_WAIT_MODE_BUSY_WAIT     EWaitMode = 1
	EWaitMode_WAIT_MODE_ADAPTIVE_WAIT EWaitMode = 2
)

// Enum value maps for EWaitMode.
var (
	EWaitMode_name = map[int32]string{
		0: "WAIT_MODE_POLL",
		1: "WAIT_MODE_BUSY_WAIT",
		2: "WAIT_MODE_ADAPTIVE_WAIT",
	}
	EWaitMode_value = map[string]int32{
		"WAIT_MODE_POLL":          0,
		"WAIT_MODE_BUSY_WAIT":     1,
		"WAIT_MODE_ADAPTIVE_WAIT": 2,
	}
)

func (x EWaitMode) Enum() *EWaitMode {
	p := new(EWaitMode)
	*p = x
	return p
}

func (x EWaitMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EWaitMode) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_blockstore_config_rdma_proto_enumTypes[0].Descriptor()
}

func (EWaitMode) Type() protoreflect.EnumType {
	return &file_cloud_blockstore_config_rdma_proto_enumTypes[0]
}

func (x EWaitMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EWaitMode.Descriptor instead.
func (EWaitMode) EnumDescriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_rdma_proto_rawDescGZIP(), []int{0}
}

type TRdmaServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backlog                   uint32    `protobuf:"varint,1,opt,name=Backlog,proto3" json:"Backlog,omitempty"`
	QueueSize                 uint32    `protobuf:"varint,2,opt,name=QueueSize,proto3" json:"QueueSize,omitempty"`
	MaxBufferSize             uint32    `protobuf:"varint,3,opt,name=MaxBufferSize,proto3" json:"MaxBufferSize,omitempty"`
	KeepAliveTimeout          uint64    `protobuf:"varint,4,opt,name=KeepAliveTimeout,proto3" json:"KeepAliveTimeout,omitempty"` // in milliseconds
	WaitMode                  EWaitMode `protobuf:"varint,5,opt,name=WaitMode,proto3,enum=NCloud.NBlockStore.NProto.EWaitMode" json:"WaitMode,omitempty"`
	PollerThreads             uint32    `protobuf:"varint,6,opt,name=PollerThreads,proto3" json:"PollerThreads,omitempty"`
	MaxInflightBytes          uint32    `protobuf:"varint,7,opt,name=MaxInflightBytes,proto3" json:"MaxInflightBytes,omitempty"`                   // per client
	AdaptiveWaitSleepDelay    uint64    `protobuf:"varint,8,opt,name=AdaptiveWaitSleepDelay,proto3" json:"AdaptiveWaitSleepDelay,omitempty"`       // in microseconds
	AdaptiveWaitSleepDuration uint64    `protobuf:"varint,9,opt,name=AdaptiveWaitSleepDuration,proto3" json:"AdaptiveWaitSleepDuration,omitempty"` // in microseconds
}

func (x *TRdmaServer) Reset() {
	*x = TRdmaServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_rdma_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRdmaServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRdmaServer) ProtoMessage() {}

func (x *TRdmaServer) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_rdma_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRdmaServer.ProtoReflect.Descriptor instead.
func (*TRdmaServer) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_rdma_proto_rawDescGZIP(), []int{0}
}

func (x *TRdmaServer) GetBacklog() uint32 {
	if x != nil {
		return x.Backlog
	}
	return 0
}

func (x *TRdmaServer) GetQueueSize() uint32 {
	if x != nil {
		return x.QueueSize
	}
	return 0
}

func (x *TRdmaServer) GetMaxBufferSize() uint32 {
	if x != nil {
		return x.MaxBufferSize
	}
	return 0
}

func (x *TRdmaServer) GetKeepAliveTimeout() uint64 {
	if x != nil {
		return x.KeepAliveTimeout
	}
	return 0
}

func (x *TRdmaServer) GetWaitMode() EWaitMode {
	if x != nil {
		return x.WaitMode
	}
	return EWaitMode_WAIT_MODE_POLL
}

func (x *TRdmaServer) GetPollerThreads() uint32 {
	if x != nil {
		return x.PollerThreads
	}
	return 0
}

func (x *TRdmaServer) GetMaxInflightBytes() uint32 {
	if x != nil {
		return x.MaxInflightBytes
	}
	return 0
}

func (x *TRdmaServer) GetAdaptiveWaitSleepDelay() uint64 {
	if x != nil {
		return x.AdaptiveWaitSleepDelay
	}
	return 0
}

func (x *TRdmaServer) GetAdaptiveWaitSleepDuration() uint64 {
	if x != nil {
		return x.AdaptiveWaitSleepDuration
	}
	return 0
}

type TRdmaClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueSize                 uint32    `protobuf:"varint,1,opt,name=QueueSize,proto3" json:"QueueSize,omitempty"`
	MaxBufferSize             uint32    `protobuf:"varint,2,opt,name=MaxBufferSize,proto3" json:"MaxBufferSize,omitempty"`
	PollerThreads             uint32    `protobuf:"varint,3,opt,name=PollerThreads,proto3" json:"PollerThreads,omitempty"`
	WaitMode                  EWaitMode `protobuf:"varint,4,opt,name=WaitMode,proto3,enum=NCloud.NBlockStore.NProto.EWaitMode" json:"WaitMode,omitempty"`
	AdaptiveWaitSleepDelay    uint64    `protobuf:"varint,5,opt,name=AdaptiveWaitSleepDelay,proto3" json:"AdaptiveWaitSleepDelay,omitempty"`       // in microseconds
	AdaptiveWaitSleepDuration uint64    `protobuf:"varint,6,opt,name=AdaptiveWaitSleepDuration,proto3" json:"AdaptiveWaitSleepDuration,omitempty"` // in microseconds
}

func (x *TRdmaClient) Reset() {
	*x = TRdmaClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_rdma_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRdmaClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRdmaClient) ProtoMessage() {}

func (x *TRdmaClient) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_rdma_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRdmaClient.ProtoReflect.Descriptor instead.
func (*TRdmaClient) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_rdma_proto_rawDescGZIP(), []int{1}
}

func (x *TRdmaClient) GetQueueSize() uint32 {
	if x != nil {
		return x.QueueSize
	}
	return 0
}

func (x *TRdmaClient) GetMaxBufferSize() uint32 {
	if x != nil {
		return x.MaxBufferSize
	}
	return 0
}

func (x *TRdmaClient) GetPollerThreads() uint32 {
	if x != nil {
		return x.PollerThreads
	}
	return 0
}

func (x *TRdmaClient) GetWaitMode() EWaitMode {
	if x != nil {
		return x.WaitMode
	}
	return EWaitMode_WAIT_MODE_POLL
}

func (x *TRdmaClient) GetAdaptiveWaitSleepDelay() uint64 {
	if x != nil {
		return x.AdaptiveWaitSleepDelay
	}
	return 0
}

func (x *TRdmaClient) GetAdaptiveWaitSleepDuration() uint64 {
	if x != nil {
		return x.AdaptiveWaitSleepDuration
	}
	return 0
}

type TRdmaTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint *protos.TRdmaEndpoint `protobuf:"bytes,1,opt,name=Endpoint,proto3" json:"Endpoint,omitempty"`
	Server   *TRdmaServer          `protobuf:"bytes,2,opt,name=Server,proto3" json:"Server,omitempty"`
}

func (x *TRdmaTarget) Reset() {
	*x = TRdmaTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_rdma_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRdmaTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRdmaTarget) ProtoMessage() {}

func (x *TRdmaTarget) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_rdma_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRdmaTarget.ProtoReflect.Descriptor instead.
func (*TRdmaTarget) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_rdma_proto_rawDescGZIP(), []int{2}
}

func (x *TRdmaTarget) GetEndpoint() *protos.TRdmaEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *TRdmaTarget) GetServer() *TRdmaServer {
	if x != nil {
		return x.Server
	}
	return nil
}

var File_cloud_blockstore_config_rdma_proto protoreflect.FileDescriptor

var file_cloud_blockstore_config_rdma_proto_rawDesc = []byte{
	0x0a, 0x22, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x64, 0x6d, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x72, 0x64, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1,
	0x03, 0x0a, 0x0b, 0x54, 0x52, 0x64, 0x6d, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4d,
	0x61, 0x78, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x57, 0x61, 0x69, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x57, 0x61, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x57, 0x61, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x50, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x4d, 0x61, 0x78, 0x49,
	0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x57, 0x61, 0x69, 0x74, 0x53, 0x6c, 0x65, 0x65,
	0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x57, 0x61, 0x69, 0x74, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65,
	0x57, 0x61, 0x69, 0x74, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x57, 0x61, 0x69, 0x74, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xaf, 0x02, 0x0a, 0x0b, 0x54, 0x52, 0x64, 0x6d, 0x61, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x50,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x08,
	0x57, 0x61, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x57, 0x61, 0x69, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x57, 0x61, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x36,
	0x0a, 0x16, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x57, 0x61, 0x69, 0x74, 0x53, 0x6c,
	0x65, 0x65, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x57, 0x61, 0x69, 0x74, 0x53, 0x6c, 0x65, 0x65,
	0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x57, 0x61, 0x69, 0x74, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x69, 0x76, 0x65, 0x57, 0x61, 0x69, 0x74, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x0b, 0x54, 0x52, 0x64, 0x6d, 0x61, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x52, 0x64, 0x6d, 0x61, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x64, 0x6d, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2a, 0x55, 0x0a, 0x09, 0x45, 0x57,
	0x61, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x57,
	0x41, 0x49, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x5f, 0x57, 0x41,
	0x49, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10,
	0x02, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6e, 0x62, 0x73,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_blockstore_config_rdma_proto_rawDescOnce sync.Once
	file_cloud_blockstore_config_rdma_proto_rawDescData = file_cloud_blockstore_config_rdma_proto_rawDesc
)

func file_cloud_blockstore_config_rdma_proto_rawDescGZIP() []byte {
	file_cloud_blockstore_config_rdma_proto_rawDescOnce.Do(func() {
		file_cloud_blockstore_config_rdma_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_blockstore_config_rdma_proto_rawDescData)
	})
	return file_cloud_blockstore_config_rdma_proto_rawDescData
}

var file_cloud_blockstore_config_rdma_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cloud_blockstore_config_rdma_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_cloud_blockstore_config_rdma_proto_goTypes = []interface{}{
	(EWaitMode)(0),               // 0: NCloud.NBlockStore.NProto.EWaitMode
	(*TRdmaServer)(nil),          // 1: NCloud.NBlockStore.NProto.TRdmaServer
	(*TRdmaClient)(nil),          // 2: NCloud.NBlockStore.NProto.TRdmaClient
	(*TRdmaTarget)(nil),          // 3: NCloud.NBlockStore.NProto.TRdmaTarget
	(*protos.TRdmaEndpoint)(nil), // 4: NCloud.NBlockStore.NProto.TRdmaEndpoint
}
var file_cloud_blockstore_config_rdma_proto_depIdxs = []int32{
	0, // 0: NCloud.NBlockStore.NProto.TRdmaServer.WaitMode:type_name -> NCloud.NBlockStore.NProto.EWaitMode
	0, // 1: NCloud.NBlockStore.NProto.TRdmaClient.WaitMode:type_name -> NCloud.NBlockStore.NProto.EWaitMode
	4, // 2: NCloud.NBlockStore.NProto.TRdmaTarget.Endpoint:type_name -> NCloud.NBlockStore.NProto.TRdmaEndpoint
	1, // 3: NCloud.NBlockStore.NProto.TRdmaTarget.Server:type_name -> NCloud.NBlockStore.NProto.TRdmaServer
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_cloud_blockstore_config_rdma_proto_init() }
func file_cloud_blockstore_config_rdma_proto_init() {
	if File_cloud_blockstore_config_rdma_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_blockstore_config_rdma_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TRdmaServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_rdma_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TRdmaClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_rdma_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TRdmaTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_blockstore_config_rdma_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_blockstore_config_rdma_proto_goTypes,
		DependencyIndexes: file_cloud_blockstore_config_rdma_proto_depIdxs,
		EnumInfos:         file_cloud_blockstore_config_rdma_proto_enumTypes,
		MessageInfos:      file_cloud_blockstore_config_rdma_proto_msgTypes,
	}.Build()
	File_cloud_blockstore_config_rdma_proto = out.File
	file_cloud_blockstore_config_rdma_proto_rawDesc = nil
	file_cloud_blockstore_config_rdma_proto_goTypes = nil
	file_cloud_blockstore_config_rdma_proto_depIdxs = nil
}
