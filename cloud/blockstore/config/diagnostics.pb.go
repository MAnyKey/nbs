// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/blockstore/config/diagnostics.proto

package config

import (
	protos "github.com/ydb-platform/nbs/cloud/storage/core/protos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EHostNameScheme int32

const (
	EHostNameScheme_HOSTNAME_RAW       EHostNameScheme = 0
	EHostNameScheme_HOSTNAME_BASTION   EHostNameScheme = 1
	EHostNameScheme_HOSTNAME_YDBVIEWER EHostNameScheme = 2
)

// Enum value maps for EHostNameScheme.
var (
	EHostNameScheme_name = map[int32]string{
		0: "HOSTNAME_RAW",
		1: "HOSTNAME_BASTION",
		2: "HOSTNAME_YDBVIEWER",
	}
	EHostNameScheme_value = map[string]int32{
		"HOSTNAME_RAW":       0,
		"HOSTNAME_BASTION":   1,
		"HOSTNAME_YDBVIEWER": 2,
	}
)

func (x EHostNameScheme) Enum() *EHostNameScheme {
	p := new(EHostNameScheme)
	*p = x
	return p
}

func (x EHostNameScheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EHostNameScheme) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_blockstore_config_diagnostics_proto_enumTypes[0].Descriptor()
}

func (EHostNameScheme) Type() protoreflect.EnumType {
	return &file_cloud_blockstore_config_diagnostics_proto_enumTypes[0]
}

func (x EHostNameScheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EHostNameScheme) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EHostNameScheme(num)
	return nil
}

// Deprecated: Use EHostNameScheme.Descriptor instead.
func (EHostNameScheme) EnumDescriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_diagnostics_proto_rawDescGZIP(), []int{0}
}

type TOperationPerfThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation threshold. In milliseconds.
	Threshold *uint64 `protobuf:"varint,1,opt,name=Threshold" json:"Threshold,omitempty"`
	// Percentile to apply threshold to. [0..100]
	Percentile *float64 `protobuf:"fixed64,2,opt,name=Percentile" json:"Percentile,omitempty"`
}

func (x *TOperationPerfThreshold) Reset() {
	*x = TOperationPerfThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_diagnostics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TOperationPerfThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOperationPerfThreshold) ProtoMessage() {}

func (x *TOperationPerfThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_diagnostics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOperationPerfThreshold.ProtoReflect.Descriptor instead.
func (*TOperationPerfThreshold) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_diagnostics_proto_rawDescGZIP(), []int{0}
}

func (x *TOperationPerfThreshold) GetThreshold() uint64 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

func (x *TOperationPerfThreshold) GetPercentile() float64 {
	if x != nil && x.Percentile != nil {
		return *x.Percentile
	}
	return 0
}

type TVolumePerfThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadThreshold  *TOperationPerfThreshold `protobuf:"bytes,1,opt,name=ReadThreshold" json:"ReadThreshold,omitempty"`
	WriteThreshold *TOperationPerfThreshold `protobuf:"bytes,2,opt,name=WriteThreshold" json:"WriteThreshold,omitempty"`
}

func (x *TVolumePerfThreshold) Reset() {
	*x = TVolumePerfThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_diagnostics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TVolumePerfThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TVolumePerfThreshold) ProtoMessage() {}

func (x *TVolumePerfThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_diagnostics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TVolumePerfThreshold.ProtoReflect.Descriptor instead.
func (*TVolumePerfThreshold) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_diagnostics_proto_rawDescGZIP(), []int{1}
}

func (x *TVolumePerfThreshold) GetReadThreshold() *TOperationPerfThreshold {
	if x != nil {
		return x.ReadThreshold
	}
	return nil
}

func (x *TVolumePerfThreshold) GetWriteThreshold() *TOperationPerfThreshold {
	if x != nil {
		return x.WriteThreshold
	}
	return nil
}

type TOperationCoefficients struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iops      *uint32 `protobuf:"varint,1,opt,name=Iops" json:"Iops,omitempty"`
	Bandwidth *uint32 `protobuf:"varint,2,opt,name=Bandwidth" json:"Bandwidth,omitempty"`
}

func (x *TOperationCoefficients) Reset() {
	*x = TOperationCoefficients{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_diagnostics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TOperationCoefficients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOperationCoefficients) ProtoMessage() {}

func (x *TOperationCoefficients) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_diagnostics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOperationCoefficients.ProtoReflect.Descriptor instead.
func (*TOperationCoefficients) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_diagnostics_proto_rawDescGZIP(), []int{2}
}

func (x *TOperationCoefficients) GetIops() uint32 {
	if x != nil && x.Iops != nil {
		return *x.Iops
	}
	return 0
}

func (x *TOperationCoefficients) GetBandwidth() uint32 {
	if x != nil && x.Bandwidth != nil {
		return *x.Bandwidth
	}
	return 0
}

type TVolumePerfSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Write          *TOperationCoefficients `protobuf:"bytes,1,opt,name=Write" json:"Write,omitempty"`
	Read           *TOperationCoefficients `protobuf:"bytes,2,opt,name=Read" json:"Read,omitempty"`
	CriticalFactor *uint32                 `protobuf:"varint,3,opt,name=CriticalFactor" json:"CriticalFactor,omitempty"`
}

func (x *TVolumePerfSettings) Reset() {
	*x = TVolumePerfSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_diagnostics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TVolumePerfSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TVolumePerfSettings) ProtoMessage() {}

func (x *TVolumePerfSettings) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_diagnostics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TVolumePerfSettings.ProtoReflect.Descriptor instead.
func (*TVolumePerfSettings) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_diagnostics_proto_rawDescGZIP(), []int{3}
}

func (x *TVolumePerfSettings) GetWrite() *TOperationCoefficients {
	if x != nil {
		return x.Write
	}
	return nil
}

func (x *TVolumePerfSettings) GetRead() *TOperationCoefficients {
	if x != nil {
		return x.Read
	}
	return nil
}

func (x *TVolumePerfSettings) GetCriticalFactor() uint32 {
	if x != nil && x.CriticalFactor != nil {
		return *x.CriticalFactor
	}
	return 0
}

type TDiagnosticsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How NBS generates name for external resources.
	HostNameScheme *EHostNameScheme `protobuf:"varint,1,opt,name=HostNameScheme,enum=NCloud.NBlockStore.NProto.EHostNameScheme" json:"HostNameScheme,omitempty"`
	// Domain for hosts refered via bastion.
	BastionNameSuffix *string `protobuf:"bytes,2,opt,name=BastionNameSuffix" json:"BastionNameSuffix,omitempty"`
	// Ydb viewer host name.
	ViewerHostName *string `protobuf:"bytes,3,opt,name=ViewerHostName" json:"ViewerHostName,omitempty"`
	// Kikimr monitoring port.
	KikimrMonitoringPort *string `protobuf:"bytes,4,opt,name=KikimrMonitoringPort" json:"KikimrMonitoringPort,omitempty"`
	// Name of cluster in Solomon.
	SolomonClusterName *string `protobuf:"bytes,5,opt,name=SolomonClusterName" json:"SolomonClusterName,omitempty"`
	// Kikimr monitoring port.
	KikimrMonPort *uint32 `protobuf:"varint,6,opt,name=KikimrMonPort" json:"KikimrMonPort,omitempty"`
	// Nbs monitoring port.
	NbsMonPort *uint32 `protobuf:"varint,7,opt,name=NbsMonPort" json:"NbsMonPort,omitempty"`
	// Dump profile log data every ProfileLogTimeThreshold ms
	ProfileLogTimeThreshold *uint32 `protobuf:"varint,12,opt,name=ProfileLogTimeThreshold" json:"ProfileLogTimeThreshold,omitempty"`
	UseAsyncLogger          *bool   `protobuf:"varint,13,opt,name=UseAsyncLogger" json:"UseAsyncLogger,omitempty"`
	// Solomon host url.
	SolomonUrl *string `protobuf:"bytes,16,opt,name=SolomonUrl" json:"SolomonUrl,omitempty"`
	// Allow destructive LWTrace actions.
	UnsafeLWTrace *bool `protobuf:"varint,17,opt,name=UnsafeLWTrace" json:"UnsafeLWTrace,omitempty"`
	// Path to LWTrace query file.
	LWTraceDebugInitializationQuery *string `protobuf:"bytes,18,opt,name=LWTraceDebugInitializationQuery" json:"LWTraceDebugInitializationQuery,omitempty"`
	// Project name in solomon.
	SolomonProject *string `protobuf:"bytes,20,opt,name=SolomonProject" json:"SolomonProject,omitempty"`
	// Sampling rate for request tracking
	SamplingRate *uint32 `protobuf:"varint,21,opt,name=SamplingRate" json:"SamplingRate,omitempty"`
	// Sampling rate for requests with processing time above "slow" threshold
	SlowRequestSamplingRate *uint32 `protobuf:"varint,22,opt,name=SlowRequestSamplingRate" json:"SlowRequestSamplingRate,omitempty"`
	// Performance measurements coefficients for SSD.
	SsdPerfSettings *TVolumePerfSettings `protobuf:"bytes,23,opt,name=SsdPerfSettings" json:"SsdPerfSettings,omitempty"`
	// Performance measurements coefficients for HDD.
	HddPerfSettings *TVolumePerfSettings `protobuf:"bytes,24,opt,name=HddPerfSettings" json:"HddPerfSettings,omitempty"`
	// Performance measurements coefficients for NRD.
	NonreplPerfSettings *TVolumePerfSettings `protobuf:"bytes,25,opt,name=NonreplPerfSettings" json:"NonreplPerfSettings,omitempty"`
	// Performance measurements coefficients for mirror2 disks.
	Mirror2PerfSettings *TVolumePerfSettings `protobuf:"bytes,26,opt,name=Mirror2PerfSettings" json:"Mirror2PerfSettings,omitempty"`
	// Performance measurements coefficients for mirror3 disks.
	Mirror3PerfSettings *TVolumePerfSettings `protobuf:"bytes,27,opt,name=Mirror3PerfSettings" json:"Mirror3PerfSettings,omitempty"`
	// Expected io parallelism. Used in disk performance guarantees.
	ExpectedIoParallelism *uint32 `protobuf:"varint,28,opt,name=ExpectedIoParallelism" json:"ExpectedIoParallelism,omitempty"`
	// Unified agent endpoint
	TracesUnifiedAgentEndpoint *string `protobuf:"bytes,29,opt,name=TracesUnifiedAgentEndpoint" json:"TracesUnifiedAgentEndpoint,omitempty"`
	// Performance measurements coefficients for local disks.
	LocalSSDPerfSettings *TVolumePerfSettings `protobuf:"bytes,30,opt,name=LocalSSDPerfSettings" json:"LocalSSDPerfSettings,omitempty"`
	// Traces "syslog" identifier
	TracesSyslogIdentifier *string `protobuf:"bytes,31,opt,name=TracesSyslogIdentifier" json:"TracesSyslogIdentifier,omitempty"`
	// Path to file with cpu wait counters.
	CpuWaitFilename *string `protobuf:"bytes,32,opt,name=CpuWaitFilename" json:"CpuWaitFilename,omitempty"`
	// Number of shuttles in lwtrace pool.
	LWTraceShuttleCount *uint32 `protobuf:"varint,33,opt,name=LWTraceShuttleCount" json:"LWTraceShuttleCount,omitempty"`
	// Predictor's interval window (ms).
	PostponeTimePredictorInterval *uint32 `protobuf:"varint,34,opt,name=PostponeTimePredictorInterval" json:"PostponeTimePredictorInterval,omitempty"`
	// Max possible predicted time (ms).
	PostponeTimePredictorMaxTime *uint32 `protobuf:"varint,35,opt,name=PostponeTimePredictorMaxTime" json:"PostponeTimePredictorMaxTime,omitempty"`
	// Requests percentage in predictor to calculate possible delay [0.0, 1.0].
	PostponeTimePredictorPercentage *float64 `protobuf:"fixed64,36,opt,name=PostponeTimePredictorPercentage" json:"PostponeTimePredictorPercentage,omitempty"`
	// Request duration after which it should show up in max
	// request time alert. Thresholds are for different media kinds.
	// Measured in milliseconds.
	SSDDowntimeThreshold              *uint32 `protobuf:"varint,37,opt,name=SSDDowntimeThreshold" json:"SSDDowntimeThreshold,omitempty"`
	HDDDowntimeThreshold              *uint32 `protobuf:"varint,38,opt,name=HDDDowntimeThreshold" json:"HDDDowntimeThreshold,omitempty"`
	NonreplicatedSSDDowntimeThreshold *uint32 `protobuf:"varint,39,opt,name=NonreplicatedSSDDowntimeThreshold" json:"NonreplicatedSSDDowntimeThreshold,omitempty"`
	Mirror2SSDDowntimeThreshold       *uint32 `protobuf:"varint,40,opt,name=Mirror2SSDDowntimeThreshold" json:"Mirror2SSDDowntimeThreshold,omitempty"`
	Mirror3SSDDowntimeThreshold       *uint32 `protobuf:"varint,41,opt,name=Mirror3SSDDowntimeThreshold" json:"Mirror3SSDDowntimeThreshold,omitempty"`
	LocalSSDDowntimeThreshold         *uint32 `protobuf:"varint,42,opt,name=LocalSSDDowntimeThreshold" json:"LocalSSDDowntimeThreshold,omitempty"`
	// The tracks of the requests whose processing time in ms exceeds
	// corresponding values have a chance to be logged.
	RequestThresholds []*protos.TLWTraceThreshold `protobuf:"bytes,43,rep,name=RequestThresholds" json:"RequestThresholds,omitempty"`
	// We will report suffering disks from these clouds in a separate metric.
	CloudIdsWithStrictSLA []string `protobuf:"bytes,44,rep,name=CloudIdsWithStrictSLA" json:"CloudIdsWithStrictSLA,omitempty"`
	// Request duration after which it should show up in max
	// request time alert. Thresholds are for different media kinds.
	// Measured in milliseconds.
	NonreplicatedHDDDowntimeThreshold *uint32 `protobuf:"varint,45,opt,name=NonreplicatedHDDDowntimeThreshold" json:"NonreplicatedHDDDowntimeThreshold,omitempty"`
	// Performance measurements coefficients for HDD NRD.
	HddNonreplPerfSettings *TVolumePerfSettings `protobuf:"bytes,46,opt,name=HddNonreplPerfSettings" json:"HddNonreplPerfSettings,omitempty"`
}

func (x *TDiagnosticsConfig) Reset() {
	*x = TDiagnosticsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_diagnostics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDiagnosticsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDiagnosticsConfig) ProtoMessage() {}

func (x *TDiagnosticsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_diagnostics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDiagnosticsConfig.ProtoReflect.Descriptor instead.
func (*TDiagnosticsConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_diagnostics_proto_rawDescGZIP(), []int{4}
}

func (x *TDiagnosticsConfig) GetHostNameScheme() EHostNameScheme {
	if x != nil && x.HostNameScheme != nil {
		return *x.HostNameScheme
	}
	return EHostNameScheme_HOSTNAME_RAW
}

func (x *TDiagnosticsConfig) GetBastionNameSuffix() string {
	if x != nil && x.BastionNameSuffix != nil {
		return *x.BastionNameSuffix
	}
	return ""
}

func (x *TDiagnosticsConfig) GetViewerHostName() string {
	if x != nil && x.ViewerHostName != nil {
		return *x.ViewerHostName
	}
	return ""
}

func (x *TDiagnosticsConfig) GetKikimrMonitoringPort() string {
	if x != nil && x.KikimrMonitoringPort != nil {
		return *x.KikimrMonitoringPort
	}
	return ""
}

func (x *TDiagnosticsConfig) GetSolomonClusterName() string {
	if x != nil && x.SolomonClusterName != nil {
		return *x.SolomonClusterName
	}
	return ""
}

func (x *TDiagnosticsConfig) GetKikimrMonPort() uint32 {
	if x != nil && x.KikimrMonPort != nil {
		return *x.KikimrMonPort
	}
	return 0
}

func (x *TDiagnosticsConfig) GetNbsMonPort() uint32 {
	if x != nil && x.NbsMonPort != nil {
		return *x.NbsMonPort
	}
	return 0
}

func (x *TDiagnosticsConfig) GetProfileLogTimeThreshold() uint32 {
	if x != nil && x.ProfileLogTimeThreshold != nil {
		return *x.ProfileLogTimeThreshold
	}
	return 0
}

func (x *TDiagnosticsConfig) GetUseAsyncLogger() bool {
	if x != nil && x.UseAsyncLogger != nil {
		return *x.UseAsyncLogger
	}
	return false
}

func (x *TDiagnosticsConfig) GetSolomonUrl() string {
	if x != nil && x.SolomonUrl != nil {
		return *x.SolomonUrl
	}
	return ""
}

func (x *TDiagnosticsConfig) GetUnsafeLWTrace() bool {
	if x != nil && x.UnsafeLWTrace != nil {
		return *x.UnsafeLWTrace
	}
	return false
}

func (x *TDiagnosticsConfig) GetLWTraceDebugInitializationQuery() string {
	if x != nil && x.LWTraceDebugInitializationQuery != nil {
		return *x.LWTraceDebugInitializationQuery
	}
	return ""
}

func (x *TDiagnosticsConfig) GetSolomonProject() string {
	if x != nil && x.SolomonProject != nil {
		return *x.SolomonProject
	}
	return ""
}

func (x *TDiagnosticsConfig) GetSamplingRate() uint32 {
	if x != nil && x.SamplingRate != nil {
		return *x.SamplingRate
	}
	return 0
}

func (x *TDiagnosticsConfig) GetSlowRequestSamplingRate() uint32 {
	if x != nil && x.SlowRequestSamplingRate != nil {
		return *x.SlowRequestSamplingRate
	}
	return 0
}

func (x *TDiagnosticsConfig) GetSsdPerfSettings() *TVolumePerfSettings {
	if x != nil {
		return x.SsdPerfSettings
	}
	return nil
}

func (x *TDiagnosticsConfig) GetHddPerfSettings() *TVolumePerfSettings {
	if x != nil {
		return x.HddPerfSettings
	}
	return nil
}

func (x *TDiagnosticsConfig) GetNonreplPerfSettings() *TVolumePerfSettings {
	if x != nil {
		return x.NonreplPerfSettings
	}
	return nil
}

func (x *TDiagnosticsConfig) GetMirror2PerfSettings() *TVolumePerfSettings {
	if x != nil {
		return x.Mirror2PerfSettings
	}
	return nil
}

func (x *TDiagnosticsConfig) GetMirror3PerfSettings() *TVolumePerfSettings {
	if x != nil {
		return x.Mirror3PerfSettings
	}
	return nil
}

func (x *TDiagnosticsConfig) GetExpectedIoParallelism() uint32 {
	if x != nil && x.ExpectedIoParallelism != nil {
		return *x.ExpectedIoParallelism
	}
	return 0
}

func (x *TDiagnosticsConfig) GetTracesUnifiedAgentEndpoint() string {
	if x != nil && x.TracesUnifiedAgentEndpoint != nil {
		return *x.TracesUnifiedAgentEndpoint
	}
	return ""
}

func (x *TDiagnosticsConfig) GetLocalSSDPerfSettings() *TVolumePerfSettings {
	if x != nil {
		return x.LocalSSDPerfSettings
	}
	return nil
}

func (x *TDiagnosticsConfig) GetTracesSyslogIdentifier() string {
	if x != nil && x.TracesSyslogIdentifier != nil {
		return *x.TracesSyslogIdentifier
	}
	return ""
}

func (x *TDiagnosticsConfig) GetCpuWaitFilename() string {
	if x != nil && x.CpuWaitFilename != nil {
		return *x.CpuWaitFilename
	}
	return ""
}

func (x *TDiagnosticsConfig) GetLWTraceShuttleCount() uint32 {
	if x != nil && x.LWTraceShuttleCount != nil {
		return *x.LWTraceShuttleCount
	}
	return 0
}

func (x *TDiagnosticsConfig) GetPostponeTimePredictorInterval() uint32 {
	if x != nil && x.PostponeTimePredictorInterval != nil {
		return *x.PostponeTimePredictorInterval
	}
	return 0
}

func (x *TDiagnosticsConfig) GetPostponeTimePredictorMaxTime() uint32 {
	if x != nil && x.PostponeTimePredictorMaxTime != nil {
		return *x.PostponeTimePredictorMaxTime
	}
	return 0
}

func (x *TDiagnosticsConfig) GetPostponeTimePredictorPercentage() float64 {
	if x != nil && x.PostponeTimePredictorPercentage != nil {
		return *x.PostponeTimePredictorPercentage
	}
	return 0
}

func (x *TDiagnosticsConfig) GetSSDDowntimeThreshold() uint32 {
	if x != nil && x.SSDDowntimeThreshold != nil {
		return *x.SSDDowntimeThreshold
	}
	return 0
}

func (x *TDiagnosticsConfig) GetHDDDowntimeThreshold() uint32 {
	if x != nil && x.HDDDowntimeThreshold != nil {
		return *x.HDDDowntimeThreshold
	}
	return 0
}

func (x *TDiagnosticsConfig) GetNonreplicatedSSDDowntimeThreshold() uint32 {
	if x != nil && x.NonreplicatedSSDDowntimeThreshold != nil {
		return *x.NonreplicatedSSDDowntimeThreshold
	}
	return 0
}

func (x *TDiagnosticsConfig) GetMirror2SSDDowntimeThreshold() uint32 {
	if x != nil && x.Mirror2SSDDowntimeThreshold != nil {
		return *x.Mirror2SSDDowntimeThreshold
	}
	return 0
}

func (x *TDiagnosticsConfig) GetMirror3SSDDowntimeThreshold() uint32 {
	if x != nil && x.Mirror3SSDDowntimeThreshold != nil {
		return *x.Mirror3SSDDowntimeThreshold
	}
	return 0
}

func (x *TDiagnosticsConfig) GetLocalSSDDowntimeThreshold() uint32 {
	if x != nil && x.LocalSSDDowntimeThreshold != nil {
		return *x.LocalSSDDowntimeThreshold
	}
	return 0
}

func (x *TDiagnosticsConfig) GetRequestThresholds() []*protos.TLWTraceThreshold {
	if x != nil {
		return x.RequestThresholds
	}
	return nil
}

func (x *TDiagnosticsConfig) GetCloudIdsWithStrictSLA() []string {
	if x != nil {
		return x.CloudIdsWithStrictSLA
	}
	return nil
}

func (x *TDiagnosticsConfig) GetNonreplicatedHDDDowntimeThreshold() uint32 {
	if x != nil && x.NonreplicatedHDDDowntimeThreshold != nil {
		return *x.NonreplicatedHDDDowntimeThreshold
	}
	return 0
}

func (x *TDiagnosticsConfig) GetHddNonreplPerfSettings() *TVolumePerfSettings {
	if x != nil {
		return x.HddNonreplPerfSettings
	}
	return nil
}

var File_cloud_blockstore_config_diagnostics_proto protoreflect.FileDescriptor

var file_cloud_blockstore_config_diagnostics_proto_rawDesc = []byte{
	0x0a, 0x29, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a,
	0x17, 0x54, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x14, 0x54, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x50, 0x65, 0x72, 0x66, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x58, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72,
	0x66, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0d, 0x52, 0x65, 0x61, 0x64,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x5a, 0x0a, 0x0e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x4a, 0x0a, 0x16, 0x54, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49,
	0x6f, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x22, 0xcd, 0x01, 0x0a, 0x13, 0x54, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72,
	0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0xb0, 0x13, 0x0a, 0x12, 0x54, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x0e, 0x48, 0x6f, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x48, 0x6f,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x0e, 0x48, 0x6f,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x42, 0x61, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x61, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x56, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x4b, 0x69, 0x6b, 0x69, 0x6d, 0x72, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x4b, 0x69, 0x6b, 0x69, 0x6d, 0x72, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4b, 0x69, 0x6b, 0x69, 0x6d, 0x72,
	0x4d, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4b,
	0x69, 0x6b, 0x69, 0x6d, 0x72, 0x4d, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x4e, 0x62, 0x73, 0x4d, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x4e, 0x62, 0x73, 0x4d, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x17,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x55, 0x73, 0x65, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x24,
	0x0a, 0x0d, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x4c, 0x57, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x4c,
	0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x53, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x53, 0x73, 0x64, 0x50, 0x65, 0x72, 0x66, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x53,
	0x73, 0x64, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x58,
	0x0a, 0x0f, 0x48, 0x64, 0x64, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x66, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x48, 0x64, 0x64, 0x50, 0x65, 0x72, 0x66,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x4e, 0x6f, 0x6e, 0x72,
	0x65, 0x70, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x13, 0x4e, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6c, 0x50, 0x65,
	0x72, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x32, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x66, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x13, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x32,
	0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x60, 0x0a, 0x13,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x33, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72,
	0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x13, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x33, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34,
	0x0a, 0x15, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6f, 0x50, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x45,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x69, 0x73, 0x6d, 0x12, 0x3e, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x55, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x53, 0x44,
	0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x53, 0x44, 0x50, 0x65, 0x72, 0x66,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x0f, 0x43, 0x70, 0x75, 0x57, 0x61, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x70, 0x75, 0x57, 0x61,
	0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x57,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x68, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x53, 0x68, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1d,
	0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1d, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x42, 0x0a, 0x1c, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f,
	0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x4d,
	0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f,
	0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1f, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x53, 0x53, 0x44, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x53, 0x53, 0x44, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x48, 0x44, 0x44, 0x44, 0x6f, 0x77, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x48, 0x44, 0x44, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4c, 0x0a, 0x21, 0x4e, 0x6f, 0x6e, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x53, 0x44, 0x44, 0x6f, 0x77, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x21, 0x4e, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x53, 0x44, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x32, 0x53, 0x53, 0x44, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x32, 0x53, 0x53, 0x44, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x4d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x33, 0x53, 0x53, 0x44, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x33, 0x53, 0x53, 0x44, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x53, 0x53, 0x44, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x53, 0x53, 0x44, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4e, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x2b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x4c,
	0x41, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x4c, 0x41, 0x12, 0x4c,
	0x0a, 0x21, 0x4e, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x44, 0x44, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x4e, 0x6f, 0x6e, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x44, 0x44, 0x44, 0x6f, 0x77, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x66, 0x0a, 0x16,
	0x48, 0x64, 0x64, 0x4e, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x16, 0x48, 0x64,
	0x64, 0x4e, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2a, 0x51, 0x0a, 0x0f, 0x45, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x4f, 0x53, 0x54, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x57, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x4f, 0x53,
	0x54, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x48, 0x4f, 0x53, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x59, 0x44, 0x42, 0x56,
	0x49, 0x45, 0x57, 0x45, 0x52, 0x10, 0x02, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x6e, 0x62, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
}

var (
	file_cloud_blockstore_config_diagnostics_proto_rawDescOnce sync.Once
	file_cloud_blockstore_config_diagnostics_proto_rawDescData = file_cloud_blockstore_config_diagnostics_proto_rawDesc
)

func file_cloud_blockstore_config_diagnostics_proto_rawDescGZIP() []byte {
	file_cloud_blockstore_config_diagnostics_proto_rawDescOnce.Do(func() {
		file_cloud_blockstore_config_diagnostics_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_blockstore_config_diagnostics_proto_rawDescData)
	})
	return file_cloud_blockstore_config_diagnostics_proto_rawDescData
}

var file_cloud_blockstore_config_diagnostics_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cloud_blockstore_config_diagnostics_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_cloud_blockstore_config_diagnostics_proto_goTypes = []interface{}{
	(EHostNameScheme)(0),             // 0: NCloud.NBlockStore.NProto.EHostNameScheme
	(*TOperationPerfThreshold)(nil),  // 1: NCloud.NBlockStore.NProto.TOperationPerfThreshold
	(*TVolumePerfThreshold)(nil),     // 2: NCloud.NBlockStore.NProto.TVolumePerfThreshold
	(*TOperationCoefficients)(nil),   // 3: NCloud.NBlockStore.NProto.TOperationCoefficients
	(*TVolumePerfSettings)(nil),      // 4: NCloud.NBlockStore.NProto.TVolumePerfSettings
	(*TDiagnosticsConfig)(nil),       // 5: NCloud.NBlockStore.NProto.TDiagnosticsConfig
	(*protos.TLWTraceThreshold)(nil), // 6: NCloud.NProto.TLWTraceThreshold
}
var file_cloud_blockstore_config_diagnostics_proto_depIdxs = []int32{
	1,  // 0: NCloud.NBlockStore.NProto.TVolumePerfThreshold.ReadThreshold:type_name -> NCloud.NBlockStore.NProto.TOperationPerfThreshold
	1,  // 1: NCloud.NBlockStore.NProto.TVolumePerfThreshold.WriteThreshold:type_name -> NCloud.NBlockStore.NProto.TOperationPerfThreshold
	3,  // 2: NCloud.NBlockStore.NProto.TVolumePerfSettings.Write:type_name -> NCloud.NBlockStore.NProto.TOperationCoefficients
	3,  // 3: NCloud.NBlockStore.NProto.TVolumePerfSettings.Read:type_name -> NCloud.NBlockStore.NProto.TOperationCoefficients
	0,  // 4: NCloud.NBlockStore.NProto.TDiagnosticsConfig.HostNameScheme:type_name -> NCloud.NBlockStore.NProto.EHostNameScheme
	4,  // 5: NCloud.NBlockStore.NProto.TDiagnosticsConfig.SsdPerfSettings:type_name -> NCloud.NBlockStore.NProto.TVolumePerfSettings
	4,  // 6: NCloud.NBlockStore.NProto.TDiagnosticsConfig.HddPerfSettings:type_name -> NCloud.NBlockStore.NProto.TVolumePerfSettings
	4,  // 7: NCloud.NBlockStore.NProto.TDiagnosticsConfig.NonreplPerfSettings:type_name -> NCloud.NBlockStore.NProto.TVolumePerfSettings
	4,  // 8: NCloud.NBlockStore.NProto.TDiagnosticsConfig.Mirror2PerfSettings:type_name -> NCloud.NBlockStore.NProto.TVolumePerfSettings
	4,  // 9: NCloud.NBlockStore.NProto.TDiagnosticsConfig.Mirror3PerfSettings:type_name -> NCloud.NBlockStore.NProto.TVolumePerfSettings
	4,  // 10: NCloud.NBlockStore.NProto.TDiagnosticsConfig.LocalSSDPerfSettings:type_name -> NCloud.NBlockStore.NProto.TVolumePerfSettings
	6,  // 11: NCloud.NBlockStore.NProto.TDiagnosticsConfig.RequestThresholds:type_name -> NCloud.NProto.TLWTraceThreshold
	4,  // 12: NCloud.NBlockStore.NProto.TDiagnosticsConfig.HddNonreplPerfSettings:type_name -> NCloud.NBlockStore.NProto.TVolumePerfSettings
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_cloud_blockstore_config_diagnostics_proto_init() }
func file_cloud_blockstore_config_diagnostics_proto_init() {
	if File_cloud_blockstore_config_diagnostics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_blockstore_config_diagnostics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TOperationPerfThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_diagnostics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TVolumePerfThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_diagnostics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TOperationCoefficients); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_diagnostics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TVolumePerfSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_diagnostics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDiagnosticsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_blockstore_config_diagnostics_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_blockstore_config_diagnostics_proto_goTypes,
		DependencyIndexes: file_cloud_blockstore_config_diagnostics_proto_depIdxs,
		EnumInfos:         file_cloud_blockstore_config_diagnostics_proto_enumTypes,
		MessageInfos:      file_cloud_blockstore_config_diagnostics_proto_msgTypes,
	}.Build()
	File_cloud_blockstore_config_diagnostics_proto = out.File
	file_cloud_blockstore_config_diagnostics_proto_rawDesc = nil
	file_cloud_blockstore_config_diagnostics_proto_goTypes = nil
	file_cloud_blockstore_config_diagnostics_proto_depIdxs = nil
}
