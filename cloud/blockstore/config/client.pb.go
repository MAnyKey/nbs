// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/blockstore/config/client.proto

package config

import (
	protos "github.com/ydb-platform/nbs/cloud/blockstore/public/api/protos"
	protos1 "github.com/ydb-platform/nbs/cloud/storage/core/protos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TClientMediaKindThrottlingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Per cpu unit.
	ReadBandwidthPerCpuUnit  *uint32 `protobuf:"varint,1,opt,name=ReadBandwidthPerCpuUnit" json:"ReadBandwidthPerCpuUnit,omitempty"` // in MB/s
	ReadIopsPerCpuUnit       *uint32 `protobuf:"varint,2,opt,name=ReadIopsPerCpuUnit" json:"ReadIopsPerCpuUnit,omitempty"`
	WriteBandwidthPerCpuUnit *uint32 `protobuf:"varint,3,opt,name=WriteBandwidthPerCpuUnit" json:"WriteBandwidthPerCpuUnit,omitempty"` // in MB/s
	WriteIopsPerCpuUnit      *uint32 `protobuf:"varint,4,opt,name=WriteIopsPerCpuUnit" json:"WriteIopsPerCpuUnit,omitempty"`
	// Max limits independent of VM size.
	MaxReadBandwidth  *uint32 `protobuf:"varint,5,opt,name=MaxReadBandwidth" json:"MaxReadBandwidth,omitempty"` // in MB/s
	MaxReadIops       *uint32 `protobuf:"varint,6,opt,name=MaxReadIops" json:"MaxReadIops,omitempty"`
	MaxWriteBandwidth *uint32 `protobuf:"varint,7,opt,name=MaxWriteBandwidth" json:"MaxWriteBandwidth,omitempty"` // in MB/s
	MaxWriteIops      *uint32 `protobuf:"varint,8,opt,name=MaxWriteIops" json:"MaxWriteIops,omitempty"`
	// Overcommit for host limits.
	HostOvercommitPercentage *uint32 `protobuf:"varint,9,opt,name=HostOvercommitPercentage" json:"HostOvercommitPercentage,omitempty"`
}

func (x *TClientMediaKindThrottlingConfig) Reset() {
	*x = TClientMediaKindThrottlingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_client_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TClientMediaKindThrottlingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TClientMediaKindThrottlingConfig) ProtoMessage() {}

func (x *TClientMediaKindThrottlingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_client_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TClientMediaKindThrottlingConfig.ProtoReflect.Descriptor instead.
func (*TClientMediaKindThrottlingConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_client_proto_rawDescGZIP(), []int{0}
}

func (x *TClientMediaKindThrottlingConfig) GetReadBandwidthPerCpuUnit() uint32 {
	if x != nil && x.ReadBandwidthPerCpuUnit != nil {
		return *x.ReadBandwidthPerCpuUnit
	}
	return 0
}

func (x *TClientMediaKindThrottlingConfig) GetReadIopsPerCpuUnit() uint32 {
	if x != nil && x.ReadIopsPerCpuUnit != nil {
		return *x.ReadIopsPerCpuUnit
	}
	return 0
}

func (x *TClientMediaKindThrottlingConfig) GetWriteBandwidthPerCpuUnit() uint32 {
	if x != nil && x.WriteBandwidthPerCpuUnit != nil {
		return *x.WriteBandwidthPerCpuUnit
	}
	return 0
}

func (x *TClientMediaKindThrottlingConfig) GetWriteIopsPerCpuUnit() uint32 {
	if x != nil && x.WriteIopsPerCpuUnit != nil {
		return *x.WriteIopsPerCpuUnit
	}
	return 0
}

func (x *TClientMediaKindThrottlingConfig) GetMaxReadBandwidth() uint32 {
	if x != nil && x.MaxReadBandwidth != nil {
		return *x.MaxReadBandwidth
	}
	return 0
}

func (x *TClientMediaKindThrottlingConfig) GetMaxReadIops() uint32 {
	if x != nil && x.MaxReadIops != nil {
		return *x.MaxReadIops
	}
	return 0
}

func (x *TClientMediaKindThrottlingConfig) GetMaxWriteBandwidth() uint32 {
	if x != nil && x.MaxWriteBandwidth != nil {
		return *x.MaxWriteBandwidth
	}
	return 0
}

func (x *TClientMediaKindThrottlingConfig) GetMaxWriteIops() uint32 {
	if x != nil && x.MaxWriteIops != nil {
		return *x.MaxWriteIops
	}
	return 0
}

func (x *TClientMediaKindThrottlingConfig) GetHostOvercommitPercentage() uint32 {
	if x != nil && x.HostOvercommitPercentage != nil {
		return *x.HostOvercommitPercentage
	}
	return 0
}

type TClientThrottlingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In MBs per second.
	BandwidthPerCpuUnit *uint32 `protobuf:"varint,1,opt,name=BandwidthPerCpuUnit" json:"BandwidthPerCpuUnit,omitempty"`
	// IO operation count per second.
	IopsPerCpuUnit *uint32 `protobuf:"varint,2,opt,name=IopsPerCpuUnit" json:"IopsPerCpuUnit,omitempty"`
	// Use BurstPercentage instead.
	BurstDivisor *uint32 `protobuf:"varint,3,opt,name=BurstDivisor" json:"BurstDivisor,omitempty"`
	// Max burst equals {MaxIops, MaxBandwidth} * BurstPercentage / 100.
	BurstPercentage *uint32 `protobuf:"varint,4,opt,name=BurstPercentage" json:"BurstPercentage,omitempty"`
	// Multiplier for nonreplicated disks.
	NonreplicatedMultiplier *uint32 `protobuf:"varint,5,opt,name=NonreplicatedMultiplier" json:"NonreplicatedMultiplier,omitempty"`
	// Actual settings (these ones override legacy settings)
	HDDThrottlingConfig     *TClientMediaKindThrottlingConfig `protobuf:"bytes,6,opt,name=HDDThrottlingConfig" json:"HDDThrottlingConfig,omitempty"`
	SSDThrottlingConfig     *TClientMediaKindThrottlingConfig `protobuf:"bytes,7,opt,name=SSDThrottlingConfig" json:"SSDThrottlingConfig,omitempty"`
	NonreplThrottlingConfig *TClientMediaKindThrottlingConfig `protobuf:"bytes,8,opt,name=NonreplThrottlingConfig" json:"NonreplThrottlingConfig,omitempty"`
	Mirror2ThrottlingConfig *TClientMediaKindThrottlingConfig `protobuf:"bytes,9,opt,name=Mirror2ThrottlingConfig" json:"Mirror2ThrottlingConfig,omitempty"`
	Mirror3ThrottlingConfig *TClientMediaKindThrottlingConfig `protobuf:"bytes,10,opt,name=Mirror3ThrottlingConfig" json:"Mirror3ThrottlingConfig,omitempty"`
	// Host limits.
	MaxIopsPerHost               *uint64 `protobuf:"varint,11,opt,name=MaxIopsPerHost" json:"MaxIopsPerHost,omitempty"`
	MaxBandwidthPerHost          *uint64 `protobuf:"varint,12,opt,name=MaxBandwidthPerHost" json:"MaxBandwidthPerHost,omitempty"`
	InfraThrottlingConfigPath    *string `protobuf:"bytes,13,opt,name=InfraThrottlingConfigPath" json:"InfraThrottlingConfigPath,omitempty"`
	NetworkThroughputPercentage  *uint32 `protobuf:"varint,14,opt,name=NetworkThroughputPercentage" json:"NetworkThroughputPercentage,omitempty"`
	DefaultHostCpuCount          *uint32 `protobuf:"varint,15,opt,name=DefaultHostCpuCount" json:"DefaultHostCpuCount,omitempty"`
	DefaultNetworkMbitThroughput *uint32 `protobuf:"varint,16,opt,name=DefaultNetworkMbitThroughput" json:"DefaultNetworkMbitThroughput,omitempty"`
	// Actual settings (these ones override legacy settings)
	HddNonreplThrottlingConfig *TClientMediaKindThrottlingConfig `protobuf:"bytes,17,opt,name=HddNonreplThrottlingConfig" json:"HddNonreplThrottlingConfig,omitempty"`
}

func (x *TClientThrottlingConfig) Reset() {
	*x = TClientThrottlingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_client_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TClientThrottlingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TClientThrottlingConfig) ProtoMessage() {}

func (x *TClientThrottlingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_client_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TClientThrottlingConfig.ProtoReflect.Descriptor instead.
func (*TClientThrottlingConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_client_proto_rawDescGZIP(), []int{1}
}

func (x *TClientThrottlingConfig) GetBandwidthPerCpuUnit() uint32 {
	if x != nil && x.BandwidthPerCpuUnit != nil {
		return *x.BandwidthPerCpuUnit
	}
	return 0
}

func (x *TClientThrottlingConfig) GetIopsPerCpuUnit() uint32 {
	if x != nil && x.IopsPerCpuUnit != nil {
		return *x.IopsPerCpuUnit
	}
	return 0
}

func (x *TClientThrottlingConfig) GetBurstDivisor() uint32 {
	if x != nil && x.BurstDivisor != nil {
		return *x.BurstDivisor
	}
	return 0
}

func (x *TClientThrottlingConfig) GetBurstPercentage() uint32 {
	if x != nil && x.BurstPercentage != nil {
		return *x.BurstPercentage
	}
	return 0
}

func (x *TClientThrottlingConfig) GetNonreplicatedMultiplier() uint32 {
	if x != nil && x.NonreplicatedMultiplier != nil {
		return *x.NonreplicatedMultiplier
	}
	return 0
}

func (x *TClientThrottlingConfig) GetHDDThrottlingConfig() *TClientMediaKindThrottlingConfig {
	if x != nil {
		return x.HDDThrottlingConfig
	}
	return nil
}

func (x *TClientThrottlingConfig) GetSSDThrottlingConfig() *TClientMediaKindThrottlingConfig {
	if x != nil {
		return x.SSDThrottlingConfig
	}
	return nil
}

func (x *TClientThrottlingConfig) GetNonreplThrottlingConfig() *TClientMediaKindThrottlingConfig {
	if x != nil {
		return x.NonreplThrottlingConfig
	}
	return nil
}

func (x *TClientThrottlingConfig) GetMirror2ThrottlingConfig() *TClientMediaKindThrottlingConfig {
	if x != nil {
		return x.Mirror2ThrottlingConfig
	}
	return nil
}

func (x *TClientThrottlingConfig) GetMirror3ThrottlingConfig() *TClientMediaKindThrottlingConfig {
	if x != nil {
		return x.Mirror3ThrottlingConfig
	}
	return nil
}

func (x *TClientThrottlingConfig) GetMaxIopsPerHost() uint64 {
	if x != nil && x.MaxIopsPerHost != nil {
		return *x.MaxIopsPerHost
	}
	return 0
}

func (x *TClientThrottlingConfig) GetMaxBandwidthPerHost() uint64 {
	if x != nil && x.MaxBandwidthPerHost != nil {
		return *x.MaxBandwidthPerHost
	}
	return 0
}

func (x *TClientThrottlingConfig) GetInfraThrottlingConfigPath() string {
	if x != nil && x.InfraThrottlingConfigPath != nil {
		return *x.InfraThrottlingConfigPath
	}
	return ""
}

func (x *TClientThrottlingConfig) GetNetworkThroughputPercentage() uint32 {
	if x != nil && x.NetworkThroughputPercentage != nil {
		return *x.NetworkThroughputPercentage
	}
	return 0
}

func (x *TClientThrottlingConfig) GetDefaultHostCpuCount() uint32 {
	if x != nil && x.DefaultHostCpuCount != nil {
		return *x.DefaultHostCpuCount
	}
	return 0
}

func (x *TClientThrottlingConfig) GetDefaultNetworkMbitThroughput() uint32 {
	if x != nil && x.DefaultNetworkMbitThroughput != nil {
		return *x.DefaultNetworkMbitThroughput
	}
	return 0
}

func (x *TClientThrottlingConfig) GetHddNonreplThrottlingConfig() *TClientMediaKindThrottlingConfig {
	if x != nil {
		return x.HddNonreplThrottlingConfig
	}
	return nil
}

type TClientTracingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplingRate               *uint32 `protobuf:"varint,1,opt,name=SamplingRate" json:"SamplingRate,omitempty"`
	SlowRequestSamplingRate    *uint32 `protobuf:"varint,2,opt,name=SlowRequestSamplingRate" json:"SlowRequestSamplingRate,omitempty"`
	TracesUnifiedAgentEndpoint *string `protobuf:"bytes,3,opt,name=TracesUnifiedAgentEndpoint" json:"TracesUnifiedAgentEndpoint,omitempty"`
	TracesSyslogIdentifier     *string `protobuf:"bytes,4,opt,name=TracesSyslogIdentifier" json:"TracesSyslogIdentifier,omitempty"`
}

func (x *TClientTracingConfig) Reset() {
	*x = TClientTracingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_client_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TClientTracingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TClientTracingConfig) ProtoMessage() {}

func (x *TClientTracingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_client_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TClientTracingConfig.ProtoReflect.Descriptor instead.
func (*TClientTracingConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_client_proto_rawDescGZIP(), []int{2}
}

func (x *TClientTracingConfig) GetSamplingRate() uint32 {
	if x != nil && x.SamplingRate != nil {
		return *x.SamplingRate
	}
	return 0
}

func (x *TClientTracingConfig) GetSlowRequestSamplingRate() uint32 {
	if x != nil && x.SlowRequestSamplingRate != nil {
		return *x.SlowRequestSamplingRate
	}
	return 0
}

func (x *TClientTracingConfig) GetTracesUnifiedAgentEndpoint() string {
	if x != nil && x.TracesUnifiedAgentEndpoint != nil {
		return *x.TracesUnifiedAgentEndpoint
	}
	return ""
}

func (x *TClientTracingConfig) GetTracesSyslogIdentifier() string {
	if x != nil && x.TracesSyslogIdentifier != nil {
		return *x.TracesSyslogIdentifier
	}
	return ""
}

type TClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Remote host name or address.
	Host *string `protobuf:"bytes,1,opt,name=Host" json:"Host,omitempty"`
	// Remote host data port.
	// TODO: Rename to DataPort.
	Port *uint32 `protobuf:"varint,2,opt,name=Port" json:"Port,omitempty"`
	// Request timeout (in milliseconds).
	RequestTimeout *uint32 `protobuf:"varint,3,opt,name=RequestTimeout" json:"RequestTimeout,omitempty"`
	// Request retry timeout (in milliseconds).
	RetryTimeout *uint32 `protobuf:"varint,4,opt,name=RetryTimeout" json:"RetryTimeout,omitempty"`
	// Request retry timeout increment (in milliseconds).
	RetryTimeoutIncrement *uint32 `protobuf:"varint,5,opt,name=RetryTimeoutIncrement" json:"RetryTimeoutIncrement,omitempty"`
	// Maximum size of gRPC message.
	MaxMessageSize *uint32 `protobuf:"varint,6,opt,name=MaxMessageSize" json:"MaxMessageSize,omitempty"`
	// Number of gRPC threads.
	ThreadsCount *uint32 `protobuf:"varint,7,opt,name=ThreadsCount" json:"ThreadsCount,omitempty"`
	// Memory quota for gRPC request processing.
	MemoryQuotaBytes *uint32 `protobuf:"varint,8,opt,name=MemoryQuotaBytes" json:"MemoryQuotaBytes,omitempty"`
	// Remote host secure control port (with TLS).
	// If set, client will ignore InsecurePort and connect via SecurePort.
	SecurePort *uint32 `protobuf:"varint,9,opt,name=SecurePort" json:"SecurePort,omitempty"`
	// TLS details.
	RootCertsFile      *string `protobuf:"bytes,10,opt,name=RootCertsFile" json:"RootCertsFile,omitempty"`
	CertFile           *string `protobuf:"bytes,11,opt,name=CertFile" json:"CertFile,omitempty"`
	CertPrivateKeyFile *string `protobuf:"bytes,12,opt,name=CertPrivateKeyFile" json:"CertPrivateKeyFile,omitempty"`
	// Token to use for authentication.
	AuthToken *string `protobuf:"bytes,13,opt,name=AuthToken" json:"AuthToken,omitempty"`
	// Parameters for TClientPerformanceProfile generation
	ThrottlingConfig *TClientThrottlingConfig `protobuf:"bytes,15,opt,name=ThrottlingConfig" json:"ThrottlingConfig,omitempty"`
	// Tracing config
	TracingConfig *TClientTracingConfig `protobuf:"bytes,16,opt,name=TracingConfig" json:"TracingConfig,omitempty"`
	// Unix-socket path.
	UnixSocketPath *string `protobuf:"bytes,17,opt,name=UnixSocketPath" json:"UnixSocketPath,omitempty"`
	// Limit of grpc threads count
	GrpcThreadsLimit *uint32 `protobuf:"varint,18,opt,name=GrpcThreadsLimit" json:"GrpcThreadsLimit,omitempty"`
	// Remote host insecure control port.
	InsecurePort *uint32 `protobuf:"varint,19,opt,name=InsecurePort" json:"InsecurePort,omitempty"`
	// VM instance id.
	InstanceId *string `protobuf:"bytes,20,opt,name=InstanceId" json:"InstanceId,omitempty"`
	// This value is shown to our clients - they should not use request sizes
	// larger than MaxRequestSize
	MaxRequestSize *uint32 `protobuf:"varint,21,opt,name=MaxRequestSize" json:"MaxRequestSize,omitempty"`
	// Client id.
	ClientId *string `protobuf:"bytes,22,opt,name=ClientId" json:"ClientId,omitempty"`
	// IPC type used by client.
	IpcType *protos.EClientIpcType `protobuf:"varint,23,opt,name=IpcType,enum=NCloud.NBlockStore.NProto.EClientIpcType" json:"IpcType,omitempty"`
	// NBD client details.
	NbdThreadsCount    *uint32 `protobuf:"varint,24,opt,name=NbdThreadsCount" json:"NbdThreadsCount,omitempty"`
	NbdSocketSuffix    *string `protobuf:"bytes,25,opt,name=NbdSocketSuffix" json:"NbdSocketSuffix,omitempty"`
	NbdStructuredReply *bool   `protobuf:"varint,28,opt,name=NbdStructuredReply" json:"NbdStructuredReply,omitempty"`
	NbdUseNbsErrors    *bool   `protobuf:"varint,31,opt,name=NbdUseNbsErrors" json:"NbdUseNbsErrors,omitempty"`
	// Remount deadline (in milliseconds).
	RemountDeadline *uint32 `protobuf:"varint,26,opt,name=RemountDeadline" json:"RemountDeadline,omitempty"`
	// Max retry timeout for connection errors.
	ConnectionErrorMaxRetryTimeout *uint32 `protobuf:"varint,27,opt,name=ConnectionErrorMaxRetryTimeout" json:"ConnectionErrorMaxRetryTimeout,omitempty"`
	// Time between connection attempts (in milliseconds).
	GrpcReconnectBackoff *uint32 `protobuf:"varint,29,opt,name=GrpcReconnectBackoff" json:"GrpcReconnectBackoff,omitempty"`
	// NVMe client details.
	NvmeDeviceTransportId *string `protobuf:"bytes,32,opt,name=NvmeDeviceTransportId" json:"NvmeDeviceTransportId,omitempty"`
	NvmeDeviceNqn         *string `protobuf:"bytes,33,opt,name=NvmeDeviceNqn" json:"NvmeDeviceNqn,omitempty"`
	// SCSI client details.
	ScsiDeviceUrl    *string `protobuf:"bytes,34,opt,name=ScsiDeviceUrl" json:"ScsiDeviceUrl,omitempty"`
	ScsiInitiatorIqn *string `protobuf:"bytes,35,opt,name=ScsiInitiatorIqn" json:"ScsiInitiatorIqn,omitempty"`
	// RDMA client details.
	RdmaDeviceAddress *string `protobuf:"bytes,36,opt,name=RdmaDeviceAddress" json:"RdmaDeviceAddress,omitempty"`
	RdmaDevicePort    *uint32 `protobuf:"varint,37,opt,name=RdmaDevicePort" json:"RdmaDevicePort,omitempty"`
	// Disable durable client for local ssd.
	LocalNonreplDisableDurableClient *bool `protobuf:"varint,38,opt,name=LocalNonreplDisableDurableClient" json:"LocalNonreplDisableDurableClient,omitempty"`
	// The tracks of the requests whose processing time in ms exceeds
	// corresponding values have a chance to be logged.
	RequestThresholds []*protos1.TLWTraceThreshold `protobuf:"bytes,39,rep,name=RequestThresholds" json:"RequestThresholds,omitempty"`
	// Skip server certificate verification
	SkipCertVerification *bool `protobuf:"varint,40,opt,name=SkipCertVerification" json:"SkipCertVerification,omitempty"`
	// Request timeout increment on every retry (in milliseconds).
	RequestTimeoutIncrementOnRetry *uint32 `protobuf:"varint,41,opt,name=RequestTimeoutIncrementOnRetry" json:"RequestTimeoutIncrementOnRetry,omitempty"`
	// Max request timeout (in milliseconds)
	RequestTimeoutMax *uint32 `protobuf:"varint,42,opt,name=RequestTimeoutMax" json:"RequestTimeoutMax,omitempty"`
}

func (x *TClientConfig) Reset() {
	*x = TClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_client_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TClientConfig) ProtoMessage() {}

func (x *TClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_client_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TClientConfig.ProtoReflect.Descriptor instead.
func (*TClientConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_client_proto_rawDescGZIP(), []int{3}
}

func (x *TClientConfig) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *TClientConfig) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *TClientConfig) GetRequestTimeout() uint32 {
	if x != nil && x.RequestTimeout != nil {
		return *x.RequestTimeout
	}
	return 0
}

func (x *TClientConfig) GetRetryTimeout() uint32 {
	if x != nil && x.RetryTimeout != nil {
		return *x.RetryTimeout
	}
	return 0
}

func (x *TClientConfig) GetRetryTimeoutIncrement() uint32 {
	if x != nil && x.RetryTimeoutIncrement != nil {
		return *x.RetryTimeoutIncrement
	}
	return 0
}

func (x *TClientConfig) GetMaxMessageSize() uint32 {
	if x != nil && x.MaxMessageSize != nil {
		return *x.MaxMessageSize
	}
	return 0
}

func (x *TClientConfig) GetThreadsCount() uint32 {
	if x != nil && x.ThreadsCount != nil {
		return *x.ThreadsCount
	}
	return 0
}

func (x *TClientConfig) GetMemoryQuotaBytes() uint32 {
	if x != nil && x.MemoryQuotaBytes != nil {
		return *x.MemoryQuotaBytes
	}
	return 0
}

func (x *TClientConfig) GetSecurePort() uint32 {
	if x != nil && x.SecurePort != nil {
		return *x.SecurePort
	}
	return 0
}

func (x *TClientConfig) GetRootCertsFile() string {
	if x != nil && x.RootCertsFile != nil {
		return *x.RootCertsFile
	}
	return ""
}

func (x *TClientConfig) GetCertFile() string {
	if x != nil && x.CertFile != nil {
		return *x.CertFile
	}
	return ""
}

func (x *TClientConfig) GetCertPrivateKeyFile() string {
	if x != nil && x.CertPrivateKeyFile != nil {
		return *x.CertPrivateKeyFile
	}
	return ""
}

func (x *TClientConfig) GetAuthToken() string {
	if x != nil && x.AuthToken != nil {
		return *x.AuthToken
	}
	return ""
}

func (x *TClientConfig) GetThrottlingConfig() *TClientThrottlingConfig {
	if x != nil {
		return x.ThrottlingConfig
	}
	return nil
}

func (x *TClientConfig) GetTracingConfig() *TClientTracingConfig {
	if x != nil {
		return x.TracingConfig
	}
	return nil
}

func (x *TClientConfig) GetUnixSocketPath() string {
	if x != nil && x.UnixSocketPath != nil {
		return *x.UnixSocketPath
	}
	return ""
}

func (x *TClientConfig) GetGrpcThreadsLimit() uint32 {
	if x != nil && x.GrpcThreadsLimit != nil {
		return *x.GrpcThreadsLimit
	}
	return 0
}

func (x *TClientConfig) GetInsecurePort() uint32 {
	if x != nil && x.InsecurePort != nil {
		return *x.InsecurePort
	}
	return 0
}

func (x *TClientConfig) GetInstanceId() string {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return ""
}

func (x *TClientConfig) GetMaxRequestSize() uint32 {
	if x != nil && x.MaxRequestSize != nil {
		return *x.MaxRequestSize
	}
	return 0
}

func (x *TClientConfig) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *TClientConfig) GetIpcType() protos.EClientIpcType {
	if x != nil && x.IpcType != nil {
		return *x.IpcType
	}
	return protos.EClientIpcType(0)
}

func (x *TClientConfig) GetNbdThreadsCount() uint32 {
	if x != nil && x.NbdThreadsCount != nil {
		return *x.NbdThreadsCount
	}
	return 0
}

func (x *TClientConfig) GetNbdSocketSuffix() string {
	if x != nil && x.NbdSocketSuffix != nil {
		return *x.NbdSocketSuffix
	}
	return ""
}

func (x *TClientConfig) GetNbdStructuredReply() bool {
	if x != nil && x.NbdStructuredReply != nil {
		return *x.NbdStructuredReply
	}
	return false
}

func (x *TClientConfig) GetNbdUseNbsErrors() bool {
	if x != nil && x.NbdUseNbsErrors != nil {
		return *x.NbdUseNbsErrors
	}
	return false
}

func (x *TClientConfig) GetRemountDeadline() uint32 {
	if x != nil && x.RemountDeadline != nil {
		return *x.RemountDeadline
	}
	return 0
}

func (x *TClientConfig) GetConnectionErrorMaxRetryTimeout() uint32 {
	if x != nil && x.ConnectionErrorMaxRetryTimeout != nil {
		return *x.ConnectionErrorMaxRetryTimeout
	}
	return 0
}

func (x *TClientConfig) GetGrpcReconnectBackoff() uint32 {
	if x != nil && x.GrpcReconnectBackoff != nil {
		return *x.GrpcReconnectBackoff
	}
	return 0
}

func (x *TClientConfig) GetNvmeDeviceTransportId() string {
	if x != nil && x.NvmeDeviceTransportId != nil {
		return *x.NvmeDeviceTransportId
	}
	return ""
}

func (x *TClientConfig) GetNvmeDeviceNqn() string {
	if x != nil && x.NvmeDeviceNqn != nil {
		return *x.NvmeDeviceNqn
	}
	return ""
}

func (x *TClientConfig) GetScsiDeviceUrl() string {
	if x != nil && x.ScsiDeviceUrl != nil {
		return *x.ScsiDeviceUrl
	}
	return ""
}

func (x *TClientConfig) GetScsiInitiatorIqn() string {
	if x != nil && x.ScsiInitiatorIqn != nil {
		return *x.ScsiInitiatorIqn
	}
	return ""
}

func (x *TClientConfig) GetRdmaDeviceAddress() string {
	if x != nil && x.RdmaDeviceAddress != nil {
		return *x.RdmaDeviceAddress
	}
	return ""
}

func (x *TClientConfig) GetRdmaDevicePort() uint32 {
	if x != nil && x.RdmaDevicePort != nil {
		return *x.RdmaDevicePort
	}
	return 0
}

func (x *TClientConfig) GetLocalNonreplDisableDurableClient() bool {
	if x != nil && x.LocalNonreplDisableDurableClient != nil {
		return *x.LocalNonreplDisableDurableClient
	}
	return false
}

func (x *TClientConfig) GetRequestThresholds() []*protos1.TLWTraceThreshold {
	if x != nil {
		return x.RequestThresholds
	}
	return nil
}

func (x *TClientConfig) GetSkipCertVerification() bool {
	if x != nil && x.SkipCertVerification != nil {
		return *x.SkipCertVerification
	}
	return false
}

func (x *TClientConfig) GetRequestTimeoutIncrementOnRetry() uint32 {
	if x != nil && x.RequestTimeoutIncrementOnRetry != nil {
		return *x.RequestTimeoutIncrementOnRetry
	}
	return 0
}

func (x *TClientConfig) GetRequestTimeoutMax() uint32 {
	if x != nil && x.RequestTimeoutMax != nil {
		return *x.RequestTimeoutMax
	}
	return 0
}

type TLogConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SysLog service
	SysLogService *string `protobuf:"bytes,1,opt,name=SysLogService" json:"SysLogService,omitempty"`
	// Log level
	LogLevel *uint32 `protobuf:"varint,2,opt,name=LogLevel" json:"LogLevel,omitempty"`
	// GRPC tracing at trace level
	EnableGrpcTracing *bool `protobuf:"varint,3,opt,name=EnableGrpcTracing" json:"EnableGrpcTracing,omitempty"`
}

func (x *TLogConfig) Reset() {
	*x = TLogConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_client_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLogConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLogConfig) ProtoMessage() {}

func (x *TLogConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_client_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLogConfig.ProtoReflect.Descriptor instead.
func (*TLogConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_client_proto_rawDescGZIP(), []int{4}
}

func (x *TLogConfig) GetSysLogService() string {
	if x != nil && x.SysLogService != nil {
		return *x.SysLogService
	}
	return ""
}

func (x *TLogConfig) GetLogLevel() uint32 {
	if x != nil && x.LogLevel != nil {
		return *x.LogLevel
	}
	return 0
}

func (x *TLogConfig) GetEnableGrpcTracing() bool {
	if x != nil && x.EnableGrpcTracing != nil {
		return *x.EnableGrpcTracing
	}
	return false
}

type TMonitoringConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HTTP port to listen on.
	Port *uint32 `protobuf:"varint,1,opt,name=Port" json:"Port,omitempty"`
	// HTTP server threads.
	ThreadsCount *uint32 `protobuf:"varint,2,opt,name=ThreadsCount" json:"ThreadsCount,omitempty"`
	// HTTP address to bind.
	Address *string `protobuf:"bytes,3,opt,name=Address" json:"Address,omitempty"`
}

func (x *TMonitoringConfig) Reset() {
	*x = TMonitoringConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_client_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMonitoringConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMonitoringConfig) ProtoMessage() {}

func (x *TMonitoringConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_client_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMonitoringConfig.ProtoReflect.Descriptor instead.
func (*TMonitoringConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_client_proto_rawDescGZIP(), []int{5}
}

func (x *TMonitoringConfig) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *TMonitoringConfig) GetThreadsCount() uint32 {
	if x != nil && x.ThreadsCount != nil {
		return *x.ThreadsCount
	}
	return 0
}

func (x *TMonitoringConfig) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

type TAuthConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IamTokenFile *string `protobuf:"bytes,1,opt,name=IamTokenFile" json:"IamTokenFile,omitempty"`
}

func (x *TAuthConfig) Reset() {
	*x = TAuthConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_client_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAuthConfig) ProtoMessage() {}

func (x *TAuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_client_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAuthConfig.ProtoReflect.Descriptor instead.
func (*TAuthConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_client_proto_rawDescGZIP(), []int{6}
}

func (x *TAuthConfig) GetIamTokenFile() string {
	if x != nil && x.IamTokenFile != nil {
		return *x.IamTokenFile
	}
	return ""
}

type TClientAppConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientConfig     *TClientConfig     `protobuf:"bytes,1,opt,name=ClientConfig" json:"ClientConfig,omitempty"`
	LogConfig        *TLogConfig        `protobuf:"bytes,2,opt,name=LogConfig" json:"LogConfig,omitempty"`
	MonitoringConfig *TMonitoringConfig `protobuf:"bytes,3,opt,name=MonitoringConfig" json:"MonitoringConfig,omitempty"`
	AuthConfig       *TAuthConfig       `protobuf:"bytes,4,opt,name=AuthConfig" json:"AuthConfig,omitempty"`
}

func (x *TClientAppConfig) Reset() {
	*x = TClientAppConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_client_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TClientAppConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TClientAppConfig) ProtoMessage() {}

func (x *TClientAppConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_client_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TClientAppConfig.ProtoReflect.Descriptor instead.
func (*TClientAppConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_client_proto_rawDescGZIP(), []int{7}
}

func (x *TClientAppConfig) GetClientConfig() *TClientConfig {
	if x != nil {
		return x.ClientConfig
	}
	return nil
}

func (x *TClientAppConfig) GetLogConfig() *TLogConfig {
	if x != nil {
		return x.LogConfig
	}
	return nil
}

func (x *TClientAppConfig) GetMonitoringConfig() *TMonitoringConfig {
	if x != nil {
		return x.MonitoringConfig
	}
	return nil
}

func (x *TClientAppConfig) GetAuthConfig() *TAuthConfig {
	if x != nil {
		return x.AuthConfig
	}
	return nil
}

var File_cloud_blockstore_config_client_proto protoreflect.FileDescriptor

var file_cloud_blockstore_config_client_proto_rawDesc = []byte{
	0x0a, 0x24, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x25, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x03, 0x0a, 0x20, 0x54, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x54, 0x68, 0x72,
	0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a,
	0x17, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x65,
	0x72, 0x43, 0x70, 0x75, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x65, 0x72,
	0x43, 0x70, 0x75, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x49,
	0x6f, 0x70, 0x73, 0x50, 0x65, 0x72, 0x43, 0x70, 0x75, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x50, 0x65, 0x72,
	0x43, 0x70, 0x75, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x65, 0x72, 0x43, 0x70, 0x75, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x65, 0x72, 0x43, 0x70, 0x75, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73,
	0x50, 0x65, 0x72, 0x43, 0x70, 0x75, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x50, 0x65, 0x72, 0x43, 0x70,
	0x75, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49,
	0x6f, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x48, 0x6f, 0x73, 0x74, 0x4f, 0x76, 0x65,
	0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x48, 0x6f, 0x73, 0x74, 0x4f, 0x76, 0x65,
	0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x22, 0x8b, 0x0a, 0x0a, 0x17, 0x54, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72,
	0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a,
	0x13, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x65, 0x72, 0x43, 0x70, 0x75,
	0x55, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x65, 0x72, 0x43, 0x70, 0x75, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x49, 0x6f, 0x70, 0x73, 0x50, 0x65, 0x72, 0x43, 0x70, 0x75, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x49, 0x6f, 0x70, 0x73, 0x50, 0x65, 0x72,
	0x43, 0x70, 0x75, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x72, 0x73, 0x74,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x42,
	0x75, 0x72, 0x73, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x42,
	0x75, 0x72, 0x73, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x42, 0x75, 0x72, 0x73, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x4e, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x4e, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12,
	0x6d, 0x0a, 0x13, 0x48, 0x44, 0x44, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x48, 0x44, 0x44, 0x54, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6d,
	0x0a, 0x13, 0x53, 0x53, 0x44, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x53, 0x53, 0x44, 0x54, 0x68, 0x72,
	0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x75, 0x0a,
	0x17, 0x4e, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6c, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x54, 0x68, 0x72, 0x6f, 0x74,
	0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x17, 0x4e, 0x6f, 0x6e,
	0x72, 0x65, 0x70, 0x6c, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x75, 0x0a, 0x17, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x54,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69,
	0x6e, 0x64, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x17, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x54, 0x68, 0x72, 0x6f, 0x74,
	0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x75, 0x0a, 0x17, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x33, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x17, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x33, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x49, 0x6f, 0x70, 0x73, 0x50, 0x65, 0x72,
	0x48, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x49,
	0x6f, 0x70, 0x73, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x61,
	0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x73,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x4d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x19,
	0x49, 0x6e, 0x66, 0x72, 0x61, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x1b, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x70, 0x75, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42,
	0x0a, 0x1c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4d, 0x62, 0x69, 0x74, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x62, 0x69, 0x74, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70,
	0x75, 0x74, 0x12, 0x7b, 0x0a, 0x1a, 0x48, 0x64, 0x64, 0x4e, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6c,
	0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b,
	0x69, 0x6e, 0x64, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x1a, 0x48, 0x64, 0x64, 0x4e, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6c, 0x54,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xec, 0x01, 0x0a, 0x14, 0x54, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x17,
	0x53, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x53,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x53, 0x79,
	0x73, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xd7,
	0x0e, 0x0a, 0x0d, 0x54, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61,
	0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x73, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x6f, 0x6f, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x65, 0x72, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x65, 0x72, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x65, 0x72, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x43, 0x65, 0x72, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x5e, 0x0a, 0x10, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x10, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x55, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x6e, 0x69,
	0x78, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x72, 0x70, 0x63, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x47, 0x72, 0x70,
	0x63, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x07, 0x49, 0x70, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x49, 0x70, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x62,
	0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x4e, 0x62, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x62, 0x64, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4e,
	0x62, 0x64, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x2e,
	0x0a, 0x12, 0x4e, 0x62, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x4e, 0x62, 0x64, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28,
	0x0a, 0x0f, 0x4e, 0x62, 0x64, 0x55, 0x73, 0x65, 0x4e, 0x62, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x4e, 0x62, 0x64, 0x55, 0x73, 0x65, 0x4e,
	0x62, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x47, 0x72,
	0x70, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x6f,
	0x66, 0x66, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x34,
	0x0a, 0x15, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x4e,
	0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x71, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4e, 0x76, 0x6d,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x71, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x63,
	0x73, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x53, 0x63, 0x73, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x2a, 0x0a, 0x10, 0x53, 0x63, 0x73, 0x69, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x71, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x63, 0x73, 0x69,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x71, 0x6e, 0x12, 0x2c, 0x0a, 0x11,
	0x52, 0x64, 0x6d, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x64, 0x6d, 0x61, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x64,
	0x6d, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x52, 0x64, 0x6d, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x4a, 0x0a, 0x20, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x6e, 0x72, 0x65,
	0x70, 0x6c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4e,
	0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x57, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x11, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x32,
	0x0a, 0x14, 0x53, 0x6b, 0x69, 0x70, 0x43, 0x65, 0x72, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x53, 0x6b,
	0x69, 0x70, 0x43, 0x65, 0x72, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x61, 0x78, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x61, 0x78, 0x22, 0x7c, 0x0a, 0x0a, 0x54, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x4c, 0x6f, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53,
	0x79, 0x73, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x47, 0x72, 0x70, 0x63, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x70, 0x63, 0x54,
	0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x22, 0x65, 0x0a, 0x11, 0x54, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x31, 0x0a,
	0x0b, 0x54, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65,
	0x22, 0xc7, 0x02, 0x0a, 0x10, 0x54, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x10, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x10, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x46, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a,
	0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6e, 0x62, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67,
}

var (
	file_cloud_blockstore_config_client_proto_rawDescOnce sync.Once
	file_cloud_blockstore_config_client_proto_rawDescData = file_cloud_blockstore_config_client_proto_rawDesc
)

func file_cloud_blockstore_config_client_proto_rawDescGZIP() []byte {
	file_cloud_blockstore_config_client_proto_rawDescOnce.Do(func() {
		file_cloud_blockstore_config_client_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_blockstore_config_client_proto_rawDescData)
	})
	return file_cloud_blockstore_config_client_proto_rawDescData
}

var file_cloud_blockstore_config_client_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_cloud_blockstore_config_client_proto_goTypes = []interface{}{
	(*TClientMediaKindThrottlingConfig)(nil), // 0: NCloud.NBlockStore.NProto.TClientMediaKindThrottlingConfig
	(*TClientThrottlingConfig)(nil),          // 1: NCloud.NBlockStore.NProto.TClientThrottlingConfig
	(*TClientTracingConfig)(nil),             // 2: NCloud.NBlockStore.NProto.TClientTracingConfig
	(*TClientConfig)(nil),                    // 3: NCloud.NBlockStore.NProto.TClientConfig
	(*TLogConfig)(nil),                       // 4: NCloud.NBlockStore.NProto.TLogConfig
	(*TMonitoringConfig)(nil),                // 5: NCloud.NBlockStore.NProto.TMonitoringConfig
	(*TAuthConfig)(nil),                      // 6: NCloud.NBlockStore.NProto.TAuthConfig
	(*TClientAppConfig)(nil),                 // 7: NCloud.NBlockStore.NProto.TClientAppConfig
	(protos.EClientIpcType)(0),               // 8: NCloud.NBlockStore.NProto.EClientIpcType
	(*protos1.TLWTraceThreshold)(nil),        // 9: NCloud.NProto.TLWTraceThreshold
}
var file_cloud_blockstore_config_client_proto_depIdxs = []int32{
	0,  // 0: NCloud.NBlockStore.NProto.TClientThrottlingConfig.HDDThrottlingConfig:type_name -> NCloud.NBlockStore.NProto.TClientMediaKindThrottlingConfig
	0,  // 1: NCloud.NBlockStore.NProto.TClientThrottlingConfig.SSDThrottlingConfig:type_name -> NCloud.NBlockStore.NProto.TClientMediaKindThrottlingConfig
	0,  // 2: NCloud.NBlockStore.NProto.TClientThrottlingConfig.NonreplThrottlingConfig:type_name -> NCloud.NBlockStore.NProto.TClientMediaKindThrottlingConfig
	0,  // 3: NCloud.NBlockStore.NProto.TClientThrottlingConfig.Mirror2ThrottlingConfig:type_name -> NCloud.NBlockStore.NProto.TClientMediaKindThrottlingConfig
	0,  // 4: NCloud.NBlockStore.NProto.TClientThrottlingConfig.Mirror3ThrottlingConfig:type_name -> NCloud.NBlockStore.NProto.TClientMediaKindThrottlingConfig
	0,  // 5: NCloud.NBlockStore.NProto.TClientThrottlingConfig.HddNonreplThrottlingConfig:type_name -> NCloud.NBlockStore.NProto.TClientMediaKindThrottlingConfig
	1,  // 6: NCloud.NBlockStore.NProto.TClientConfig.ThrottlingConfig:type_name -> NCloud.NBlockStore.NProto.TClientThrottlingConfig
	2,  // 7: NCloud.NBlockStore.NProto.TClientConfig.TracingConfig:type_name -> NCloud.NBlockStore.NProto.TClientTracingConfig
	8,  // 8: NCloud.NBlockStore.NProto.TClientConfig.IpcType:type_name -> NCloud.NBlockStore.NProto.EClientIpcType
	9,  // 9: NCloud.NBlockStore.NProto.TClientConfig.RequestThresholds:type_name -> NCloud.NProto.TLWTraceThreshold
	3,  // 10: NCloud.NBlockStore.NProto.TClientAppConfig.ClientConfig:type_name -> NCloud.NBlockStore.NProto.TClientConfig
	4,  // 11: NCloud.NBlockStore.NProto.TClientAppConfig.LogConfig:type_name -> NCloud.NBlockStore.NProto.TLogConfig
	5,  // 12: NCloud.NBlockStore.NProto.TClientAppConfig.MonitoringConfig:type_name -> NCloud.NBlockStore.NProto.TMonitoringConfig
	6,  // 13: NCloud.NBlockStore.NProto.TClientAppConfig.AuthConfig:type_name -> NCloud.NBlockStore.NProto.TAuthConfig
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_cloud_blockstore_config_client_proto_init() }
func file_cloud_blockstore_config_client_proto_init() {
	if File_cloud_blockstore_config_client_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_blockstore_config_client_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TClientMediaKindThrottlingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_client_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TClientThrottlingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_client_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TClientTracingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_client_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_client_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLogConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_client_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TMonitoringConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_client_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAuthConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_client_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TClientAppConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_blockstore_config_client_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_blockstore_config_client_proto_goTypes,
		DependencyIndexes: file_cloud_blockstore_config_client_proto_depIdxs,
		MessageInfos:      file_cloud_blockstore_config_client_proto_msgTypes,
	}.Build()
	File_cloud_blockstore_config_client_proto = out.File
	file_cloud_blockstore_config_client_proto_rawDesc = nil
	file_cloud_blockstore_config_client_proto_goTypes = nil
	file_cloud_blockstore_config_client_proto_depIdxs = nil
}
