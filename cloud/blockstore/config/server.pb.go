// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/blockstore/config/server.proto

package config

import (
	protos "github.com/ydb-platform/nbs/cloud/storage/core/protos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TAffinity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CPU []uint32 `protobuf:"varint,1,rep,packed,name=CPU,proto3" json:"CPU,omitempty"`
}

func (x *TAffinity) Reset() {
	*x = TAffinity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAffinity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAffinity) ProtoMessage() {}

func (x *TAffinity) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAffinity.ProtoReflect.Descriptor instead.
func (*TAffinity) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_server_proto_rawDescGZIP(), []int{0}
}

func (x *TAffinity) GetCPU() []uint32 {
	if x != nil {
		return x.CPU
	}
	return nil
}

type TLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCenter *string `protobuf:"bytes,1,opt,name=DataCenter,proto3,oneof" json:"DataCenter,omitempty"`
	Rack       *string `protobuf:"bytes,2,opt,name=Rack,proto3,oneof" json:"Rack,omitempty"`
	Body       *uint64 `protobuf:"varint,3,opt,name=Body,proto3,oneof" json:"Body,omitempty"`
}

func (x *TLocation) Reset() {
	*x = TLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLocation) ProtoMessage() {}

func (x *TLocation) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLocation.ProtoReflect.Descriptor instead.
func (*TLocation) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_server_proto_rawDescGZIP(), []int{1}
}

func (x *TLocation) GetDataCenter() string {
	if x != nil && x.DataCenter != nil {
		return *x.DataCenter
	}
	return ""
}

func (x *TLocation) GetRack() string {
	if x != nil && x.Rack != nil {
		return *x.Rack
	}
	return ""
}

func (x *TLocation) GetBody() uint64 {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return 0
}

type TServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host name or address to listen on.
	Host *string `protobuf:"bytes,1,opt,name=Host,proto3,oneof" json:"Host,omitempty"`
	// Port to listen on.
	Port *uint32 `protobuf:"varint,2,opt,name=Port,proto3,oneof" json:"Port,omitempty"`
	// Host name or address to listen on (for data service requests).
	DataHost *string `protobuf:"bytes,3,opt,name=DataHost,proto3,oneof" json:"DataHost,omitempty"`
	// Port to listen on (for data service requests).
	DataPort *uint32 `protobuf:"varint,4,opt,name=DataPort,proto3,oneof" json:"DataPort,omitempty"`
	// Number of gRPC threads.
	ThreadsCount *uint32 `protobuf:"varint,5,opt,name=ThreadsCount,proto3,oneof" json:"ThreadsCount,omitempty"`
	// Maximum size of gRPC message.
	MaxMessageSize *uint32 `protobuf:"varint,6,opt,name=MaxMessageSize,proto3,oneof" json:"MaxMessageSize,omitempty"`
	// Number of prepared gRPC requests.
	PreparedRequestsCount *uint32 `protobuf:"varint,7,opt,name=PreparedRequestsCount,proto3,oneof" json:"PreparedRequestsCount,omitempty"`
	// Memory quota for gRPC request processing.
	MemoryQuotaBytes *uint32 `protobuf:"varint,8,opt,name=MemoryQuotaBytes,proto3,oneof" json:"MemoryQuotaBytes,omitempty"`
	// Host name or address to listen on (with TLS enabled).
	SecureHost *string `protobuf:"bytes,50,opt,name=SecureHost,proto3,oneof" json:"SecureHost,omitempty"`
	// Port to listen on (with TLS enabled).
	SecurePort *uint32 `protobuf:"varint,9,opt,name=SecurePort,proto3,oneof" json:"SecurePort,omitempty"`
	// TLS details.
	RootCertsFile *string `protobuf:"bytes,10,opt,name=RootCertsFile,proto3,oneof" json:"RootCertsFile,omitempty"`
	// The following 2 are deprecated in favor of Certs.
	CertFile           *string                `protobuf:"bytes,11,opt,name=CertFile,proto3,oneof" json:"CertFile,omitempty"`
	CertPrivateKeyFile *string                `protobuf:"bytes,12,opt,name=CertPrivateKeyFile,proto3,oneof" json:"CertPrivateKeyFile,omitempty"`
	Certs              []*protos.TCertificate `protobuf:"bytes,27,rep,name=Certs,proto3" json:"Certs,omitempty"`
	// TCP KeepAlive details.
	KeepAliveEnabled      *bool   `protobuf:"varint,13,opt,name=KeepAliveEnabled,proto3,oneof" json:"KeepAliveEnabled,omitempty"`
	KeepAliveIdleTimeout  *uint32 `protobuf:"varint,14,opt,name=KeepAliveIdleTimeout,proto3,oneof" json:"KeepAliveIdleTimeout,omitempty"`   // (in milliseconds).
	KeepAliveProbeTimeout *uint32 `protobuf:"varint,15,opt,name=KeepAliveProbeTimeout,proto3,oneof" json:"KeepAliveProbeTimeout,omitempty"` // (in milliseconds).
	KeepAliveProbesCount  *uint32 `protobuf:"varint,16,opt,name=KeepAliveProbesCount,proto3,oneof" json:"KeepAliveProbesCount,omitempty"`
	// Run additional checks for interactions between client and server .
	StrictContractValidation *bool `protobuf:"varint,17,opt,name=StrictContractValidation,proto3,oneof" json:"StrictContractValidation,omitempty"`
	// Load configs from cms.
	//
	// Deprecated: Marked as deprecated in cloud/blockstore/config/server.proto.
	LoadCmsConfigs *bool `protobuf:"varint,18,opt,name=LoadCmsConfigs,proto3,oneof" json:"LoadCmsConfigs,omitempty"`
	// Shutdown timeout (in milliseconds).
	ShutdownTimeout *uint32 `protobuf:"varint,19,opt,name=ShutdownTimeout,proto3,oneof" json:"ShutdownTimeout,omitempty"`
	// Request timeout (in milliseconds).
	RequestTimeout *uint32 `protobuf:"varint,20,opt,name=RequestTimeout,proto3,oneof" json:"RequestTimeout,omitempty"`
	// Unix-socket details.
	UnixSocketPath    *string `protobuf:"bytes,21,opt,name=UnixSocketPath,proto3,oneof" json:"UnixSocketPath,omitempty"`
	UnixSocketBacklog *uint32 `protobuf:"varint,22,opt,name=UnixSocketBacklog,proto3,oneof" json:"UnixSocketBacklog,omitempty"`
	// Limit of grpc threads count.
	GrpcThreadsLimit *uint32 `protobuf:"varint,23,opt,name=GrpcThreadsLimit,proto3,oneof" json:"GrpcThreadsLimit,omitempty"`
	// Vhost server details.
	VhostEnabled      *bool      `protobuf:"varint,24,opt,name=VhostEnabled,proto3,oneof" json:"VhostEnabled,omitempty"`
	VhostThreadsCount *uint32    `protobuf:"varint,25,opt,name=VhostThreadsCount,proto3,oneof" json:"VhostThreadsCount,omitempty"`
	VhostAffinity     *TAffinity `protobuf:"bytes,37,opt,name=VhostAffinity,proto3,oneof" json:"VhostAffinity,omitempty"`
	// NVMEoF initiator enabled.
	NvmfInitiatorEnabled *bool `protobuf:"varint,31,opt,name=NvmfInitiatorEnabled,proto3,oneof" json:"NvmfInitiatorEnabled,omitempty"`
	// Node type
	NodeType *string `protobuf:"bytes,32,opt,name=NodeType,proto3,oneof" json:"NodeType,omitempty"`
	// Endpoint storage details.
	EndpointStorageType  *protos.EEndpointStorageType `protobuf:"varint,106,opt,name=EndpointStorageType,proto3,enum=NCloud.NProto.EEndpointStorageType,oneof" json:"EndpointStorageType,omitempty"`
	RootKeyringName      *string                      `protobuf:"bytes,33,opt,name=RootKeyringName,proto3,oneof" json:"RootKeyringName,omitempty"`
	EndpointsKeyringName *string                      `protobuf:"bytes,42,opt,name=EndpointsKeyringName,proto3,oneof" json:"EndpointsKeyringName,omitempty"`
	EndpointStorageDir   *string                      `protobuf:"bytes,107,opt,name=EndpointStorageDir,proto3,oneof" json:"EndpointStorageDir,omitempty"`
	// Nbd server details.
	NbdEnabled                *bool      `protobuf:"varint,34,opt,name=NbdEnabled,proto3,oneof" json:"NbdEnabled,omitempty"`
	NbdThreadsCount           *uint32    `protobuf:"varint,35,opt,name=NbdThreadsCount,proto3,oneof" json:"NbdThreadsCount,omitempty"`
	NbdLimiterEnabled         *bool      `protobuf:"varint,61,opt,name=NbdLimiterEnabled,proto3,oneof" json:"NbdLimiterEnabled,omitempty"`
	MaxInFlightBytesPerThread *uint64    `protobuf:"varint,36,opt,name=MaxInFlightBytesPerThread,proto3,oneof" json:"MaxInFlightBytesPerThread,omitempty"`
	NbdAffinity               *TAffinity `protobuf:"bytes,38,opt,name=NbdAffinity,proto3,oneof" json:"NbdAffinity,omitempty"`
	// Dynamic node registration params.
	NodeRegistrationMaxAttempts  *uint32 `protobuf:"varint,39,opt,name=NodeRegistrationMaxAttempts,proto3,oneof" json:"NodeRegistrationMaxAttempts,omitempty"`
	NodeRegistrationTimeout      *uint32 `protobuf:"varint,40,opt,name=NodeRegistrationTimeout,proto3,oneof" json:"NodeRegistrationTimeout,omitempty"`           // in ms
	NodeRegistrationErrorTimeout *uint32 `protobuf:"varint,41,opt,name=NodeRegistrationErrorTimeout,proto3,oneof" json:"NodeRegistrationErrorTimeout,omitempty"` // in ms
	// Suffix for nbd-socket
	NbdSocketSuffix *string `protobuf:"bytes,43,opt,name=NbdSocketSuffix,proto3,oneof" json:"NbdSocketSuffix,omitempty"`
	// GRPC KeepAlive
	GrpcKeepAliveTime                       *uint32 `protobuf:"varint,44,opt,name=GrpcKeepAliveTime,proto3,oneof" json:"GrpcKeepAliveTime,omitempty"`       // ms
	GrpcKeepAliveTimeout                    *uint32 `protobuf:"varint,45,opt,name=GrpcKeepAliveTimeout,proto3,oneof" json:"GrpcKeepAliveTimeout,omitempty"` // ms
	GrpcKeepAlivePermitWithoutCalls         *bool   `protobuf:"varint,46,opt,name=GrpcKeepAlivePermitWithoutCalls,proto3,oneof" json:"GrpcKeepAlivePermitWithoutCalls,omitempty"`
	GrpcHttp2MinRecvPingIntervalWithoutData *uint32 `protobuf:"varint,47,opt,name=GrpcHttp2MinRecvPingIntervalWithoutData,proto3,oneof" json:"GrpcHttp2MinRecvPingIntervalWithoutData,omitempty"` // ms
	GrpcHttp2MinSentPingIntervalWithoutData *uint32 `protobuf:"varint,48,opt,name=GrpcHttp2MinSentPingIntervalWithoutData,proto3,oneof" json:"GrpcHttp2MinSentPingIntervalWithoutData,omitempty"` // ms
	// NVMe endpoint details.
	NVMeEndpointEnabled      *bool    `protobuf:"varint,54,opt,name=NVMeEndpointEnabled,proto3,oneof" json:"NVMeEndpointEnabled,omitempty"`
	NVMeEndpointNqn          *string  `protobuf:"bytes,55,opt,name=NVMeEndpointNqn,proto3,oneof" json:"NVMeEndpointNqn,omitempty"`
	NVMeEndpointTransportIDs []string `protobuf:"bytes,56,rep,name=NVMeEndpointTransportIDs,proto3" json:"NVMeEndpointTransportIDs,omitempty"`
	// SCSI endpoint details.
	SCSIEndpointEnabled       *bool   `protobuf:"varint,57,opt,name=SCSIEndpointEnabled,proto3,oneof" json:"SCSIEndpointEnabled,omitempty"`
	SCSIEndpointName          *string `protobuf:"bytes,58,opt,name=SCSIEndpointName,proto3,oneof" json:"SCSIEndpointName,omitempty"`
	SCSIEndpointListenAddress *string `protobuf:"bytes,59,opt,name=SCSIEndpointListenAddress,proto3,oneof" json:"SCSIEndpointListenAddress,omitempty"`
	SCSIEndpointListenPort    *uint32 `protobuf:"varint,60,opt,name=SCSIEndpointListenPort,proto3,oneof" json:"SCSIEndpointListenPort,omitempty"`
	// RDMA endpoint details.
	RdmaEndpointEnabled       *bool   `protobuf:"varint,62,opt,name=RdmaEndpointEnabled,proto3,oneof" json:"RdmaEndpointEnabled,omitempty"`
	RdmaEndpointListenAddress *string `protobuf:"bytes,63,opt,name=RdmaEndpointListenAddress,proto3,oneof" json:"RdmaEndpointListenAddress,omitempty"`
	RdmaEndpointListenPort    *uint32 `protobuf:"varint,64,opt,name=RdmaEndpointListenPort,proto3,oneof" json:"RdmaEndpointListenPort,omitempty"`
	// RDMA client details.
	RdmaClientEnabled *bool        `protobuf:"varint,65,opt,name=RdmaClientEnabled,proto3,oneof" json:"RdmaClientEnabled,omitempty"`
	RdmaClientConfig  *TRdmaClient `protobuf:"bytes,66,opt,name=RdmaClientConfig,proto3,oneof" json:"RdmaClientConfig,omitempty"`
	// Throttling service details.
	ThrottlingEnabled *bool `protobuf:"varint,100,opt,name=ThrottlingEnabled,proto3,oneof" json:"ThrottlingEnabled,omitempty"`
	// Bytes per second.
	MaxReadBandwidth  *uint32 `protobuf:"varint,101,opt,name=MaxReadBandwidth,proto3,oneof" json:"MaxReadBandwidth,omitempty"`
	MaxWriteBandwidth *uint32 `protobuf:"varint,102,opt,name=MaxWriteBandwidth,proto3,oneof" json:"MaxWriteBandwidth,omitempty"`
	// Iops.
	MaxReadIops  *uint32 `protobuf:"varint,103,opt,name=MaxReadIops,proto3,oneof" json:"MaxReadIops,omitempty"`
	MaxWriteIops *uint32 `protobuf:"varint,104,opt,name=MaxWriteIops,proto3,oneof" json:"MaxWriteIops,omitempty"`
	// Max burst length in milliseconds.
	MaxBurstTime *uint32 `protobuf:"varint,105,opt,name=MaxBurstTime,proto3,oneof" json:"MaxBurstTime,omitempty"`
	// Path to vhost server executable.
	VhostServerPath *string `protobuf:"bytes,108,opt,name=VhostServerPath,proto3,oneof" json:"VhostServerPath,omitempty"`
}

func (x *TServerConfig) Reset() {
	*x = TServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TServerConfig) ProtoMessage() {}

func (x *TServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TServerConfig.ProtoReflect.Descriptor instead.
func (*TServerConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_server_proto_rawDescGZIP(), []int{2}
}

func (x *TServerConfig) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *TServerConfig) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *TServerConfig) GetDataHost() string {
	if x != nil && x.DataHost != nil {
		return *x.DataHost
	}
	return ""
}

func (x *TServerConfig) GetDataPort() uint32 {
	if x != nil && x.DataPort != nil {
		return *x.DataPort
	}
	return 0
}

func (x *TServerConfig) GetThreadsCount() uint32 {
	if x != nil && x.ThreadsCount != nil {
		return *x.ThreadsCount
	}
	return 0
}

func (x *TServerConfig) GetMaxMessageSize() uint32 {
	if x != nil && x.MaxMessageSize != nil {
		return *x.MaxMessageSize
	}
	return 0
}

func (x *TServerConfig) GetPreparedRequestsCount() uint32 {
	if x != nil && x.PreparedRequestsCount != nil {
		return *x.PreparedRequestsCount
	}
	return 0
}

func (x *TServerConfig) GetMemoryQuotaBytes() uint32 {
	if x != nil && x.MemoryQuotaBytes != nil {
		return *x.MemoryQuotaBytes
	}
	return 0
}

func (x *TServerConfig) GetSecureHost() string {
	if x != nil && x.SecureHost != nil {
		return *x.SecureHost
	}
	return ""
}

func (x *TServerConfig) GetSecurePort() uint32 {
	if x != nil && x.SecurePort != nil {
		return *x.SecurePort
	}
	return 0
}

func (x *TServerConfig) GetRootCertsFile() string {
	if x != nil && x.RootCertsFile != nil {
		return *x.RootCertsFile
	}
	return ""
}

func (x *TServerConfig) GetCertFile() string {
	if x != nil && x.CertFile != nil {
		return *x.CertFile
	}
	return ""
}

func (x *TServerConfig) GetCertPrivateKeyFile() string {
	if x != nil && x.CertPrivateKeyFile != nil {
		return *x.CertPrivateKeyFile
	}
	return ""
}

func (x *TServerConfig) GetCerts() []*protos.TCertificate {
	if x != nil {
		return x.Certs
	}
	return nil
}

func (x *TServerConfig) GetKeepAliveEnabled() bool {
	if x != nil && x.KeepAliveEnabled != nil {
		return *x.KeepAliveEnabled
	}
	return false
}

func (x *TServerConfig) GetKeepAliveIdleTimeout() uint32 {
	if x != nil && x.KeepAliveIdleTimeout != nil {
		return *x.KeepAliveIdleTimeout
	}
	return 0
}

func (x *TServerConfig) GetKeepAliveProbeTimeout() uint32 {
	if x != nil && x.KeepAliveProbeTimeout != nil {
		return *x.KeepAliveProbeTimeout
	}
	return 0
}

func (x *TServerConfig) GetKeepAliveProbesCount() uint32 {
	if x != nil && x.KeepAliveProbesCount != nil {
		return *x.KeepAliveProbesCount
	}
	return 0
}

func (x *TServerConfig) GetStrictContractValidation() bool {
	if x != nil && x.StrictContractValidation != nil {
		return *x.StrictContractValidation
	}
	return false
}

// Deprecated: Marked as deprecated in cloud/blockstore/config/server.proto.
func (x *TServerConfig) GetLoadCmsConfigs() bool {
	if x != nil && x.LoadCmsConfigs != nil {
		return *x.LoadCmsConfigs
	}
	return false
}

func (x *TServerConfig) GetShutdownTimeout() uint32 {
	if x != nil && x.ShutdownTimeout != nil {
		return *x.ShutdownTimeout
	}
	return 0
}

func (x *TServerConfig) GetRequestTimeout() uint32 {
	if x != nil && x.RequestTimeout != nil {
		return *x.RequestTimeout
	}
	return 0
}

func (x *TServerConfig) GetUnixSocketPath() string {
	if x != nil && x.UnixSocketPath != nil {
		return *x.UnixSocketPath
	}
	return ""
}

func (x *TServerConfig) GetUnixSocketBacklog() uint32 {
	if x != nil && x.UnixSocketBacklog != nil {
		return *x.UnixSocketBacklog
	}
	return 0
}

func (x *TServerConfig) GetGrpcThreadsLimit() uint32 {
	if x != nil && x.GrpcThreadsLimit != nil {
		return *x.GrpcThreadsLimit
	}
	return 0
}

func (x *TServerConfig) GetVhostEnabled() bool {
	if x != nil && x.VhostEnabled != nil {
		return *x.VhostEnabled
	}
	return false
}

func (x *TServerConfig) GetVhostThreadsCount() uint32 {
	if x != nil && x.VhostThreadsCount != nil {
		return *x.VhostThreadsCount
	}
	return 0
}

func (x *TServerConfig) GetVhostAffinity() *TAffinity {
	if x != nil {
		return x.VhostAffinity
	}
	return nil
}

func (x *TServerConfig) GetNvmfInitiatorEnabled() bool {
	if x != nil && x.NvmfInitiatorEnabled != nil {
		return *x.NvmfInitiatorEnabled
	}
	return false
}

func (x *TServerConfig) GetNodeType() string {
	if x != nil && x.NodeType != nil {
		return *x.NodeType
	}
	return ""
}

func (x *TServerConfig) GetEndpointStorageType() protos.EEndpointStorageType {
	if x != nil && x.EndpointStorageType != nil {
		return *x.EndpointStorageType
	}
	return protos.EEndpointStorageType(0)
}

func (x *TServerConfig) GetRootKeyringName() string {
	if x != nil && x.RootKeyringName != nil {
		return *x.RootKeyringName
	}
	return ""
}

func (x *TServerConfig) GetEndpointsKeyringName() string {
	if x != nil && x.EndpointsKeyringName != nil {
		return *x.EndpointsKeyringName
	}
	return ""
}

func (x *TServerConfig) GetEndpointStorageDir() string {
	if x != nil && x.EndpointStorageDir != nil {
		return *x.EndpointStorageDir
	}
	return ""
}

func (x *TServerConfig) GetNbdEnabled() bool {
	if x != nil && x.NbdEnabled != nil {
		return *x.NbdEnabled
	}
	return false
}

func (x *TServerConfig) GetNbdThreadsCount() uint32 {
	if x != nil && x.NbdThreadsCount != nil {
		return *x.NbdThreadsCount
	}
	return 0
}

func (x *TServerConfig) GetNbdLimiterEnabled() bool {
	if x != nil && x.NbdLimiterEnabled != nil {
		return *x.NbdLimiterEnabled
	}
	return false
}

func (x *TServerConfig) GetMaxInFlightBytesPerThread() uint64 {
	if x != nil && x.MaxInFlightBytesPerThread != nil {
		return *x.MaxInFlightBytesPerThread
	}
	return 0
}

func (x *TServerConfig) GetNbdAffinity() *TAffinity {
	if x != nil {
		return x.NbdAffinity
	}
	return nil
}

func (x *TServerConfig) GetNodeRegistrationMaxAttempts() uint32 {
	if x != nil && x.NodeRegistrationMaxAttempts != nil {
		return *x.NodeRegistrationMaxAttempts
	}
	return 0
}

func (x *TServerConfig) GetNodeRegistrationTimeout() uint32 {
	if x != nil && x.NodeRegistrationTimeout != nil {
		return *x.NodeRegistrationTimeout
	}
	return 0
}

func (x *TServerConfig) GetNodeRegistrationErrorTimeout() uint32 {
	if x != nil && x.NodeRegistrationErrorTimeout != nil {
		return *x.NodeRegistrationErrorTimeout
	}
	return 0
}

func (x *TServerConfig) GetNbdSocketSuffix() string {
	if x != nil && x.NbdSocketSuffix != nil {
		return *x.NbdSocketSuffix
	}
	return ""
}

func (x *TServerConfig) GetGrpcKeepAliveTime() uint32 {
	if x != nil && x.GrpcKeepAliveTime != nil {
		return *x.GrpcKeepAliveTime
	}
	return 0
}

func (x *TServerConfig) GetGrpcKeepAliveTimeout() uint32 {
	if x != nil && x.GrpcKeepAliveTimeout != nil {
		return *x.GrpcKeepAliveTimeout
	}
	return 0
}

func (x *TServerConfig) GetGrpcKeepAlivePermitWithoutCalls() bool {
	if x != nil && x.GrpcKeepAlivePermitWithoutCalls != nil {
		return *x.GrpcKeepAlivePermitWithoutCalls
	}
	return false
}

func (x *TServerConfig) GetGrpcHttp2MinRecvPingIntervalWithoutData() uint32 {
	if x != nil && x.GrpcHttp2MinRecvPingIntervalWithoutData != nil {
		return *x.GrpcHttp2MinRecvPingIntervalWithoutData
	}
	return 0
}

func (x *TServerConfig) GetGrpcHttp2MinSentPingIntervalWithoutData() uint32 {
	if x != nil && x.GrpcHttp2MinSentPingIntervalWithoutData != nil {
		return *x.GrpcHttp2MinSentPingIntervalWithoutData
	}
	return 0
}

func (x *TServerConfig) GetNVMeEndpointEnabled() bool {
	if x != nil && x.NVMeEndpointEnabled != nil {
		return *x.NVMeEndpointEnabled
	}
	return false
}

func (x *TServerConfig) GetNVMeEndpointNqn() string {
	if x != nil && x.NVMeEndpointNqn != nil {
		return *x.NVMeEndpointNqn
	}
	return ""
}

func (x *TServerConfig) GetNVMeEndpointTransportIDs() []string {
	if x != nil {
		return x.NVMeEndpointTransportIDs
	}
	return nil
}

func (x *TServerConfig) GetSCSIEndpointEnabled() bool {
	if x != nil && x.SCSIEndpointEnabled != nil {
		return *x.SCSIEndpointEnabled
	}
	return false
}

func (x *TServerConfig) GetSCSIEndpointName() string {
	if x != nil && x.SCSIEndpointName != nil {
		return *x.SCSIEndpointName
	}
	return ""
}

func (x *TServerConfig) GetSCSIEndpointListenAddress() string {
	if x != nil && x.SCSIEndpointListenAddress != nil {
		return *x.SCSIEndpointListenAddress
	}
	return ""
}

func (x *TServerConfig) GetSCSIEndpointListenPort() uint32 {
	if x != nil && x.SCSIEndpointListenPort != nil {
		return *x.SCSIEndpointListenPort
	}
	return 0
}

func (x *TServerConfig) GetRdmaEndpointEnabled() bool {
	if x != nil && x.RdmaEndpointEnabled != nil {
		return *x.RdmaEndpointEnabled
	}
	return false
}

func (x *TServerConfig) GetRdmaEndpointListenAddress() string {
	if x != nil && x.RdmaEndpointListenAddress != nil {
		return *x.RdmaEndpointListenAddress
	}
	return ""
}

func (x *TServerConfig) GetRdmaEndpointListenPort() uint32 {
	if x != nil && x.RdmaEndpointListenPort != nil {
		return *x.RdmaEndpointListenPort
	}
	return 0
}

func (x *TServerConfig) GetRdmaClientEnabled() bool {
	if x != nil && x.RdmaClientEnabled != nil {
		return *x.RdmaClientEnabled
	}
	return false
}

func (x *TServerConfig) GetRdmaClientConfig() *TRdmaClient {
	if x != nil {
		return x.RdmaClientConfig
	}
	return nil
}

func (x *TServerConfig) GetThrottlingEnabled() bool {
	if x != nil && x.ThrottlingEnabled != nil {
		return *x.ThrottlingEnabled
	}
	return false
}

func (x *TServerConfig) GetMaxReadBandwidth() uint32 {
	if x != nil && x.MaxReadBandwidth != nil {
		return *x.MaxReadBandwidth
	}
	return 0
}

func (x *TServerConfig) GetMaxWriteBandwidth() uint32 {
	if x != nil && x.MaxWriteBandwidth != nil {
		return *x.MaxWriteBandwidth
	}
	return 0
}

func (x *TServerConfig) GetMaxReadIops() uint32 {
	if x != nil && x.MaxReadIops != nil {
		return *x.MaxReadIops
	}
	return 0
}

func (x *TServerConfig) GetMaxWriteIops() uint32 {
	if x != nil && x.MaxWriteIops != nil {
		return *x.MaxWriteIops
	}
	return 0
}

func (x *TServerConfig) GetMaxBurstTime() uint32 {
	if x != nil && x.MaxBurstTime != nil {
		return *x.MaxBurstTime
	}
	return 0
}

func (x *TServerConfig) GetVhostServerPath() string {
	if x != nil && x.VhostServerPath != nil {
		return *x.VhostServerPath
	}
	return ""
}

type TNullServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddReadResponseData *bool   `protobuf:"varint,1,opt,name=AddReadResponseData,proto3,oneof" json:"AddReadResponseData,omitempty"`
	DiskBlockSize       *uint32 `protobuf:"varint,2,opt,name=DiskBlockSize,proto3,oneof" json:"DiskBlockSize,omitempty"`
	DiskBlocksCount     *uint64 `protobuf:"varint,3,opt,name=DiskBlocksCount,proto3,oneof" json:"DiskBlocksCount,omitempty"`
	IopsLimit           *uint32 `protobuf:"varint,4,opt,name=IopsLimit,proto3,oneof" json:"IopsLimit,omitempty"`
}

func (x *TNullServiceConfig) Reset() {
	*x = TNullServiceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TNullServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TNullServiceConfig) ProtoMessage() {}

func (x *TNullServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TNullServiceConfig.ProtoReflect.Descriptor instead.
func (*TNullServiceConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_server_proto_rawDescGZIP(), []int{3}
}

func (x *TNullServiceConfig) GetAddReadResponseData() bool {
	if x != nil && x.AddReadResponseData != nil {
		return *x.AddReadResponseData
	}
	return false
}

func (x *TNullServiceConfig) GetDiskBlockSize() uint32 {
	if x != nil && x.DiskBlockSize != nil {
		return *x.DiskBlockSize
	}
	return 0
}

func (x *TNullServiceConfig) GetDiskBlocksCount() uint64 {
	if x != nil && x.DiskBlocksCount != nil {
		return *x.DiskBlocksCount
	}
	return 0
}

func (x *TNullServiceConfig) GetIopsLimit() uint32 {
	if x != nil && x.IopsLimit != nil {
		return *x.IopsLimit
	}
	return 0
}

type TLocalServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataDir *string `protobuf:"bytes,1,opt,name=DataDir,proto3,oneof" json:"DataDir,omitempty"`
}

func (x *TLocalServiceConfig) Reset() {
	*x = TLocalServiceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLocalServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLocalServiceConfig) ProtoMessage() {}

func (x *TLocalServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLocalServiceConfig.ProtoReflect.Descriptor instead.
func (*TLocalServiceConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_server_proto_rawDescGZIP(), []int{4}
}

func (x *TLocalServiceConfig) GetDataDir() string {
	if x != nil && x.DataDir != nil {
		return *x.DataDir
	}
	return ""
}

type TKikimrServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TKikimrServiceConfig) Reset() {
	*x = TKikimrServiceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TKikimrServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TKikimrServiceConfig) ProtoMessage() {}

func (x *TKikimrServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TKikimrServiceConfig.ProtoReflect.Descriptor instead.
func (*TKikimrServiceConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_server_proto_rawDescGZIP(), []int{5}
}

type TServerAppConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerConfig        *TServerConfig        `protobuf:"bytes,1,opt,name=ServerConfig,proto3,oneof" json:"ServerConfig,omitempty"`
	NullServiceConfig   *TNullServiceConfig   `protobuf:"bytes,4,opt,name=NullServiceConfig,proto3,oneof" json:"NullServiceConfig,omitempty"`
	LocalServiceConfig  *TLocalServiceConfig  `protobuf:"bytes,2,opt,name=LocalServiceConfig,proto3,oneof" json:"LocalServiceConfig,omitempty"`
	KikimrServiceConfig *TKikimrServiceConfig `protobuf:"bytes,3,opt,name=KikimrServiceConfig,proto3,oneof" json:"KikimrServiceConfig,omitempty"`
}

func (x *TServerAppConfig) Reset() {
	*x = TServerAppConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TServerAppConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TServerAppConfig) ProtoMessage() {}

func (x *TServerAppConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TServerAppConfig.ProtoReflect.Descriptor instead.
func (*TServerAppConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_server_proto_rawDescGZIP(), []int{6}
}

func (x *TServerAppConfig) GetServerConfig() *TServerConfig {
	if x != nil {
		return x.ServerConfig
	}
	return nil
}

func (x *TServerAppConfig) GetNullServiceConfig() *TNullServiceConfig {
	if x != nil {
		return x.NullServiceConfig
	}
	return nil
}

func (x *TServerAppConfig) GetLocalServiceConfig() *TLocalServiceConfig {
	if x != nil {
		return x.LocalServiceConfig
	}
	return nil
}

func (x *TServerAppConfig) GetKikimrServiceConfig() *TKikimrServiceConfig {
	if x != nil {
		return x.KikimrServiceConfig
	}
	return nil
}

var File_cloud_blockstore_config_server_proto protoreflect.FileDescriptor

var file_cloud_blockstore_config_server_proto_rawDesc = []byte{
	0x0a, 0x24, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x22, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x64, 0x6d, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x29, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1d, 0x0a,
	0x09, 0x54, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x50,
	0x55, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x43, 0x50, 0x55, 0x22, 0x83, 0x01, 0x0a,
	0x09, 0x54, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0a, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x52, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x04, 0x52, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x88, 0x01,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x52, 0x61, 0x63, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x42, 0x6f,
	0x64, 0x79, 0x22, 0xb6, 0x27, 0x0a, 0x0d, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x04, 0x50,
	0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x48, 0x6f,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x08, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04,
	0x52, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x0e, 0x4d, 0x61, 0x78,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x15, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52,
	0x15, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x10, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x0a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x73, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0d, 0x52,
	0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x08, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x12, 0x43, 0x65, 0x72, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x12,
	0x43, 0x65, 0x72, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x05, 0x43, 0x65, 0x72, 0x74, 0x73, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x10, 0x4b, 0x65, 0x65, 0x70,
	0x41, 0x6c, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x0d, 0x52, 0x10, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x4b, 0x65, 0x65,
	0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0e, 0x52, 0x14, 0x4b, 0x65, 0x65, 0x70, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x0f, 0x52, 0x15, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x14, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x10, 0x52, 0x14, 0x4b,
	0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x11, 0x52, 0x18, 0x53, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0e, 0x4c, 0x6f, 0x61, 0x64, 0x43,
	0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x02, 0x18, 0x01, 0x48, 0x12, 0x52, 0x0e, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6d, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x53, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x13, 0x52, 0x0f, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x14, 0x52, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0e,
	0x55, 0x6e, 0x69, 0x78, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x11, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x42,
	0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x16, 0x52, 0x11,
	0x55, 0x6e, 0x69, 0x78, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x47, 0x72, 0x70, 0x63, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x17,
	0x52, 0x10, 0x47, 0x72, 0x70, 0x63, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x56, 0x68, 0x6f, 0x73, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x48, 0x18, 0x52, 0x0c, 0x56,
	0x68, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x11, 0x56, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x19, 0x52, 0x11, 0x56, 0x68, 0x6f,
	0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x4f, 0x0a, 0x0d, 0x56, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x48, 0x1a,
	0x52, 0x0d, 0x56, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x4e, 0x76, 0x6d, 0x66, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x1b, 0x52, 0x14, 0x4e, 0x76, 0x6d, 0x66, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52,
	0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x13,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x1d,
	0x52, 0x13, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x52, 0x6f, 0x6f, 0x74,
	0x4b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1e, 0x52, 0x0f, 0x52, 0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x14, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x4b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x12, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x44, 0x69, 0x72, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x12,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44,
	0x69, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x4e, 0x62, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x48, 0x21, 0x52, 0x0a, 0x4e, 0x62, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x4e, 0x62,
	0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x22, 0x52, 0x0f, 0x4e, 0x62, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x4e, 0x62, 0x64,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x23, 0x52, 0x11, 0x4e, 0x62, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x19,
	0x4d, 0x61, 0x78, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x50, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x24, 0x52, 0x19, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x4b, 0x0a, 0x0b, 0x4e, 0x62, 0x64, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x48, 0x25, 0x52, 0x0b, 0x4e, 0x62,
	0x64, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1b,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x26, 0x52, 0x1b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x17, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x27, 0x52, 0x17, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x47, 0x0a, 0x1c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x28, 0x52, 0x1c, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x4e,
	0x62, 0x64, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x0f, 0x4e, 0x62, 0x64, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x47, 0x72,
	0x70, 0x63, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x2a, 0x52, 0x11, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x65, 0x65,
	0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x14, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x2b, 0x52, 0x14, 0x47,
	0x72, 0x70, 0x63, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x1f, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x65,
	0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x2c, 0x52, 0x1f, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x27, 0x47, 0x72, 0x70, 0x63, 0x48, 0x74, 0x74,
	0x70, 0x32, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x76, 0x50, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x2d, 0x52, 0x27, 0x47, 0x72, 0x70, 0x63, 0x48, 0x74,
	0x74, 0x70, 0x32, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x76, 0x50, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x27, 0x47, 0x72, 0x70, 0x63, 0x48, 0x74, 0x74, 0x70,
	0x32, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x2e, 0x52, 0x27, 0x47, 0x72, 0x70, 0x63, 0x48, 0x74, 0x74,
	0x70, 0x32, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x2f, 0x52, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x4e, 0x56,
	0x4d, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x71, 0x6e, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x0f, 0x4e, 0x56, 0x4d, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x4e, 0x71, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x18, 0x4e, 0x56, 0x4d,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x44, 0x73, 0x18, 0x38, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x4e, 0x56, 0x4d,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x44, 0x73, 0x12, 0x35, 0x0a, 0x13, 0x53, 0x43, 0x53, 0x49, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x31, 0x52, 0x13, 0x53, 0x43, 0x53, 0x49, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10,
	0x53, 0x43, 0x53, 0x49, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x32, 0x52, 0x10, 0x53, 0x43, 0x53, 0x49, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a,
	0x19, 0x53, 0x43, 0x53, 0x49, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x33, 0x52, 0x19, 0x53, 0x43, 0x53, 0x49, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3b, 0x0a, 0x16, 0x53, 0x43, 0x53, 0x49, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x34, 0x52, 0x16, 0x53, 0x43, 0x53, 0x49, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x13, 0x52, 0x64, 0x6d, 0x61, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x35, 0x52, 0x13, 0x52, 0x64,
	0x6d, 0x61, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x19, 0x52, 0x64, 0x6d, 0x61, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x36, 0x52, 0x19, 0x52, 0x64, 0x6d, 0x61, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x52, 0x64, 0x6d, 0x61, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x37, 0x52, 0x16, 0x52, 0x64, 0x6d, 0x61, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x52, 0x64, 0x6d, 0x61, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x38, 0x52, 0x11, 0x52, 0x64, 0x6d, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x10, 0x52, 0x64, 0x6d, 0x61, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x42, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52,
	0x64, 0x6d, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x39, 0x52, 0x10, 0x52, 0x64, 0x6d,
	0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x11, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x48, 0x3a, 0x52, 0x11, 0x54,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x3b, 0x52,
	0x10, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x3c, 0x52, 0x11, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x52, 0x65,
	0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x3d, 0x52, 0x0b,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x3e, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x49, 0x6f, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x42, 0x75,
	0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x3f, 0x52,
	0x0c, 0x4d, 0x61, 0x78, 0x42, 0x75, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x0f, 0x56, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x40, 0x52, 0x0f, 0x56, 0x68, 0x6f,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x50, 0x6f, 0x72,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x43, 0x65, 0x72, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x4b, 0x65, 0x65, 0x70,
	0x41, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x4b,
	0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x55,
	0x6e, 0x69, 0x78, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b,
	0x6c, 0x6f, 0x67, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x47, 0x72, 0x70, 0x63, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x56, 0x68, 0x6f,
	0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x56, 0x68,
	0x6f, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x56, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x4e, 0x76, 0x6d, 0x66, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x52, 0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x4b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x44, 0x69, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x4e, 0x62, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x4e, 0x62, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x4e, 0x62, 0x64, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x1c, 0x0a, 0x1a,
	0x5f, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4e,
	0x62, 0x64, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x4e, 0x62, 0x64, 0x53,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x47, 0x72, 0x70, 0x63, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x47,
	0x72, 0x70, 0x63, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x2a,
	0x0a, 0x28, 0x5f, 0x47, 0x72, 0x70, 0x63, 0x48, 0x74, 0x74, 0x70, 0x32, 0x4d, 0x69, 0x6e, 0x52,
	0x65, 0x63, 0x76, 0x50, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x2a, 0x0a, 0x28, 0x5f, 0x47,
	0x72, 0x70, 0x63, 0x48, 0x74, 0x74, 0x70, 0x32, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x6e, 0x74, 0x50,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x4e, 0x56, 0x4d, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x4e, 0x56, 0x4d, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4e,
	0x71, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x53, 0x43, 0x53, 0x49, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x53,
	0x43, 0x53, 0x49, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x1c, 0x0a, 0x1a, 0x5f, 0x53, 0x43, 0x53, 0x49, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x19, 0x0a,
	0x17, 0x5f, 0x53, 0x43, 0x53, 0x49, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x52, 0x64, 0x6d,
	0x61, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x52, 0x64, 0x6d, 0x61, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x52, 0x64, 0x6d, 0x61, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x52, 0x64,
	0x6d, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x52, 0x64, 0x6d, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4d,
	0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61,
	0x64, 0x49, 0x6f, 0x70, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4d, 0x61, 0x78, 0x42, 0x75,
	0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x56, 0x68, 0x6f, 0x73,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x22, 0x94, 0x02, 0x0a, 0x12,
	0x54, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x35, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x13, 0x41, 0x64, 0x64, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x44, 0x69, 0x73,
	0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x01, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52,
	0x0f, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x49, 0x6f, 0x70, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x09, 0x49, 0x6f, 0x70, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x49, 0x6f, 0x70, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x40, 0x0a, 0x13, 0x54, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x44, 0x61, 0x74,
	0x61, 0x44, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x44, 0x61,
	0x74, 0x61, 0x44, 0x69, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x44, 0x61, 0x74,
	0x61, 0x44, 0x69, 0x72, 0x22, 0x16, 0x0a, 0x14, 0x54, 0x4b, 0x69, 0x6b, 0x69, 0x6d, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xea, 0x03, 0x0a,
	0x10, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x51, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x11, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4e, 0x75, 0x6c,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01,
	0x52, 0x11, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x02, 0x52, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x13, 0x4b,
	0x69, 0x6b, 0x69, 0x6d, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4b, 0x69, 0x6b, 0x69, 0x6d, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x03, 0x52, 0x13, 0x4b, 0x69, 0x6b,
	0x69, 0x6d, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x4b, 0x69, 0x6b, 0x69, 0x6d, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6e, 0x62, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_blockstore_config_server_proto_rawDescOnce sync.Once
	file_cloud_blockstore_config_server_proto_rawDescData = file_cloud_blockstore_config_server_proto_rawDesc
)

func file_cloud_blockstore_config_server_proto_rawDescGZIP() []byte {
	file_cloud_blockstore_config_server_proto_rawDescOnce.Do(func() {
		file_cloud_blockstore_config_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_blockstore_config_server_proto_rawDescData)
	})
	return file_cloud_blockstore_config_server_proto_rawDescData
}

var file_cloud_blockstore_config_server_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_cloud_blockstore_config_server_proto_goTypes = []interface{}{
	(*TAffinity)(nil),                // 0: NCloud.NBlockStore.NProto.TAffinity
	(*TLocation)(nil),                // 1: NCloud.NBlockStore.NProto.TLocation
	(*TServerConfig)(nil),            // 2: NCloud.NBlockStore.NProto.TServerConfig
	(*TNullServiceConfig)(nil),       // 3: NCloud.NBlockStore.NProto.TNullServiceConfig
	(*TLocalServiceConfig)(nil),      // 4: NCloud.NBlockStore.NProto.TLocalServiceConfig
	(*TKikimrServiceConfig)(nil),     // 5: NCloud.NBlockStore.NProto.TKikimrServiceConfig
	(*TServerAppConfig)(nil),         // 6: NCloud.NBlockStore.NProto.TServerAppConfig
	(*protos.TCertificate)(nil),      // 7: NCloud.NProto.TCertificate
	(protos.EEndpointStorageType)(0), // 8: NCloud.NProto.EEndpointStorageType
	(*TRdmaClient)(nil),              // 9: NCloud.NBlockStore.NProto.TRdmaClient
}
var file_cloud_blockstore_config_server_proto_depIdxs = []int32{
	7, // 0: NCloud.NBlockStore.NProto.TServerConfig.Certs:type_name -> NCloud.NProto.TCertificate
	0, // 1: NCloud.NBlockStore.NProto.TServerConfig.VhostAffinity:type_name -> NCloud.NBlockStore.NProto.TAffinity
	8, // 2: NCloud.NBlockStore.NProto.TServerConfig.EndpointStorageType:type_name -> NCloud.NProto.EEndpointStorageType
	0, // 3: NCloud.NBlockStore.NProto.TServerConfig.NbdAffinity:type_name -> NCloud.NBlockStore.NProto.TAffinity
	9, // 4: NCloud.NBlockStore.NProto.TServerConfig.RdmaClientConfig:type_name -> NCloud.NBlockStore.NProto.TRdmaClient
	2, // 5: NCloud.NBlockStore.NProto.TServerAppConfig.ServerConfig:type_name -> NCloud.NBlockStore.NProto.TServerConfig
	3, // 6: NCloud.NBlockStore.NProto.TServerAppConfig.NullServiceConfig:type_name -> NCloud.NBlockStore.NProto.TNullServiceConfig
	4, // 7: NCloud.NBlockStore.NProto.TServerAppConfig.LocalServiceConfig:type_name -> NCloud.NBlockStore.NProto.TLocalServiceConfig
	5, // 8: NCloud.NBlockStore.NProto.TServerAppConfig.KikimrServiceConfig:type_name -> NCloud.NBlockStore.NProto.TKikimrServiceConfig
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_cloud_blockstore_config_server_proto_init() }
func file_cloud_blockstore_config_server_proto_init() {
	if File_cloud_blockstore_config_server_proto != nil {
		return
	}
	file_cloud_blockstore_config_rdma_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloud_blockstore_config_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAffinity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TNullServiceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLocalServiceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TKikimrServiceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_blockstore_config_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TServerAppConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cloud_blockstore_config_server_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_cloud_blockstore_config_server_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_cloud_blockstore_config_server_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_cloud_blockstore_config_server_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_cloud_blockstore_config_server_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_blockstore_config_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_blockstore_config_server_proto_goTypes,
		DependencyIndexes: file_cloud_blockstore_config_server_proto_depIdxs,
		MessageInfos:      file_cloud_blockstore_config_server_proto_msgTypes,
	}.Build()
	File_cloud_blockstore_config_server_proto = out.File
	file_cloud_blockstore_config_server_proto_rawDesc = nil
	file_cloud_blockstore_config_server_proto_goTypes = nil
	file_cloud_blockstore_config_server_proto_depIdxs = nil
}
