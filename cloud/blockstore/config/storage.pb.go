// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/blockstore/config/storage.proto

package config

import (
	protos "github.com/ydb-platform/nbs/cloud/storage/core/protos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EChannelAllocationMode int32

const (
	// Send only ExplicitChannelProfiles
	EChannelAllocationMode_CA_EXPLICIT EChannelAllocationMode = 2
)

// Enum value maps for EChannelAllocationMode.
var (
	EChannelAllocationMode_name = map[int32]string{
		2: "CA_EXPLICIT",
	}
	EChannelAllocationMode_value = map[string]int32{
		"CA_EXPLICIT": 2,
	}
)

func (x EChannelAllocationMode) Enum() *EChannelAllocationMode {
	p := new(EChannelAllocationMode)
	*p = x
	return p
}

func (x EChannelAllocationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EChannelAllocationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_blockstore_config_storage_proto_enumTypes[0].Descriptor()
}

func (EChannelAllocationMode) Type() protoreflect.EnumType {
	return &file_cloud_blockstore_config_storage_proto_enumTypes[0]
}

func (x EChannelAllocationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EChannelAllocationMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EChannelAllocationMode(num)
	return nil
}

// Deprecated: Use EChannelAllocationMode.Descriptor instead.
func (EChannelAllocationMode) EnumDescriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_storage_proto_rawDescGZIP(), []int{0}
}

type ECompactionType int32

const (
	// RangeScore = BlobCount
	ECompactionType_CT_DEFAULT ECompactionType = 0
	// RangeScore = blobstorage load reduction in seconds
	ECompactionType_CT_LOAD ECompactionType = 1
)

// Enum value maps for ECompactionType.
var (
	ECompactionType_name = map[int32]string{
		0: "CT_DEFAULT",
		1: "CT_LOAD",
	}
	ECompactionType_value = map[string]int32{
		"CT_DEFAULT": 0,
		"CT_LOAD":    1,
	}
)

func (x ECompactionType) Enum() *ECompactionType {
	p := new(ECompactionType)
	*p = x
	return p
}

func (x ECompactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECompactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_blockstore_config_storage_proto_enumTypes[1].Descriptor()
}

func (ECompactionType) Type() protoreflect.EnumType {
	return &file_cloud_blockstore_config_storage_proto_enumTypes[1]
}

func (x ECompactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECompactionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECompactionType(num)
	return nil
}

// Deprecated: Use ECompactionType.Descriptor instead.
func (ECompactionType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_storage_proto_rawDescGZIP(), []int{1}
}

type EVolumePreemptionType int32

const (
	// Do not preempt volumes when host is overloaded
	EVolumePreemptionType_PREEMPTION_NONE EVolumePreemptionType = 0
	// Move most resource consuming disk
	EVolumePreemptionType_PREEMPTION_MOVE_MOST_HEAVY EVolumePreemptionType = 1
	// Move least resource consumig disk
	EVolumePreemptionType_PREEMPTION_MOVE_LEAST_HEAVY EVolumePreemptionType = 2
)

// Enum value maps for EVolumePreemptionType.
var (
	EVolumePreemptionType_name = map[int32]string{
		0: "PREEMPTION_NONE",
		1: "PREEMPTION_MOVE_MOST_HEAVY",
		2: "PREEMPTION_MOVE_LEAST_HEAVY",
	}
	EVolumePreemptionType_value = map[string]int32{
		"PREEMPTION_NONE":             0,
		"PREEMPTION_MOVE_MOST_HEAVY":  1,
		"PREEMPTION_MOVE_LEAST_HEAVY": 2,
	}
)

func (x EVolumePreemptionType) Enum() *EVolumePreemptionType {
	p := new(EVolumePreemptionType)
	*p = x
	return p
}

func (x EVolumePreemptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVolumePreemptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_blockstore_config_storage_proto_enumTypes[2].Descriptor()
}

func (EVolumePreemptionType) Type() protoreflect.EnumType {
	return &file_cloud_blockstore_config_storage_proto_enumTypes[2]
}

func (x EVolumePreemptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EVolumePreemptionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EVolumePreemptionType(num)
	return nil
}

// Deprecated: Use EVolumePreemptionType.Descriptor instead.
func (EVolumePreemptionType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_storage_proto_rawDescGZIP(), []int{2}
}

type TStorageServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Schemeshard directory for volumes.
	SchemeShardDir *string `protobuf:"bytes,4,opt,name=SchemeShardDir" json:"SchemeShardDir,omitempty"`
	// Minimum write request size (in bytes) that lets us write the data directly
	// to blobstorage (as a merged blob).
	WriteBlobThreshold *uint32 `protobuf:"varint,6,opt,name=WriteBlobThreshold" json:"WriteBlobThreshold,omitempty"`
	// The size of data (in bytes) in the fresh blocks table that triggers flushing.
	FlushThreshold *uint32 `protobuf:"varint,7,opt,name=FlushThreshold" json:"FlushThreshold,omitempty"`
	// Number of blobs queued for cleanup.
	CleanupThreshold *uint32 `protobuf:"varint,10,opt,name=CleanupThreshold" json:"CleanupThreshold,omitempty"`
	// Number of blobs queued for collect.
	CollectGarbageThreshold *uint32 `protobuf:"varint,11,opt,name=CollectGarbageThreshold" json:"CollectGarbageThreshold,omitempty"`
	// Timeout for hive locks (in milliseconds).
	HiveLockExpireTimeout *uint32 `protobuf:"varint,12,opt,name=HiveLockExpireTimeout" json:"HiveLockExpireTimeout,omitempty"`
	// Cooldown time between tablet reboots (in milliseconds).
	TabletRebootCoolDownIncrement *uint32 `protobuf:"varint,13,opt,name=TabletRebootCoolDownIncrement" json:"TabletRebootCoolDownIncrement,omitempty"`
	TabletRebootCoolDownMax       *uint32 `protobuf:"varint,14,opt,name=TabletRebootCoolDownMax" json:"TabletRebootCoolDownMax,omitempty"`
	// Should local service be started or not.
	DisableLocalService *bool `protobuf:"varint,15,opt,name=DisableLocalService" json:"DisableLocalService,omitempty"`
	// Number of reties before pipe client reports failure.
	PipeClientRetryCount *uint32 `protobuf:"varint,16,opt,name=PipeClientRetryCount" json:"PipeClientRetryCount,omitempty"`
	// Mimimum timeout before pipe client reconnect attempt.
	PipeClientMinRetryTime *uint32 `protobuf:"varint,17,opt,name=PipeClientMinRetryTime" json:"PipeClientMinRetryTime,omitempty"`
	// Maximum timeout before pipe client reconnect attempt.
	PipeClientMaxRetryTime *uint32 `protobuf:"varint,18,opt,name=PipeClientMaxRetryTime" json:"PipeClientMaxRetryTime,omitempty"`
	// Fresh data will be chunked into blobs of such size (in bytes) during flushing.
	FlushBlobSizeThreshold *uint32 `protobuf:"varint,19,opt,name=FlushBlobSizeThreshold" json:"FlushBlobSizeThreshold,omitempty"`
	// Retry timeout for compaction started from monitoring (in milliseconds).
	CompactionRetryTimeout *uint32 `protobuf:"varint,21,opt,name=CompactionRetryTimeout" json:"CompactionRetryTimeout,omitempty"`
	// Number of deletions before starting an update process.
	UpdateBlobsThreshold *uint32 `protobuf:"varint,22,opt,name=UpdateBlobsThreshold" json:"UpdateBlobsThreshold,omitempty"`
	// Number of garbage blocks before start compaction.
	CompactionGarbageThreshold *uint32 `protobuf:"varint,24,opt,name=CompactionGarbageThreshold" json:"CompactionGarbageThreshold,omitempty"`
	// Maximum request size in bytes.
	MaxReadWriteRangeSize *uint64 `protobuf:"varint,25,opt,name=MaxReadWriteRangeSize" json:"MaxReadWriteRangeSize,omitempty"`
	// Maximum blob range size (in bytes).
	MaxBlobRangeSize *uint32 `protobuf:"varint,26,opt,name=MaxBlobRangeSize" json:"MaxBlobRangeSize,omitempty"`
	// Timeout for considering client inactive after mounting (in milliseconds).
	InactiveClientsTimeout *uint32 `protobuf:"varint,27,opt,name=InactiveClientsTimeout" json:"InactiveClientsTimeout,omitempty"`
	// Maximum allowed requests in-progress.
	MaxIORequestsInFlight    *uint32 `protobuf:"varint,30,opt,name=MaxIORequestsInFlight" json:"MaxIORequestsInFlight,omitempty"`
	MaxIORequestsInFlightSSD *uint32 `protobuf:"varint,31,opt,name=MaxIORequestsInFlightSSD" json:"MaxIORequestsInFlightSSD,omitempty"`
	// Allow setting Version field in ModifyScheme request.
	AllowVersionInModifyScheme *bool `protobuf:"varint,32,opt,name=AllowVersionInModifyScheme" json:"AllowVersionInModifyScheme,omitempty"`
	// Service version info.
	ServiceVersionInfo *string `protobuf:"bytes,34,opt,name=ServiceVersionInfo" json:"ServiceVersionInfo,omitempty"`
	// Size of allocation unit for SSD drives (in GiB).
	AllocationUnitSSD *uint32 `protobuf:"varint,35,opt,name=AllocationUnitSSD" json:"AllocationUnitSSD,omitempty"`
	// Size of allocation unit for HDD drives (in GiB).
	AllocationUnitHDD *uint32 `protobuf:"varint,36,opt,name=AllocationUnitHDD" json:"AllocationUnitHDD,omitempty"`
	// Throttling feature flags.
	ThrottlingEnabled    *bool `protobuf:"varint,37,opt,name=ThrottlingEnabled" json:"ThrottlingEnabled,omitempty"`
	ThrottlingEnabledSSD *bool `protobuf:"varint,38,opt,name=ThrottlingEnabledSSD" json:"ThrottlingEnabledSSD,omitempty"`
	// Volumes stats upload to db period.
	StatsUploadInterval *uint32 `protobuf:"varint,39,opt,name=StatsUploadInterval" json:"StatsUploadInterval,omitempty"`
	// Default throttling settings.
	ThrottlingBurstPercentage    *uint32 `protobuf:"varint,40,opt,name=ThrottlingBurstPercentage" json:"ThrottlingBurstPercentage,omitempty"`
	ThrottlingMaxPostponedWeight *uint32 `protobuf:"varint,41,opt,name=ThrottlingMaxPostponedWeight" json:"ThrottlingMaxPostponedWeight,omitempty"` // in bytes
	ThrottlingBoostTime          *uint32 `protobuf:"varint,42,opt,name=ThrottlingBoostTime" json:"ThrottlingBoostTime,omitempty"`                   // in milliseconds
	ThrottlingBoostRefillTime    *uint32 `protobuf:"varint,43,opt,name=ThrottlingBoostRefillTime" json:"ThrottlingBoostRefillTime,omitempty"`       // in milliseconds
	// Disk boost rate corresponds to the following unit count.
	ThrottlingSSDBoostUnits *uint32 `protobuf:"varint,44,opt,name=ThrottlingSSDBoostUnits" json:"ThrottlingSSDBoostUnits,omitempty"`
	ThrottlingHDDBoostUnits *uint32 `protobuf:"varint,45,opt,name=ThrottlingHDDBoostUnits" json:"ThrottlingHDDBoostUnits,omitempty"`
	// Performance per allocation unit.
	SSDUnitReadBandwidth  *uint32                    `protobuf:"varint,46,opt,name=SSDUnitReadBandwidth" json:"SSDUnitReadBandwidth,omitempty"`   // in MiB/s
	SSDUnitWriteBandwidth *uint32                    `protobuf:"varint,47,opt,name=SSDUnitWriteBandwidth" json:"SSDUnitWriteBandwidth,omitempty"` // in MiB/s
	SSDMaxReadBandwidth   *uint32                    `protobuf:"varint,48,opt,name=SSDMaxReadBandwidth" json:"SSDMaxReadBandwidth,omitempty"`     // in MiB/s
	SSDMaxWriteBandwidth  *uint32                    `protobuf:"varint,49,opt,name=SSDMaxWriteBandwidth" json:"SSDMaxWriteBandwidth,omitempty"`   // in MiB/s
	SSDUnitReadIops       *uint32                    `protobuf:"varint,50,opt,name=SSDUnitReadIops" json:"SSDUnitReadIops,omitempty"`
	SSDUnitWriteIops      *uint32                    `protobuf:"varint,51,opt,name=SSDUnitWriteIops" json:"SSDUnitWriteIops,omitempty"`
	SSDMaxReadIops        *uint32                    `protobuf:"varint,52,opt,name=SSDMaxReadIops" json:"SSDMaxReadIops,omitempty"`
	SSDMaxWriteIops       *uint32                    `protobuf:"varint,53,opt,name=SSDMaxWriteIops" json:"SSDMaxWriteIops,omitempty"`
	HDDUnitReadBandwidth  *uint32                    `protobuf:"varint,54,opt,name=HDDUnitReadBandwidth" json:"HDDUnitReadBandwidth,omitempty"`   // in MiB/s
	HDDUnitWriteBandwidth *uint32                    `protobuf:"varint,55,opt,name=HDDUnitWriteBandwidth" json:"HDDUnitWriteBandwidth,omitempty"` // in MiB/s
	HDDMaxReadBandwidth   *uint32                    `protobuf:"varint,56,opt,name=HDDMaxReadBandwidth" json:"HDDMaxReadBandwidth,omitempty"`     // in MiB/s
	HDDMaxWriteBandwidth  *uint32                    `protobuf:"varint,57,opt,name=HDDMaxWriteBandwidth" json:"HDDMaxWriteBandwidth,omitempty"`   // in MiB/s
	HDDUnitReadIops       *uint32                    `protobuf:"varint,58,opt,name=HDDUnitReadIops" json:"HDDUnitReadIops,omitempty"`
	HDDUnitWriteIops      *uint32                    `protobuf:"varint,59,opt,name=HDDUnitWriteIops" json:"HDDUnitWriteIops,omitempty"`
	HDDMaxReadIops        *uint32                    `protobuf:"varint,60,opt,name=HDDMaxReadIops" json:"HDDMaxReadIops,omitempty"`
	HDDMaxWriteIops       *uint32                    `protobuf:"varint,61,opt,name=HDDMaxWriteIops" json:"HDDMaxWriteIops,omitempty"`
	AuthorizationMode     *protos.EAuthorizationMode `protobuf:"varint,62,opt,name=AuthorizationMode,enum=NCloud.NProto.EAuthorizationMode" json:"AuthorizationMode,omitempty"`
	// Throttler postpone/reject threshold in milliseconds.
	MaxThrottlerDelay *uint32 `protobuf:"varint,63,opt,name=MaxThrottlerDelay" json:"MaxThrottlerDelay,omitempty"`
	// Partition backpressure feature calculation settings.
	CompactionScoreLimitForBackpressure       *uint32 `protobuf:"varint,64,opt,name=CompactionScoreLimitForBackpressure" json:"CompactionScoreLimitForBackpressure,omitempty"`
	CompactionScoreThresholdForBackpressure   *uint32 `protobuf:"varint,65,opt,name=CompactionScoreThresholdForBackpressure" json:"CompactionScoreThresholdForBackpressure,omitempty"`
	CompactionScoreFeatureMaxValue            *uint32 `protobuf:"varint,66,opt,name=CompactionScoreFeatureMaxValue" json:"CompactionScoreFeatureMaxValue,omitempty"`
	FreshByteCountLimitForBackpressure        *uint32 `protobuf:"varint,67,opt,name=FreshByteCountLimitForBackpressure" json:"FreshByteCountLimitForBackpressure,omitempty"`
	FreshByteCountThresholdForBackpressure    *uint32 `protobuf:"varint,68,opt,name=FreshByteCountThresholdForBackpressure" json:"FreshByteCountThresholdForBackpressure,omitempty"`
	FreshByteCountFeatureMaxValue             *uint32 `protobuf:"varint,69,opt,name=FreshByteCountFeatureMaxValue" json:"FreshByteCountFeatureMaxValue,omitempty"`
	CleanupQueueBytesLimitForBackpressure     *uint64 `protobuf:"varint,311,opt,name=CleanupQueueBytesLimitForBackpressure" json:"CleanupQueueBytesLimitForBackpressure,omitempty"`
	CleanupQueueBytesThresholdForBackpressure *uint64 `protobuf:"varint,312,opt,name=CleanupQueueBytesThresholdForBackpressure" json:"CleanupQueueBytesThresholdForBackpressure,omitempty"`
	CleanupQueueBytesFeatureMaxValue          *uint32 `protobuf:"varint,313,opt,name=CleanupQueueBytesFeatureMaxValue" json:"CleanupQueueBytesFeatureMaxValue,omitempty"`
	// Max write request cost multiplier due to backpressure.
	MaxWriteCostMultiplier *uint32 `protobuf:"varint,70,opt,name=MaxWriteCostMultiplier" json:"MaxWriteCostMultiplier,omitempty"`
	// Timeout to register client at volume.
	InitialAddClientTimeout *uint32 `protobuf:"varint,71,opt,name=InitialAddClientTimeout" json:"InitialAddClientTimeout,omitempty"`
	// Timeout to register client after tablet local start.
	LocalStartAddClientTimeout *uint32 `protobuf:"varint,72,opt,name=LocalStartAddClientTimeout" json:"LocalStartAddClientTimeout,omitempty"`
	// Channel configuration.
	HDDSystemChannelPoolKind    *string `protobuf:"bytes,73,opt,name=HDDSystemChannelPoolKind" json:"HDDSystemChannelPoolKind,omitempty"`
	HDDLogChannelPoolKind       *string `protobuf:"bytes,74,opt,name=HDDLogChannelPoolKind" json:"HDDLogChannelPoolKind,omitempty"`
	HDDIndexChannelPoolKind     *string `protobuf:"bytes,75,opt,name=HDDIndexChannelPoolKind" json:"HDDIndexChannelPoolKind,omitempty"`
	HDDMixedChannelPoolKind     *string `protobuf:"bytes,76,opt,name=HDDMixedChannelPoolKind" json:"HDDMixedChannelPoolKind,omitempty"`
	HDDMergedChannelPoolKind    *string `protobuf:"bytes,77,opt,name=HDDMergedChannelPoolKind" json:"HDDMergedChannelPoolKind,omitempty"`
	SSDSystemChannelPoolKind    *string `protobuf:"bytes,78,opt,name=SSDSystemChannelPoolKind" json:"SSDSystemChannelPoolKind,omitempty"`
	SSDLogChannelPoolKind       *string `protobuf:"bytes,79,opt,name=SSDLogChannelPoolKind" json:"SSDLogChannelPoolKind,omitempty"`
	SSDIndexChannelPoolKind     *string `protobuf:"bytes,80,opt,name=SSDIndexChannelPoolKind" json:"SSDIndexChannelPoolKind,omitempty"`
	SSDMixedChannelPoolKind     *string `protobuf:"bytes,81,opt,name=SSDMixedChannelPoolKind" json:"SSDMixedChannelPoolKind,omitempty"`
	SSDMergedChannelPoolKind    *string `protobuf:"bytes,82,opt,name=SSDMergedChannelPoolKind" json:"SSDMergedChannelPoolKind,omitempty"`
	HybridSystemChannelPoolKind *string `protobuf:"bytes,83,opt,name=HybridSystemChannelPoolKind" json:"HybridSystemChannelPoolKind,omitempty"`
	HybridLogChannelPoolKind    *string `protobuf:"bytes,84,opt,name=HybridLogChannelPoolKind" json:"HybridLogChannelPoolKind,omitempty"`
	HybridIndexChannelPoolKind  *string `protobuf:"bytes,85,opt,name=HybridIndexChannelPoolKind" json:"HybridIndexChannelPoolKind,omitempty"`
	HybridMixedChannelPoolKind  *string `protobuf:"bytes,86,opt,name=HybridMixedChannelPoolKind" json:"HybridMixedChannelPoolKind,omitempty"`
	HybridMergedChannelPoolKind *string `protobuf:"bytes,87,opt,name=HybridMergedChannelPoolKind" json:"HybridMergedChannelPoolKind,omitempty"`
	// FolderId of this NBS instance. Used for authorization.
	FolderId *string `protobuf:"bytes,90,opt,name=FolderId" json:"FolderId,omitempty"`
	// Enables allocation of special channels for Mixed blobs.
	AllocateSeparateMixedChannels *bool `protobuf:"varint,91,opt,name=AllocateSeparateMixedChannels" json:"AllocateSeparateMixedChannels,omitempty"`
	// Retry timeout for cleanup started from monitoring (in milliseconds).
	CleanupRetryTimeout *uint32 `protobuf:"varint,92,opt,name=CleanupRetryTimeout" json:"CleanupRetryTimeout,omitempty"`
	// Channel free space threshold - used for write request balancing.
	ChannelFreeSpaceThreshold *uint32 `protobuf:"varint,93,opt,name=ChannelFreeSpaceThreshold" json:"ChannelFreeSpaceThreshold,omitempty"`
	// Channel min free space - used for write request balancing.
	ChannelMinFreeSpace *uint32 `protobuf:"varint,94,opt,name=ChannelMinFreeSpace" json:"ChannelMinFreeSpace,omitempty"`
	// Minimum number of channels per partition.
	MinChannelCount *uint32 `protobuf:"varint,95,opt,name=MinChannelCount" json:"MinChannelCount,omitempty"`
	// Weight of read/zero/describe requests in throttler's postponed request
	// queue, bytes.
	DefaultPostponedRequestWeight *uint32 `protobuf:"varint,96,opt,name=DefaultPostponedRequestWeight" json:"DefaultPostponedRequestWeight,omitempty"`
	// Timeout for client to send ping (in milliseconds).
	ClientRemountPeriod *uint32 `protobuf:"varint,97,opt,name=ClientRemountPeriod" json:"ClientRemountPeriod,omitempty"`
	// Index caching parameters (only for partition2).
	ZoneBlockCount             *uint32 `protobuf:"varint,98,opt,name=ZoneBlockCount" json:"ZoneBlockCount,omitempty"`
	HotZoneRequestCountFactor  *uint32 `protobuf:"varint,99,opt,name=HotZoneRequestCountFactor" json:"HotZoneRequestCountFactor,omitempty"`
	ColdZoneRequestCountFactor *uint32 `protobuf:"varint,100,opt,name=ColdZoneRequestCountFactor" json:"ColdZoneRequestCountFactor,omitempty"`
	// Enables/disables write request batching.
	WriteRequestBatchingEnabled *bool `protobuf:"varint,101,opt,name=WriteRequestBatchingEnabled" json:"WriteRequestBatchingEnabled,omitempty"`
	// BlockList cache size (only for partition2).
	BlockListCacheSizePercentage *uint32 `protobuf:"varint,102,opt,name=BlockListCacheSizePercentage" json:"BlockListCacheSizePercentage,omitempty"`
	// Max blobs to process in a single Cleanup op run.
	MaxBlobsToCleanup *uint32 `protobuf:"varint,103,opt,name=MaxBlobsToCleanup" json:"MaxBlobsToCleanup,omitempty"`
	// Blob size limit in bytes.
	MaxBlobSize *uint32 `protobuf:"varint,104,opt,name=MaxBlobSize" json:"MaxBlobSize,omitempty"`
	// Size of allocation unit for non-replicated SSD drives (in GiB).
	AllocationUnitNonReplicatedSSD *uint32 `protobuf:"varint,105,opt,name=AllocationUnitNonReplicatedSSD" json:"AllocationUnitNonReplicatedSSD,omitempty"`
	// Performance per allocation unit for nonreplicated volumes.
	NonReplicatedSSDUnitReadBandwidth  *uint32 `protobuf:"varint,106,opt,name=NonReplicatedSSDUnitReadBandwidth" json:"NonReplicatedSSDUnitReadBandwidth,omitempty"`   // in MiB/s
	NonReplicatedSSDUnitWriteBandwidth *uint32 `protobuf:"varint,107,opt,name=NonReplicatedSSDUnitWriteBandwidth" json:"NonReplicatedSSDUnitWriteBandwidth,omitempty"` // in MiB/s
	NonReplicatedSSDMaxReadBandwidth   *uint32 `protobuf:"varint,108,opt,name=NonReplicatedSSDMaxReadBandwidth" json:"NonReplicatedSSDMaxReadBandwidth,omitempty"`     // in MiB/s
	NonReplicatedSSDMaxWriteBandwidth  *uint32 `protobuf:"varint,109,opt,name=NonReplicatedSSDMaxWriteBandwidth" json:"NonReplicatedSSDMaxWriteBandwidth,omitempty"`   // in MiB/s
	NonReplicatedSSDUnitReadIops       *uint32 `protobuf:"varint,110,opt,name=NonReplicatedSSDUnitReadIops" json:"NonReplicatedSSDUnitReadIops,omitempty"`
	NonReplicatedSSDUnitWriteIops      *uint32 `protobuf:"varint,111,opt,name=NonReplicatedSSDUnitWriteIops" json:"NonReplicatedSSDUnitWriteIops,omitempty"`
	NonReplicatedSSDMaxReadIops        *uint32 `protobuf:"varint,112,opt,name=NonReplicatedSSDMaxReadIops" json:"NonReplicatedSSDMaxReadIops,omitempty"`
	NonReplicatedSSDMaxWriteIops       *uint32 `protobuf:"varint,113,opt,name=NonReplicatedSSDMaxWriteIops" json:"NonReplicatedSSDMaxWriteIops,omitempty"`
	// Compaction type.
	SSDCompactionType *ECompactionType `protobuf:"varint,114,opt,name=SSDCompactionType,enum=NCloud.NBlockStore.NProto.ECompactionType" json:"SSDCompactionType,omitempty"`
	HDDCompactionType *ECompactionType `protobuf:"varint,115,opt,name=HDDCompactionType,enum=NCloud.NBlockStore.NProto.ECompactionType" json:"HDDCompactionType,omitempty"`
	// Enables approximate garbage compaction for partition v1.
	V1GarbageCompactionEnabled *bool `protobuf:"varint,116,opt,name=V1GarbageCompactionEnabled" json:"V1GarbageCompactionEnabled,omitempty"`
	// Enables digest calculation & logging for some blocks.
	BlockDigestsEnabled *bool `protobuf:"varint,117,opt,name=BlockDigestsEnabled" json:"BlockDigestsEnabled,omitempty"`
	// Partition2 index structures conversion attempt time interval (in ms).
	IndexStructuresConversionAttemptInterval *uint32 `protobuf:"varint,118,opt,name=IndexStructuresConversionAttemptInterval" json:"IndexStructuresConversionAttemptInterval,omitempty"`
	// Calculate block digests for the following percentage of blocks in each
	// block group.
	DigestedBlocksPercentage *uint32 `protobuf:"varint,119,opt,name=DigestedBlocksPercentage" json:"DigestedBlocksPercentage,omitempty"`
	// If there is more garbage in some range than this limit, compact it.
	// Measured in percents (similar to CompactionGarbageThreshold).
	CompactionRangeGarbageThreshold *uint32 `protobuf:"varint,120,opt,name=CompactionRangeGarbageThreshold" json:"CompactionRangeGarbageThreshold,omitempty"`
	// Limits the number of affected blocks sent from compaction to addblobs.
	MaxAffectedBlocksPerCompaction *uint32 `protobuf:"varint,121,opt,name=MaxAffectedBlocksPerCompaction" json:"MaxAffectedBlocksPerCompaction,omitempty"`
	// Real performance per allocation unit.
	RealSSDUnitReadBandwidth  *uint32 `protobuf:"varint,122,opt,name=RealSSDUnitReadBandwidth" json:"RealSSDUnitReadBandwidth,omitempty"`   // in MiB/s
	RealSSDUnitWriteBandwidth *uint32 `protobuf:"varint,123,opt,name=RealSSDUnitWriteBandwidth" json:"RealSSDUnitWriteBandwidth,omitempty"` // in MiB/s
	RealSSDUnitReadIops       *uint32 `protobuf:"varint,124,opt,name=RealSSDUnitReadIops" json:"RealSSDUnitReadIops,omitempty"`
	RealSSDUnitWriteIops      *uint32 `protobuf:"varint,125,opt,name=RealSSDUnitWriteIops" json:"RealSSDUnitWriteIops,omitempty"`
	RealHDDUnitReadBandwidth  *uint32 `protobuf:"varint,126,opt,name=RealHDDUnitReadBandwidth" json:"RealHDDUnitReadBandwidth,omitempty"`   // in MiB/s
	RealHDDUnitWriteBandwidth *uint32 `protobuf:"varint,127,opt,name=RealHDDUnitWriteBandwidth" json:"RealHDDUnitWriteBandwidth,omitempty"` // in MiB/s
	RealHDDUnitReadIops       *uint32 `protobuf:"varint,128,opt,name=RealHDDUnitReadIops" json:"RealHDDUnitReadIops,omitempty"`
	RealHDDUnitWriteIops      *uint32 `protobuf:"varint,129,opt,name=RealHDDUnitWriteIops" json:"RealHDDUnitWriteIops,omitempty"`
	// Period (in milliseconds) between recycling retired nonreplicated disks.
	NonReplicatedDiskRecyclingPeriod *uint32 `protobuf:"varint,130,opt,name=NonReplicatedDiskRecyclingPeriod" json:"NonReplicatedDiskRecyclingPeriod,omitempty"`
	// Compaction delay settings.
	MaxCompactionDelay         *uint32 `protobuf:"varint,131,opt,name=MaxCompactionDelay" json:"MaxCompactionDelay,omitempty"` // in ms
	MinCompactionDelay         *uint32 `protobuf:"varint,132,opt,name=MinCompactionDelay" json:"MinCompactionDelay,omitempty"` // in ms
	CompactionScoreHistorySize *uint32 `protobuf:"varint,133,opt,name=CompactionScoreHistorySize" json:"CompactionScoreHistorySize,omitempty"`
	// Volume preemption strategy.
	VolumePreemptionType *EVolumePreemptionType `protobuf:"varint,134,opt,name=VolumePreemptionType,enum=NCloud.NBlockStore.NProto.EVolumePreemptionType" json:"VolumePreemptionType,omitempty"`
	// CPU load percentage to move volumes from host.
	PreemptionPushPercentage *uint32 `protobuf:"varint,135,opt,name=PreemptionPushPercentage" json:"PreemptionPushPercentage,omitempty"`
	// CPU load percentage to move volumes to host.
	PreemptionPullPercentage *uint32 `protobuf:"varint,136,opt,name=PreemptionPullPercentage" json:"PreemptionPullPercentage,omitempty"`
	// Partition tablet version to be used for new volumes.
	DefaultTabletVersion *uint32 `protobuf:"varint,137,opt,name=DefaultTabletVersion" json:"DefaultTabletVersion,omitempty"`
	// Max number of intervals stored in RangeMap for each blob (v2 only).
	MaxRangesPerBlob *uint32 `protobuf:"varint,138,opt,name=MaxRangesPerBlob" json:"MaxRangesPerBlob,omitempty"`
	// Cleanup delay settings.
	MaxCleanupDelay         *uint32 `protobuf:"varint,139,opt,name=MaxCleanupDelay" json:"MaxCleanupDelay,omitempty"` // in ms
	MinCleanupDelay         *uint32 `protobuf:"varint,140,opt,name=MinCleanupDelay" json:"MinCleanupDelay,omitempty"` // in ms
	CleanupScoreHistorySize *uint32 `protobuf:"varint,141,opt,name=CleanupScoreHistorySize" json:"CleanupScoreHistorySize,omitempty"`
	// Allow to change channel pool kinds upon volume resizing.
	PoolKindChangeAllowed *bool `protobuf:"varint,142,opt,name=PoolKindChangeAllowed" json:"PoolKindChangeAllowed,omitempty"`
	// If set, service/volume will acquire devices for mounted volumes.
	AcquireNonReplicatedDevices *bool `protobuf:"varint,143,opt,name=AcquireNonReplicatedDevices" json:"AcquireNonReplicatedDevices,omitempty"`
	// Inflight limit for IO requests.
	NonReplicatedInflightLimit *uint32 `protobuf:"varint,144,opt,name=NonReplicatedInflightLimit" json:"NonReplicatedInflightLimit,omitempty"`
	// Max disks per placement group.
	MaxDisksInPlacementGroup *uint32 `protobuf:"varint,145,opt,name=MaxDisksInPlacementGroup" json:"MaxDisksInPlacementGroup,omitempty"`
	// Max placement partitions per group.
	MaxPlacementPartitionCount *uint32 `protobuf:"varint,295,opt,name=MaxPlacementPartitionCount" json:"MaxPlacementPartitionCount,omitempty"`
	// Max disks per placement group with partition placement strategy.
	MaxDisksInPartitionPlacementGroup *uint32 `protobuf:"varint,296,opt,name=MaxDisksInPartitionPlacementGroup" json:"MaxDisksInPartitionPlacementGroup,omitempty"`
	// Overrides WriteBlobThreshold for SSD volumes.
	WriteBlobThresholdSSD *uint32 `protobuf:"varint,146,opt,name=WriteBlobThresholdSSD" json:"WriteBlobThresholdSSD,omitempty"`
	// DiskRegistry destroys broken disks after this period of time.
	BrokenDiskDestructionDelay *uint32 `protobuf:"varint,147,opt,name=BrokenDiskDestructionDelay" json:"BrokenDiskDestructionDelay,omitempty"` // in ms
	// Volume mount history duration.
	VolumeHistoryDuration *uint32 `protobuf:"varint,148,opt,name=VolumeHistoryDuration" json:"VolumeHistoryDuration,omitempty"` // in ms
	// Number of maximum blob count per range.
	SSDMaxBlobsPerRange *uint32 `protobuf:"varint,149,opt,name=SSDMaxBlobsPerRange" json:"SSDMaxBlobsPerRange,omitempty"`
	HDDMaxBlobsPerRange *uint32 `protobuf:"varint,150,opt,name=HDDMaxBlobsPerRange" json:"HDDMaxBlobsPerRange,omitempty"`
	// Just drop fresh blocks upon Flush, don't save them as blobs (debug flag).
	FlushToDevNull *bool `protobuf:"varint,151,opt,name=FlushToDevNull" json:"FlushToDevNull,omitempty"`
	// Max Compaction/Cleanup exec time per second.
	MaxCompactionExecTimePerSecond *uint32 `protobuf:"varint,152,opt,name=MaxCompactionExecTimePerSecond" json:"MaxCompactionExecTimePerSecond,omitempty"` // in ms
	MaxCleanupExecTimePerSecond    *uint32 `protobuf:"varint,153,opt,name=MaxCleanupExecTimePerSecond" json:"MaxCleanupExecTimePerSecond,omitempty"`       // in ms
	// Don't automatically enqueue garbage collection upon partition startup.
	DontEnqueueCollectGarbageUponPartitionStartup *bool   `protobuf:"varint,154,opt,name=DontEnqueueCollectGarbageUponPartitionStartup" json:"DontEnqueueCollectGarbageUponPartitionStartup,omitempty"`
	NonReplicatedDiskRepairTimeout                *uint32 `protobuf:"varint,155,opt,name=NonReplicatedDiskRepairTimeout" json:"NonReplicatedDiskRepairTimeout,omitempty"`
	// New volumes will be created with partition count proportional to their size.
	BytesPerPartition *uint64 `protobuf:"varint,156,opt,name=BytesPerPartition" json:"BytesPerPartition,omitempty"`
	// Bytes per stripe (applicable for multipartition volumes).
	BytesPerStripe *uint32 `protobuf:"varint,157,opt,name=BytesPerStripe" json:"BytesPerStripe,omitempty"`
	// Max partitions per volume.
	MaxPartitionsPerVolume *uint32 `protobuf:"varint,158,opt,name=MaxPartitionsPerVolume" json:"MaxPartitionsPerVolume,omitempty"`
	// Min timeout for agent to restore connection (in milliseconds).
	NonReplicatedAgentMinTimeout *uint32 `protobuf:"varint,159,opt,name=NonReplicatedAgentMinTimeout" json:"NonReplicatedAgentMinTimeout,omitempty"`
	// Timeout for DR -> DA requests (in milliseconds).
	AgentRequestTimeout *uint32 `protobuf:"varint,160,opt,name=AgentRequestTimeout" json:"AgentRequestTimeout,omitempty"`
	// Timeout before allowing infra to withdraw our agents/devices.
	NonReplicatedInfraTimeout *uint32 `protobuf:"varint,161,opt,name=NonReplicatedInfraTimeout" json:"NonReplicatedInfraTimeout,omitempty"`
	// CompactionScore limit after which compaction throttling is disabled.
	CompactionScoreLimitForThrottling *uint32 `protobuf:"varint,163,opt,name=CompactionScoreLimitForThrottling" json:"CompactionScoreLimitForThrottling,omitempty"`
	// CleanupQueueBytes limit after which cleanup throttling is disabled.
	CleanupQueueBytesLimitForThrottling *uint64 `protobuf:"varint,164,opt,name=CleanupQueueBytesLimitForThrottling" json:"CleanupQueueBytesLimitForThrottling,omitempty"`
	// The desired byte count read/written by a compaction run.
	TargetCompactionBytesPerOp *uint64 `protobuf:"varint,165,opt,name=TargetCompactionBytesPerOp" json:"TargetCompactionBytesPerOp,omitempty"`
	// Max skipped blobs during range compaction.
	MaxSkippedBlobsDuringCompaction *uint32 `protobuf:"varint,166,opt,name=MaxSkippedBlobsDuringCompaction" json:"MaxSkippedBlobsDuringCompaction,omitempty"`
	// MaxBlobsPerRange overrides for partition v2.
	SSDV2MaxBlobsPerRange *uint32 `protobuf:"varint,167,opt,name=SSDV2MaxBlobsPerRange" json:"SSDV2MaxBlobsPerRange,omitempty"`
	HDDV2MaxBlobsPerRange *uint32 `protobuf:"varint,168,opt,name=HDDV2MaxBlobsPerRange" json:"HDDV2MaxBlobsPerRange,omitempty"`
	// Enables incremental compaction for v1 tablets.
	IncrementalCompactionEnabled *bool `protobuf:"varint,169,opt,name=IncrementalCompactionEnabled" json:"IncrementalCompactionEnabled,omitempty"`
	// Enables some optimizations for small requests (affects partition v2 only).
	OptimizeForShortRanges *bool `protobuf:"varint,171,opt,name=OptimizeForShortRanges" json:"OptimizeForShortRanges,omitempty"`
	// Max blobs and blocks processed by a single v2 garbage compaction iteration.
	CompactionGarbageBlobLimit  *uint32 `protobuf:"varint,173,opt,name=CompactionGarbageBlobLimit" json:"CompactionGarbageBlobLimit,omitempty"`
	CompactionGarbageBlockLimit *uint32 `protobuf:"varint,174,opt,name=CompactionGarbageBlockLimit" json:"CompactionGarbageBlockLimit,omitempty"`
	// User data may be dumped on some monitoring pages if this flag is set.
	// See https://st.yandex-team.ru/NBS-1726#5fd39472aa62c1459c7287cb
	UserDataDebugDumpAllowed *bool `protobuf:"varint,175,opt,name=UserDataDebugDumpAllowed" json:"UserDataDebugDumpAllowed,omitempty"`
	// Fresh channels configuration.
	HDDFreshChannelPoolKind    *string `protobuf:"bytes,176,opt,name=HDDFreshChannelPoolKind" json:"HDDFreshChannelPoolKind,omitempty"`
	SSDFreshChannelPoolKind    *string `protobuf:"bytes,177,opt,name=SSDFreshChannelPoolKind" json:"SSDFreshChannelPoolKind,omitempty"`
	HybridFreshChannelPoolKind *string `protobuf:"bytes,178,opt,name=HybridFreshChannelPoolKind" json:"HybridFreshChannelPoolKind,omitempty"`
	// Number of fresh channels per partition.
	FreshChannelCount *uint32 `protobuf:"varint,179,opt,name=FreshChannelCount" json:"FreshChannelCount,omitempty"`
	// Enables fresh channel write requests.
	FreshChannelWriteRequestsEnabled *bool `protobuf:"varint,180,opt,name=FreshChannelWriteRequestsEnabled" json:"FreshChannelWriteRequestsEnabled,omitempty"`
	// Min timeout for nonrepl partition -> DA SSD requests.
	NonReplicatedMinRequestTimeoutSSD *uint32 `protobuf:"varint,181,opt,name=NonReplicatedMinRequestTimeoutSSD" json:"NonReplicatedMinRequestTimeoutSSD,omitempty"`
	// Max timeout for nonrepl partition -> DA SSD requests.
	NonReplicatedMaxRequestTimeoutSSD *uint32 `protobuf:"varint,182,opt,name=NonReplicatedMaxRequestTimeoutSSD" json:"NonReplicatedMaxRequestTimeoutSSD,omitempty"`
	// Max timed out state duration after which nr device is considered unavailable.
	MaxTimedOutDeviceStateDuration *uint32 `protobuf:"varint,183,opt,name=MaxTimedOutDeviceStateDuration" json:"MaxTimedOutDeviceStateDuration,omitempty"`
	// Run GC soft barriers for all channels in tablet history (v2 only).
	RunV2SoftGcAtStartup *bool `protobuf:"varint,185,opt,name=RunV2SoftGcAtStartup" json:"RunV2SoftGcAtStartup,omitempty"`
	// Lifetime of deleted checkpoint in checkpoints history.
	DeletedCheckpointHistoryLifetime *uint32 `protobuf:"varint,186,opt,name=DeletedCheckpointHistoryLifetime" json:"DeletedCheckpointHistoryLifetime,omitempty"`
	// Enables creation of multipartition volumes.
	MultipartitionVolumesEnabled *bool `protobuf:"varint,187,opt,name=MultipartitionVolumesEnabled" json:"MultipartitionVolumesEnabled,omitempty"`
	// Allow to start migration for non-replicated SSD drives.
	NonReplicatedMigrationStartAllowed *bool `protobuf:"varint,188,opt,name=NonReplicatedMigrationStartAllowed" json:"NonReplicatedMigrationStartAllowed,omitempty"`
	// Current migration index will be saved every N blocks.
	// Affects only nonrepl volumes.
	MigrationIndexCachingInterval *uint32 `protobuf:"varint,189,opt,name=MigrationIndexCachingInterval" json:"MigrationIndexCachingInterval,omitempty"`
	// Flush threshold for fresh blobs count in fresh channel.
	FreshBlobCountFlushThreshold *uint32 `protobuf:"varint,190,opt,name=FreshBlobCountFlushThreshold" json:"FreshBlobCountFlushThreshold,omitempty"`
	// Max bandwidth used by migration in MiB/s (actual bandwidth is x2 due to
	// the need to read and write).
	MaxMigrationBandwidth *uint32 `protobuf:"varint,191,opt,name=MaxMigrationBandwidth" json:"MaxMigrationBandwidth,omitempty"`
	// Expected DiskAgent size in AUs. Used to throttle migration proportionally
	// to the agent share allocated to the volume that's being migrated.
	ExpectedDiskAgentSize *uint32 `protobuf:"varint,192,opt,name=ExpectedDiskAgentSize" json:"ExpectedDiskAgentSize,omitempty"`
	// Overrides BytesPerPartition for network-ssd volumes.
	BytesPerPartitionSSD *uint64 `protobuf:"varint,193,opt,name=BytesPerPartitionSSD" json:"BytesPerPartitionSSD,omitempty"`
	// Placement group alert period.
	PlacementGroupAlertPeriod *uint32 `protobuf:"varint,195,opt,name=PlacementGroupAlertPeriod" json:"PlacementGroupAlertPeriod,omitempty"`
	// Allow to create load actor.
	EnableLoadActor *bool `protobuf:"varint,197,opt,name=EnableLoadActor" json:"EnableLoadActor,omitempty"`
	// CpuMatBenchNs system pool threshold for volume balancer.
	CpuMatBenchNsSystemThreshold *uint64 `protobuf:"varint,198,opt,name=CpuMatBenchNsSystemThreshold" json:"CpuMatBenchNsSystemThreshold,omitempty"`
	// CpuMatBenchNs user pool threshold for volume balancer.
	CpuMatBenchNsUserThreshold *uint64 `protobuf:"varint,199,opt,name=CpuMatBenchNsUserThreshold" json:"CpuMatBenchNsUserThreshold,omitempty"`
	// Disables NRD migration in volume actor.
	NonReplicatedVolumeMigrationDisabled *bool `protobuf:"varint,200,opt,name=NonReplicatedVolumeMigrationDisabled" json:"NonReplicatedVolumeMigrationDisabled,omitempty"`
	// Maximum number of migrations running in parallel.
	// Max value is selected between this limit and
	// MaxNonReplicatedDeviceMigrationPercentageInProgress * deviceCount.
	MaxNonReplicatedDeviceMigrationsInProgress *uint32 `protobuf:"varint,201,opt,name=MaxNonReplicatedDeviceMigrationsInProgress" json:"MaxNonReplicatedDeviceMigrationsInProgress,omitempty"`
	// Enables extra diagnostics by dumping block commitIds.
	DumpBlockCommitIdsIntoProfileLog *bool `protobuf:"varint,203,opt,name=DumpBlockCommitIdsIntoProfileLog" json:"DumpBlockCommitIdsIntoProfileLog,omitempty"`
	// Uses the first 4 bytes of the block as its digest.
	UseTestBlockDigestGenerator *bool `protobuf:"varint,204,opt,name=UseTestBlockDigestGenerator" json:"UseTestBlockDigestGenerator,omitempty"`
	// Enables conversion of rangeMap into mixedIndex for partition v2.
	EnableConversionIntoMixedIndexV2 *bool `protobuf:"varint,205,opt,name=EnableConversionIntoMixedIndexV2" json:"EnableConversionIntoMixedIndexV2,omitempty"`
	// Number of disks to be reported to YDB in a single request.
	StatsUploadDiskCount *uint32 `protobuf:"varint,206,opt,name=StatsUploadDiskCount" json:"StatsUploadDiskCount,omitempty"`
	// Retry timeout for YDB stats.
	StatsUploadRetryTimeout *uint32 `protobuf:"varint,207,opt,name=StatsUploadRetryTimeout" json:"StatsUploadRetryTimeout,omitempty"`
	// Number of volume history records per monitoring page.
	VolumeHistoryCacheSize *uint32 `protobuf:"varint,208,opt,name=VolumeHistoryCacheSize" json:"VolumeHistoryCacheSize,omitempty"`
	// Start all mounted volumes remotely.
	RemoteMountOnly *bool `protobuf:"varint,210,opt,name=RemoteMountOnly" json:"RemoteMountOnly,omitempty"`
	// Max number of volumes started locally.
	MaxLocalVolumes *uint32 `protobuf:"varint,211,opt,name=MaxLocalVolumes" json:"MaxLocalVolumes,omitempty"`
	// Flush threshold for fresh blob byte count.
	FreshBlobByteCountFlushThreshold *uint32 `protobuf:"varint,212,opt,name=FreshBlobByteCountFlushThreshold" json:"FreshBlobByteCountFlushThreshold,omitempty"`
	// Max block count in one transaction for updating logicalUsedBlocks.
	LogicalUsedBlocksUpdateBlockCount *uint32 `protobuf:"varint,213,opt,name=LogicalUsedBlocksUpdateBlockCount" json:"LogicalUsedBlocksUpdateBlockCount,omitempty"`
	// Grace period before making next attempt to update volume config
	DiskRegistryVolumeConfigUpdatePeriod *uint32 `protobuf:"varint,214,opt,name=DiskRegistryVolumeConfigUpdatePeriod" json:"DiskRegistryVolumeConfigUpdatePeriod,omitempty"`
	// Enables extra diagnostics by dumping blob updates.
	DumpBlobUpdatesIntoProfileLog *bool `protobuf:"varint,215,opt,name=DumpBlobUpdatesIntoProfileLog" json:"DumpBlobUpdatesIntoProfileLog,omitempty"`
	// Reassign request retry timeout in milliseconds.
	ReassignRequestRetryTimeout *uint32 `protobuf:"varint,216,opt,name=ReassignRequestRetryTimeout" json:"ReassignRequestRetryTimeout,omitempty"`
	// Parameters used for calculating the metrics
	// Maximum bandwidth on group
	// for SSD
	CommonSSDPoolKind         *string `protobuf:"bytes,217,opt,name=CommonSSDPoolKind" json:"CommonSSDPoolKind,omitempty"`
	MaxSSDGroupWriteIops      *uint64 `protobuf:"varint,218,opt,name=MaxSSDGroupWriteIops" json:"MaxSSDGroupWriteIops,omitempty"`
	MaxSSDGroupWriteBandwidth *uint64 `protobuf:"varint,219,opt,name=MaxSSDGroupWriteBandwidth" json:"MaxSSDGroupWriteBandwidth,omitempty"`
	MaxSSDGroupReadIops       *uint64 `protobuf:"varint,220,opt,name=MaxSSDGroupReadIops" json:"MaxSSDGroupReadIops,omitempty"`
	MaxSSDGroupReadBandwidth  *uint64 `protobuf:"varint,221,opt,name=MaxSSDGroupReadBandwidth" json:"MaxSSDGroupReadBandwidth,omitempty"`
	// for HDD
	CommonHDDPoolKind         *string `protobuf:"bytes,222,opt,name=CommonHDDPoolKind" json:"CommonHDDPoolKind,omitempty"`
	MaxHDDGroupWriteIops      *uint64 `protobuf:"varint,223,opt,name=MaxHDDGroupWriteIops" json:"MaxHDDGroupWriteIops,omitempty"`
	MaxHDDGroupWriteBandwidth *uint64 `protobuf:"varint,224,opt,name=MaxHDDGroupWriteBandwidth" json:"MaxHDDGroupWriteBandwidth,omitempty"`
	MaxHDDGroupReadIops       *uint64 `protobuf:"varint,225,opt,name=MaxHDDGroupReadIops" json:"MaxHDDGroupReadIops,omitempty"`
	MaxHDDGroupReadBandwidth  *uint64 `protobuf:"varint,226,opt,name=MaxHDDGroupReadBandwidth" json:"MaxHDDGroupReadBandwidth,omitempty"`
	// for OverlayDisk
	CommonOverlayPrefixPoolKind *string `protobuf:"bytes,227,opt,name=CommonOverlayPrefixPoolKind" json:"CommonOverlayPrefixPoolKind,omitempty"`
	// Enables mixed index cache for partition v1.
	MixedIndexCacheV1Enabled *bool `protobuf:"varint,228,opt,name=MixedIndexCacheV1Enabled" json:"MixedIndexCacheV1Enabled,omitempty"`
	// Maximum number of compaction ranges to cache for partition v1 network-ssd.
	MixedIndexCacheV1SizeSSD *uint32 `protobuf:"varint,229,opt,name=MixedIndexCacheV1SizeSSD" json:"MixedIndexCacheV1SizeSSD,omitempty"`
	// Size of allocation unit for mirror2 SSD drives (in GiB).
	AllocationUnitMirror2SSD *uint32 `protobuf:"varint,230,opt,name=AllocationUnitMirror2SSD" json:"AllocationUnitMirror2SSD,omitempty"`
	// Performance per allocation unit for mirror2 volumes.
	Mirror2SSDUnitReadBandwidth  *uint32 `protobuf:"varint,231,opt,name=Mirror2SSDUnitReadBandwidth" json:"Mirror2SSDUnitReadBandwidth,omitempty"`   // in MiB/s
	Mirror2SSDUnitWriteBandwidth *uint32 `protobuf:"varint,232,opt,name=Mirror2SSDUnitWriteBandwidth" json:"Mirror2SSDUnitWriteBandwidth,omitempty"` // in MiB/s
	Mirror2SSDMaxReadBandwidth   *uint32 `protobuf:"varint,233,opt,name=Mirror2SSDMaxReadBandwidth" json:"Mirror2SSDMaxReadBandwidth,omitempty"`     // in MiB/s
	Mirror2SSDMaxWriteBandwidth  *uint32 `protobuf:"varint,234,opt,name=Mirror2SSDMaxWriteBandwidth" json:"Mirror2SSDMaxWriteBandwidth,omitempty"`   // in MiB/s
	Mirror2SSDUnitReadIops       *uint32 `protobuf:"varint,235,opt,name=Mirror2SSDUnitReadIops" json:"Mirror2SSDUnitReadIops,omitempty"`
	Mirror2SSDUnitWriteIops      *uint32 `protobuf:"varint,236,opt,name=Mirror2SSDUnitWriteIops" json:"Mirror2SSDUnitWriteIops,omitempty"`
	Mirror2SSDMaxReadIops        *uint32 `protobuf:"varint,237,opt,name=Mirror2SSDMaxReadIops" json:"Mirror2SSDMaxReadIops,omitempty"`
	Mirror2SSDMaxWriteIops       *uint32 `protobuf:"varint,238,opt,name=Mirror2SSDMaxWriteIops" json:"Mirror2SSDMaxWriteIops,omitempty"`
	// Number of replicas for mirror2 disks.
	Mirror2DiskReplicaCount        *uint32 `protobuf:"varint,239,opt,name=Mirror2DiskReplicaCount" json:"Mirror2DiskReplicaCount,omitempty"`
	MaxReadBlobErrorsBeforeSuicide *uint32 `protobuf:"varint,240,opt,name=MaxReadBlobErrorsBeforeSuicide" json:"MaxReadBlobErrorsBeforeSuicide,omitempty"`
	// Interval between throttler state updates in local db (in milliseconds).
	ThrottlerStateWriteInterval *uint32 `protobuf:"varint,241,opt,name=ThrottlerStateWriteInterval" json:"ThrottlerStateWriteInterval,omitempty"`
	// Reject mount instead of trying to start volume locally
	// when AddClient request times out.
	RejectMountOnAddClientTimeout *bool `protobuf:"varint,242,opt,name=RejectMountOnAddClientTimeout" json:"RejectMountOnAddClientTimeout,omitempty"`
	// Timeout for notify disks request (in milliseconds).
	NonReplicatedVolumeNotificationTimeout *uint32 `protobuf:"varint,243,opt,name=NonReplicatedVolumeNotificationTimeout" json:"NonReplicatedVolumeNotificationTimeout,omitempty"`
	// Enables persistent backup for tablet boot infos.
	TabletBootInfoBackupFilePath *string `protobuf:"bytes,244,opt,name=TabletBootInfoBackupFilePath" json:"TabletBootInfoBackupFilePath,omitempty"`
	// In fallback mode, all requests to Hive are served from backup.
	HiveProxyFallbackMode *bool `protobuf:"varint,245,opt,name=HiveProxyFallbackMode" json:"HiveProxyFallbackMode,omitempty"`
	// Enables persistent backup for volume path descriptions.
	PathDescriptionBackupFilePath *string `protobuf:"bytes,246,opt,name=PathDescriptionBackupFilePath" json:"PathDescriptionBackupFilePath,omitempty"`
	// In fallback mode, all requests to SchemeShard are served from backup.
	SSProxyFallbackMode *bool `protobuf:"varint,247,opt,name=SSProxyFallbackMode" json:"SSProxyFallbackMode,omitempty"`
	// Max acceptable number of cpus we are waiting for (measured in %).
	// If excceeded. balancer starts pushing volumes to svms.
	CpuLackThreshold *uint32 `protobuf:"varint,248,opt,name=CpuLackThreshold" json:"CpuLackThreshold,omitempty"`
	// Initial pull timeout for preempted volumes.
	InitialPullDelay *uint32 `protobuf:"varint,249,opt,name=InitialPullDelay" json:"InitialPullDelay,omitempty"`
	// Rdma port @ DiskAgent.
	RdmaTargetPort *uint32 `protobuf:"varint,251,opt,name=RdmaTargetPort" json:"RdmaTargetPort,omitempty"`
	// Use rdma for main NRD datapath.
	UseNonreplicatedRdmaActor *bool `protobuf:"varint,252,opt,name=UseNonreplicatedRdmaActor" json:"UseNonreplicatedRdmaActor,omitempty"`
	// Size of allocation unit for mirror3 SSD drives (in GiB).
	AllocationUnitMirror3SSD *uint32 `protobuf:"varint,253,opt,name=AllocationUnitMirror3SSD" json:"AllocationUnitMirror3SSD,omitempty"`
	// Performance per allocation unit for mirror3 volumes.
	Mirror3SSDUnitReadBandwidth  *uint32 `protobuf:"varint,254,opt,name=Mirror3SSDUnitReadBandwidth" json:"Mirror3SSDUnitReadBandwidth,omitempty"`   // in MiB/s
	Mirror3SSDUnitWriteBandwidth *uint32 `protobuf:"varint,255,opt,name=Mirror3SSDUnitWriteBandwidth" json:"Mirror3SSDUnitWriteBandwidth,omitempty"` // in MiB/s
	Mirror3SSDMaxReadBandwidth   *uint32 `protobuf:"varint,256,opt,name=Mirror3SSDMaxReadBandwidth" json:"Mirror3SSDMaxReadBandwidth,omitempty"`     // in MiB/s
	Mirror3SSDMaxWriteBandwidth  *uint32 `protobuf:"varint,257,opt,name=Mirror3SSDMaxWriteBandwidth" json:"Mirror3SSDMaxWriteBandwidth,omitempty"`   // in MiB/s
	Mirror3SSDUnitReadIops       *uint32 `protobuf:"varint,258,opt,name=Mirror3SSDUnitReadIops" json:"Mirror3SSDUnitReadIops,omitempty"`
	Mirror3SSDUnitWriteIops      *uint32 `protobuf:"varint,259,opt,name=Mirror3SSDUnitWriteIops" json:"Mirror3SSDUnitWriteIops,omitempty"`
	Mirror3SSDMaxReadIops        *uint32 `protobuf:"varint,260,opt,name=Mirror3SSDMaxReadIops" json:"Mirror3SSDMaxReadIops,omitempty"`
	Mirror3SSDMaxWriteIops       *uint32 `protobuf:"varint,261,opt,name=Mirror3SSDMaxWriteIops" json:"Mirror3SSDMaxWriteIops,omitempty"`
	// Number of replicas for mirror3 disks.
	Mirror3DiskReplicaCount *uint32 `protobuf:"varint,262,opt,name=Mirror3DiskReplicaCount" json:"Mirror3DiskReplicaCount,omitempty"`
	// Timeout for secure erase (in milliseconds).
	NonReplicatedSecureEraseTimeout *uint32 `protobuf:"varint,263,opt,name=NonReplicatedSecureEraseTimeout" json:"NonReplicatedSecureEraseTimeout,omitempty"`
	// Number of ranges to process in a single Compaction run.
	CompactionRangeCountPerRun *uint32 `protobuf:"varint,264,opt,name=CompactionRangeCountPerRun" json:"CompactionRangeCountPerRun,omitempty"`
	// Specifies whether to use CompactionRangeCountPerRun.
	BatchCompactionEnabled *bool `protobuf:"varint,265,opt,name=BatchCompactionEnabled" json:"BatchCompactionEnabled,omitempty"`
	// Timeout before allowing infra to withdraw our unavailable agents.
	NonReplicatedInfraUnavailableAgentTimeout *uint32 `protobuf:"varint,266,opt,name=NonReplicatedInfraUnavailableAgentTimeout" json:"NonReplicatedInfraUnavailableAgentTimeout,omitempty"`
	// Use rdma in volumes by default.
	UseRdma *bool `protobuf:"varint,267,opt,name=UseRdma" json:"UseRdma,omitempty"`
	// Hive min timeout for tablet boot requests.
	MinExternalBootRequestTimeout *uint32 `protobuf:"varint,268,opt,name=MinExternalBootRequestTimeout" json:"MinExternalBootRequestTimeout,omitempty"`
	// Hive timeout increment for tablet boot requests.
	ExternalBootRequestTimeoutIncrement *uint32 `protobuf:"varint,269,opt,name=ExternalBootRequestTimeoutIncrement" json:"ExternalBootRequestTimeoutIncrement,omitempty"`
	// Hive max timeout for tablet boot requests.
	MaxExternalBootRequestTimeout *uint32 `protobuf:"varint,270,opt,name=MaxExternalBootRequestTimeout" json:"MaxExternalBootRequestTimeout,omitempty"`
	// Max timeout for agent to restore connection (in milliseconds).
	NonReplicatedAgentMaxTimeout *uint32 `protobuf:"varint,271,opt,name=NonReplicatedAgentMaxTimeout" json:"NonReplicatedAgentMaxTimeout,omitempty"`
	// The time interval after which one agent disconnect is completely
	// recovered in the dynamic reject timeout multiplier.
	NonReplicatedAgentDisconnectRecoveryInterval *uint32 `protobuf:"varint,272,opt,name=NonReplicatedAgentDisconnectRecoveryInterval" json:"NonReplicatedAgentDisconnectRecoveryInterval,omitempty"`
	// The multiplier that controls the growth rate of the dynamic agent reject
	// timeout.
	NonReplicatedAgentTimeoutGrowthFactor *float64 `protobuf:"fixed64,273,opt,name=NonReplicatedAgentTimeoutGrowthFactor" json:"NonReplicatedAgentTimeoutGrowthFactor,omitempty"`
	// Do not suspend new non default (local ssd etc) devices.
	NonReplicatedDontSuspendDevices *bool `protobuf:"varint,274,opt,name=NonReplicatedDontSuspendDevices" json:"NonReplicatedDontSuspendDevices,omitempty"`
	// Timeout increment for resending AddClient during mount.
	AddClientRetryTimeoutIncrement *uint32 `protobuf:"varint,275,opt,name=AddClientRetryTimeoutIncrement" json:"AddClientRetryTimeoutIncrement,omitempty"`
	// Enables blob patching during compaction.
	BlobPatchingEnabled *bool `protobuf:"varint,276,opt,name=BlobPatchingEnabled" json:"BlobPatchingEnabled,omitempty"`
	// The number of operations into which the DR
	// will split the restore transaction.
	DiskRegistrySplitTransactionCounter *uint32 `protobuf:"varint,277,opt,name=DiskRegistrySplitTransactionCounter" json:"DiskRegistrySplitTransactionCounter,omitempty"`
	// The time of making backups disk registry in milliseconds.
	DiskRegistryBackupPeriod *uint64 `protobuf:"varint,278,opt,name=DiskRegistryBackupPeriod" json:"DiskRegistryBackupPeriod,omitempty"`
	// Folder for disk registry backups.
	DiskRegistryBackupDirPath *string `protobuf:"bytes,279,opt,name=DiskRegistryBackupDirPath" json:"DiskRegistryBackupDirPath,omitempty"`
	// Expected client backoff timeout increment in milliseconds - used to
	// calculate some internal timeouts.
	ExpectedClientBackoffIncrement *uint32 `protobuf:"varint,280,opt,name=ExpectedClientBackoffIncrement" json:"ExpectedClientBackoffIncrement,omitempty"`
	// Maximum number of pending deallocation requests per one disk.
	MaxNonReplicatedDiskDeallocationRequests *uint32 `protobuf:"varint,281,opt,name=MaxNonReplicatedDiskDeallocationRequests" json:"MaxNonReplicatedDiskDeallocationRequests,omitempty"`
	// Lifetime of objects in nonrepl metrics cache in milliseconds.
	DiskRegistryMetricsCachePeriod *uint64 `protobuf:"varint,282,opt,name=DiskRegistryMetricsCachePeriod" json:"DiskRegistryMetricsCachePeriod,omitempty"` // deprecated
	// Value for the 'host' label.
	DiskRegistryCountersHost *string `protobuf:"bytes,283,opt,name=DiskRegistryCountersHost" json:"DiskRegistryCountersHost,omitempty"`
	// Maximum allowed fresh byte count after which we start to reject writes.
	FreshByteCountHardLimit *uint32 `protobuf:"varint,284,opt,name=FreshByteCountHardLimit" json:"FreshByteCountHardLimit,omitempty"`
	// Interval to postpone volume push/pull.
	BalancerActionDelayInterval *uint32 `protobuf:"varint,285,opt,name=BalancerActionDelayInterval" json:"BalancerActionDelayInterval,omitempty"`
	// Enable resync feature for mirrored partitions.
	UseMirrorResync *bool `protobuf:"varint,286,opt,name=UseMirrorResync" json:"UseMirrorResync,omitempty"`
	// Force resync start for mirrored partitions.
	ForceMirrorResync *bool `protobuf:"varint,287,opt,name=ForceMirrorResync" json:"ForceMirrorResync,omitempty"`
	// Current resync index will be saved every N blocks.
	// Affects only mirror volumes.
	ResyncIndexCachingInterval *uint32 `protobuf:"varint,288,opt,name=ResyncIndexCachingInterval" json:"ResyncIndexCachingInterval,omitempty"`
	// Resync will start upon AddClient / volume reboot after the specified
	// period of client inactivity in milliseconds.
	// Affects only mirror volumes.
	ResyncAfterClientInactivityInterval *uint32 `protobuf:"varint,289,opt,name=ResyncAfterClientInactivityInterval" json:"ResyncAfterClientInactivityInterval,omitempty"`
	// File to store the list of volumes preempted from monitoring.
	ManuallyPreemptedVolumesFile *string `protobuf:"bytes,290,opt,name=ManuallyPreemptedVolumesFile" json:"ManuallyPreemptedVolumesFile,omitempty"`
	// Periodicity of volume liveness check in ManuallyPreemptedVolumesFile in
	// milliseconds.
	ManuallyPreemptedVolumeLivenessCheckPeriod *uint64 `protobuf:"varint,291,opt,name=ManuallyPreemptedVolumeLivenessCheckPeriod" json:"ManuallyPreemptedVolumeLivenessCheckPeriod,omitempty"`
	// Half-decay interval for cumulative load counters used for balancing in
	// the discovery component (in milliseconds).
	PingMetricsHalfDecayInterval *uint32 `protobuf:"varint,292,opt,name=PingMetricsHalfDecayInterval" json:"PingMetricsHalfDecayInterval,omitempty"`
	// Disable manually preempted volumes tracking. Used during
	// nbs restart for NBS2.
	DisableManuallyPreemptedVolumesTracking *bool `protobuf:"varint,293,opt,name=DisableManuallyPreemptedVolumesTracking" json:"DisableManuallyPreemptedVolumesTracking,omitempty"`
	// Disable starting partitions for gc at volume start
	DisableStartPartitionsForGc *bool `protobuf:"varint,294,opt,name=DisableStartPartitionsForGc" json:"DisableStartPartitionsForGc,omitempty"`
	// Enables adding of unconfirmed blobs to speed up writing.
	AddingUnconfirmedBlobsEnabled *bool `protobuf:"varint,297,opt,name=AddingUnconfirmedBlobsEnabled" json:"AddingUnconfirmedBlobsEnabled,omitempty"`
	// Blob compression experiment params. See NBS-3949.
	BlobCompressionRate  *uint32 `protobuf:"varint,298,opt,name=BlobCompressionRate" json:"BlobCompressionRate,omitempty"`
	BlobCompressionCodec *string `protobuf:"bytes,299,opt,name=BlobCompressionCodec" json:"BlobCompressionCodec,omitempty"`
	// If set, writes will be additionally throttled by disk space score
	// backpressure feature.
	DiskSpaceScoreThrottlingEnabled *bool `protobuf:"varint,300,opt,name=DiskSpaceScoreThrottlingEnabled" json:"DiskSpaceScoreThrottlingEnabled,omitempty"`
	// Allow to start migration for mirrored SSD drives.
	MirroredMigrationStartAllowed *bool `protobuf:"varint,301,opt,name=MirroredMigrationStartAllowed" json:"MirroredMigrationStartAllowed,omitempty"`
	// Validate S/N
	SerialNumberValidationEnabled *bool `protobuf:"varint,302,opt,name=SerialNumberValidationEnabled" json:"SerialNumberValidationEnabled,omitempty"`
	// List of FQDNs of known spare nodes.
	KnownSpareNodes []string `protobuf:"bytes,303,rep,name=KnownSpareNodes" json:"KnownSpareNodes,omitempty"`
	// Probability (0 .. 100) of being the spare node.
	SpareNodeProbability *uint32 `protobuf:"varint,304,opt,name=SpareNodeProbability" json:"SpareNodeProbability,omitempty"`
	// Min percentage of reassignable channels after which reassign requests
	// are sent. Does not apply if writes are not allowed because of channel
	// flags.
	ReassignChannelsPercentageThreshold *uint32 `protobuf:"varint,305,opt,name=ReassignChannelsPercentageThreshold" json:"ReassignChannelsPercentageThreshold,omitempty"`
	// Max diff percentage for blob patching
	MaxDiffPercentageForBlobPatching *uint32 `protobuf:"varint,306,opt,name=MaxDiffPercentageForBlobPatching" json:"MaxDiffPercentageForBlobPatching,omitempty"`
	// DiskRegistry allows usage of automatically replaced devices after this
	// period of time.
	AutomaticallyReplacedDevicesFreezePeriod *uint32 `protobuf:"varint,307,opt,name=AutomaticallyReplacedDevicesFreezePeriod" json:"AutomaticallyReplacedDevicesFreezePeriod,omitempty"` // in ms
	// Defines the rejection behavior for overlapped requests from the past.
	RejectLateRequestsAtDiskAgentEnabled *bool `protobuf:"varint,308,opt,name=RejectLateRequestsAtDiskAgentEnabled" json:"RejectLateRequestsAtDiskAgentEnabled,omitempty"`
	// Attached disk destruction is allowed after this period of client inactivity (ms).
	AttachedDiskDestructionTimeout *uint32 `protobuf:"varint,309,opt,name=AttachedDiskDestructionTimeout" json:"AttachedDiskDestructionTimeout,omitempty"`
	// Assign unique identifiers to all zero and write requests in TVolumeActor.
	AssignIdToWriteAndZeroRequestsEnabled *bool `protobuf:"varint,310,opt,name=AssignIdToWriteAndZeroRequestsEnabled" json:"AssignIdToWriteAndZeroRequestsEnabled,omitempty"`
	// MaxBlobsPerDisk will be proportional to the disk size.
	SSDMaxBlobsPerUnit *uint32 `protobuf:"varint,314,opt,name=SSDMaxBlobsPerUnit" json:"SSDMaxBlobsPerUnit,omitempty"`
	HDDMaxBlobsPerUnit *uint32 `protobuf:"varint,315,opt,name=HDDMaxBlobsPerUnit" json:"HDDMaxBlobsPerUnit,omitempty"`
	// Cleanup interval for disk registry param overrides for agents.
	AgentListExpiredParamsCleanupInterval *uint32 `protobuf:"varint,316,opt,name=AgentListExpiredParamsCleanupInterval" json:"AgentListExpiredParamsCleanupInterval,omitempty"`
	// Size of allocation unit for non-replicated HDD drives (in GiB).
	AllocationUnitNonReplicatedHDD *uint32 `protobuf:"varint,317,opt,name=AllocationUnitNonReplicatedHDD" json:"AllocationUnitNonReplicatedHDD,omitempty"`
	// Performance per allocation unit for nonreplicated volumes.
	NonReplicatedHDDUnitReadBandwidth  *uint32 `protobuf:"varint,318,opt,name=NonReplicatedHDDUnitReadBandwidth" json:"NonReplicatedHDDUnitReadBandwidth,omitempty"`   // in MiB/s
	NonReplicatedHDDUnitWriteBandwidth *uint32 `protobuf:"varint,319,opt,name=NonReplicatedHDDUnitWriteBandwidth" json:"NonReplicatedHDDUnitWriteBandwidth,omitempty"` // in MiB/s
	NonReplicatedHDDMaxReadBandwidth   *uint32 `protobuf:"varint,320,opt,name=NonReplicatedHDDMaxReadBandwidth" json:"NonReplicatedHDDMaxReadBandwidth,omitempty"`     // in MiB/s
	NonReplicatedHDDMaxWriteBandwidth  *uint32 `protobuf:"varint,321,opt,name=NonReplicatedHDDMaxWriteBandwidth" json:"NonReplicatedHDDMaxWriteBandwidth,omitempty"`   // in MiB/s
	NonReplicatedHDDUnitReadIops       *uint32 `protobuf:"varint,322,opt,name=NonReplicatedHDDUnitReadIops" json:"NonReplicatedHDDUnitReadIops,omitempty"`
	NonReplicatedHDDUnitWriteIops      *uint32 `protobuf:"varint,323,opt,name=NonReplicatedHDDUnitWriteIops" json:"NonReplicatedHDDUnitWriteIops,omitempty"`
	NonReplicatedHDDMaxReadIops        *uint32 `protobuf:"varint,324,opt,name=NonReplicatedHDDMaxReadIops" json:"NonReplicatedHDDMaxReadIops,omitempty"`
	NonReplicatedHDDMaxWriteIops       *uint32 `protobuf:"varint,325,opt,name=NonReplicatedHDDMaxWriteIops" json:"NonReplicatedHDDMaxWriteIops,omitempty"`
	// DiskRegistry/Agent pool name to use for nonreplicated hdd disks.
	NonReplicatedHDDPoolName *string `protobuf:"bytes,326,opt,name=NonReplicatedHDDPoolName" json:"NonReplicatedHDDPoolName,omitempty"`
	// We will allow agent/device maintenance if it breaks no more than this
	// number of placement group partitions in each group.
	MaxBrokenHddPlacementGroupPartitionsAfterDeviceRemoval *uint32 `protobuf:"varint,327,opt,name=MaxBrokenHddPlacementGroupPartitionsAfterDeviceRemoval" json:"MaxBrokenHddPlacementGroupPartitionsAfterDeviceRemoval,omitempty"`
	// Sets maximum number of automatic device replacements per hour. If this
	// limit is reached no more automatic replacements are going to happen -
	// instead the diskId + deviceId pairs will be logged and a critical event
	// will be reported. Current replacement rate is reset upon DiskRegistry
	// tablet restart.
	MaxAutomaticDeviceReplacementsPerHour *uint32 `protobuf:"varint,328,opt,name=MaxAutomaticDeviceReplacementsPerHour" json:"MaxAutomaticDeviceReplacementsPerHour,omitempty"`
	// Tenant hive tablet id different from root to be used by hive proxy.
	// Should be configured once and for the lifetime of the cluster.
	TenantHiveTabletId *uint64 `protobuf:"varint,329,opt,name=TenantHiveTabletId" json:"TenantHiveTabletId,omitempty"`
	// Limits the number of dirty devices per DeviceName that are erased in
	// parallel.
	MaxDevicesToErasePerDeviceNameForDefaultPoolKind *uint32 `protobuf:"varint,330,opt,name=MaxDevicesToErasePerDeviceNameForDefaultPoolKind" json:"MaxDevicesToErasePerDeviceNameForDefaultPoolKind,omitempty"`
	MaxDevicesToErasePerDeviceNameForLocalPoolKind   *uint32 `protobuf:"varint,331,opt,name=MaxDevicesToErasePerDeviceNameForLocalPoolKind" json:"MaxDevicesToErasePerDeviceNameForLocalPoolKind,omitempty"`
	MaxDevicesToErasePerDeviceNameForGlobalPoolKind  *uint32 `protobuf:"varint,332,opt,name=MaxDevicesToErasePerDeviceNameForGlobalPoolKind" json:"MaxDevicesToErasePerDeviceNameForGlobalPoolKind,omitempty"`
	// Percentage for batch compaction size increasing
	CompactionCountPerRunIncreasingThreshold *uint32 `protobuf:"varint,333,opt,name=CompactionCountPerRunIncreasingThreshold" json:"CompactionCountPerRunIncreasingThreshold,omitempty"`
	// Percentage for batch compaction size decreasing
	CompactionCountPerRunDecreasingThreshold *uint32 `protobuf:"varint,334,opt,name=CompactionCountPerRunDecreasingThreshold" json:"CompactionCountPerRunDecreasingThreshold,omitempty"`
	// Max number of ranges to process in a single Compaction run
	MaxCompactionRangeCountPerRun *uint32 `protobuf:"varint,335,opt,name=MaxCompactionRangeCountPerRun" json:"MaxCompactionRangeCountPerRun,omitempty"`
	// Period of compaction changing (in ms)
	CompactionCountPerRunChangingPeriod *uint32 `protobuf:"varint,336,opt,name=CompactionCountPerRunChangingPeriod" json:"CompactionCountPerRunChangingPeriod,omitempty"`
	// Timeout in seconds before switching all disks associated
	// with the disconnected agent to read only mode
	NonReplicatedDiskSwitchToReadOnlyTimeout *uint32 `protobuf:"varint,337,opt,name=NonReplicatedDiskSwitchToReadOnlyTimeout" json:"NonReplicatedDiskSwitchToReadOnlyTimeout,omitempty"`
	// Min timeout for nonrepl partition -> DA HDD requests.
	NonReplicatedMinRequestTimeoutHDD *uint32 `protobuf:"varint,338,opt,name=NonReplicatedMinRequestTimeoutHDD" json:"NonReplicatedMinRequestTimeoutHDD,omitempty"`
	// Max timeout for nonrepl partition -> DA HDD requests.
	NonReplicatedMaxRequestTimeoutHDD *uint32 `protobuf:"varint,339,opt,name=NonReplicatedMaxRequestTimeoutHDD" json:"NonReplicatedMaxRequestTimeoutHDD,omitempty"`
	// Placeholders for legacy params that are still used in configs.
	NonReplicatedMinRequestTimeout   *uint32 `protobuf:"varint,340,opt,name=NonReplicatedMinRequestTimeout" json:"NonReplicatedMinRequestTimeout,omitempty"`
	NonReplicatedMaxRequestTimeout   *uint32 `protobuf:"varint,341,opt,name=NonReplicatedMaxRequestTimeout" json:"NonReplicatedMaxRequestTimeout,omitempty"`
	MaxChangedBlocksRangeBlocksCount *uint64 `protobuf:"varint,342,opt,name=MaxChangedBlocksRangeBlocksCount" json:"MaxChangedBlocksRangeBlocksCount,omitempty"`
	// Maximum number of migrations running in parallel as a percentage of the
	// devices belonging to the same pool as the source device.
	// Max value is selected between this limit and
	// MaxNonReplicatedDeviceMigrationsInProgress.
	MaxNonReplicatedDeviceMigrationPercentageInProgress *uint32 `protobuf:"varint,343,opt,name=MaxNonReplicatedDeviceMigrationPercentageInProgress" json:"MaxNonReplicatedDeviceMigrationPercentageInProgress,omitempty"`
}

func (x *TStorageServiceConfig) Reset() {
	*x = TStorageServiceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_blockstore_config_storage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TStorageServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TStorageServiceConfig) ProtoMessage() {}

func (x *TStorageServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_blockstore_config_storage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TStorageServiceConfig.ProtoReflect.Descriptor instead.
func (*TStorageServiceConfig) Descriptor() ([]byte, []int) {
	return file_cloud_blockstore_config_storage_proto_rawDescGZIP(), []int{0}
}

func (x *TStorageServiceConfig) GetSchemeShardDir() string {
	if x != nil && x.SchemeShardDir != nil {
		return *x.SchemeShardDir
	}
	return ""
}

func (x *TStorageServiceConfig) GetWriteBlobThreshold() uint32 {
	if x != nil && x.WriteBlobThreshold != nil {
		return *x.WriteBlobThreshold
	}
	return 0
}

func (x *TStorageServiceConfig) GetFlushThreshold() uint32 {
	if x != nil && x.FlushThreshold != nil {
		return *x.FlushThreshold
	}
	return 0
}

func (x *TStorageServiceConfig) GetCleanupThreshold() uint32 {
	if x != nil && x.CleanupThreshold != nil {
		return *x.CleanupThreshold
	}
	return 0
}

func (x *TStorageServiceConfig) GetCollectGarbageThreshold() uint32 {
	if x != nil && x.CollectGarbageThreshold != nil {
		return *x.CollectGarbageThreshold
	}
	return 0
}

func (x *TStorageServiceConfig) GetHiveLockExpireTimeout() uint32 {
	if x != nil && x.HiveLockExpireTimeout != nil {
		return *x.HiveLockExpireTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetTabletRebootCoolDownIncrement() uint32 {
	if x != nil && x.TabletRebootCoolDownIncrement != nil {
		return *x.TabletRebootCoolDownIncrement
	}
	return 0
}

func (x *TStorageServiceConfig) GetTabletRebootCoolDownMax() uint32 {
	if x != nil && x.TabletRebootCoolDownMax != nil {
		return *x.TabletRebootCoolDownMax
	}
	return 0
}

func (x *TStorageServiceConfig) GetDisableLocalService() bool {
	if x != nil && x.DisableLocalService != nil {
		return *x.DisableLocalService
	}
	return false
}

func (x *TStorageServiceConfig) GetPipeClientRetryCount() uint32 {
	if x != nil && x.PipeClientRetryCount != nil {
		return *x.PipeClientRetryCount
	}
	return 0
}

func (x *TStorageServiceConfig) GetPipeClientMinRetryTime() uint32 {
	if x != nil && x.PipeClientMinRetryTime != nil {
		return *x.PipeClientMinRetryTime
	}
	return 0
}

func (x *TStorageServiceConfig) GetPipeClientMaxRetryTime() uint32 {
	if x != nil && x.PipeClientMaxRetryTime != nil {
		return *x.PipeClientMaxRetryTime
	}
	return 0
}

func (x *TStorageServiceConfig) GetFlushBlobSizeThreshold() uint32 {
	if x != nil && x.FlushBlobSizeThreshold != nil {
		return *x.FlushBlobSizeThreshold
	}
	return 0
}

func (x *TStorageServiceConfig) GetCompactionRetryTimeout() uint32 {
	if x != nil && x.CompactionRetryTimeout != nil {
		return *x.CompactionRetryTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetUpdateBlobsThreshold() uint32 {
	if x != nil && x.UpdateBlobsThreshold != nil {
		return *x.UpdateBlobsThreshold
	}
	return 0
}

func (x *TStorageServiceConfig) GetCompactionGarbageThreshold() uint32 {
	if x != nil && x.CompactionGarbageThreshold != nil {
		return *x.CompactionGarbageThreshold
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxReadWriteRangeSize() uint64 {
	if x != nil && x.MaxReadWriteRangeSize != nil {
		return *x.MaxReadWriteRangeSize
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxBlobRangeSize() uint32 {
	if x != nil && x.MaxBlobRangeSize != nil {
		return *x.MaxBlobRangeSize
	}
	return 0
}

func (x *TStorageServiceConfig) GetInactiveClientsTimeout() uint32 {
	if x != nil && x.InactiveClientsTimeout != nil {
		return *x.InactiveClientsTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxIORequestsInFlight() uint32 {
	if x != nil && x.MaxIORequestsInFlight != nil {
		return *x.MaxIORequestsInFlight
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxIORequestsInFlightSSD() uint32 {
	if x != nil && x.MaxIORequestsInFlightSSD != nil {
		return *x.MaxIORequestsInFlightSSD
	}
	return 0
}

func (x *TStorageServiceConfig) GetAllowVersionInModifyScheme() bool {
	if x != nil && x.AllowVersionInModifyScheme != nil {
		return *x.AllowVersionInModifyScheme
	}
	return false
}

func (x *TStorageServiceConfig) GetServiceVersionInfo() string {
	if x != nil && x.ServiceVersionInfo != nil {
		return *x.ServiceVersionInfo
	}
	return ""
}

func (x *TStorageServiceConfig) GetAllocationUnitSSD() uint32 {
	if x != nil && x.AllocationUnitSSD != nil {
		return *x.AllocationUnitSSD
	}
	return 0
}

func (x *TStorageServiceConfig) GetAllocationUnitHDD() uint32 {
	if x != nil && x.AllocationUnitHDD != nil {
		return *x.AllocationUnitHDD
	}
	return 0
}

func (x *TStorageServiceConfig) GetThrottlingEnabled() bool {
	if x != nil && x.ThrottlingEnabled != nil {
		return *x.ThrottlingEnabled
	}
	return false
}

func (x *TStorageServiceConfig) GetThrottlingEnabledSSD() bool {
	if x != nil && x.ThrottlingEnabledSSD != nil {
		return *x.ThrottlingEnabledSSD
	}
	return false
}

func (x *TStorageServiceConfig) GetStatsUploadInterval() uint32 {
	if x != nil && x.StatsUploadInterval != nil {
		return *x.StatsUploadInterval
	}
	return 0
}

func (x *TStorageServiceConfig) GetThrottlingBurstPercentage() uint32 {
	if x != nil && x.ThrottlingBurstPercentage != nil {
		return *x.ThrottlingBurstPercentage
	}
	return 0
}

func (x *TStorageServiceConfig) GetThrottlingMaxPostponedWeight() uint32 {
	if x != nil && x.ThrottlingMaxPostponedWeight != nil {
		return *x.ThrottlingMaxPostponedWeight
	}
	return 0
}

func (x *TStorageServiceConfig) GetThrottlingBoostTime() uint32 {
	if x != nil && x.ThrottlingBoostTime != nil {
		return *x.ThrottlingBoostTime
	}
	return 0
}

func (x *TStorageServiceConfig) GetThrottlingBoostRefillTime() uint32 {
	if x != nil && x.ThrottlingBoostRefillTime != nil {
		return *x.ThrottlingBoostRefillTime
	}
	return 0
}

func (x *TStorageServiceConfig) GetThrottlingSSDBoostUnits() uint32 {
	if x != nil && x.ThrottlingSSDBoostUnits != nil {
		return *x.ThrottlingSSDBoostUnits
	}
	return 0
}

func (x *TStorageServiceConfig) GetThrottlingHDDBoostUnits() uint32 {
	if x != nil && x.ThrottlingHDDBoostUnits != nil {
		return *x.ThrottlingHDDBoostUnits
	}
	return 0
}

func (x *TStorageServiceConfig) GetSSDUnitReadBandwidth() uint32 {
	if x != nil && x.SSDUnitReadBandwidth != nil {
		return *x.SSDUnitReadBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetSSDUnitWriteBandwidth() uint32 {
	if x != nil && x.SSDUnitWriteBandwidth != nil {
		return *x.SSDUnitWriteBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetSSDMaxReadBandwidth() uint32 {
	if x != nil && x.SSDMaxReadBandwidth != nil {
		return *x.SSDMaxReadBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetSSDMaxWriteBandwidth() uint32 {
	if x != nil && x.SSDMaxWriteBandwidth != nil {
		return *x.SSDMaxWriteBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetSSDUnitReadIops() uint32 {
	if x != nil && x.SSDUnitReadIops != nil {
		return *x.SSDUnitReadIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetSSDUnitWriteIops() uint32 {
	if x != nil && x.SSDUnitWriteIops != nil {
		return *x.SSDUnitWriteIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetSSDMaxReadIops() uint32 {
	if x != nil && x.SSDMaxReadIops != nil {
		return *x.SSDMaxReadIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetSSDMaxWriteIops() uint32 {
	if x != nil && x.SSDMaxWriteIops != nil {
		return *x.SSDMaxWriteIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetHDDUnitReadBandwidth() uint32 {
	if x != nil && x.HDDUnitReadBandwidth != nil {
		return *x.HDDUnitReadBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetHDDUnitWriteBandwidth() uint32 {
	if x != nil && x.HDDUnitWriteBandwidth != nil {
		return *x.HDDUnitWriteBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetHDDMaxReadBandwidth() uint32 {
	if x != nil && x.HDDMaxReadBandwidth != nil {
		return *x.HDDMaxReadBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetHDDMaxWriteBandwidth() uint32 {
	if x != nil && x.HDDMaxWriteBandwidth != nil {
		return *x.HDDMaxWriteBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetHDDUnitReadIops() uint32 {
	if x != nil && x.HDDUnitReadIops != nil {
		return *x.HDDUnitReadIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetHDDUnitWriteIops() uint32 {
	if x != nil && x.HDDUnitWriteIops != nil {
		return *x.HDDUnitWriteIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetHDDMaxReadIops() uint32 {
	if x != nil && x.HDDMaxReadIops != nil {
		return *x.HDDMaxReadIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetHDDMaxWriteIops() uint32 {
	if x != nil && x.HDDMaxWriteIops != nil {
		return *x.HDDMaxWriteIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetAuthorizationMode() protos.EAuthorizationMode {
	if x != nil && x.AuthorizationMode != nil {
		return *x.AuthorizationMode
	}
	return protos.EAuthorizationMode(0)
}

func (x *TStorageServiceConfig) GetMaxThrottlerDelay() uint32 {
	if x != nil && x.MaxThrottlerDelay != nil {
		return *x.MaxThrottlerDelay
	}
	return 0
}

func (x *TStorageServiceConfig) GetCompactionScoreLimitForBackpressure() uint32 {
	if x != nil && x.CompactionScoreLimitForBackpressure != nil {
		return *x.CompactionScoreLimitForBackpressure
	}
	return 0
}

func (x *TStorageServiceConfig) GetCompactionScoreThresholdForBackpressure() uint32 {
	if x != nil && x.CompactionScoreThresholdForBackpressure != nil {
		return *x.CompactionScoreThresholdForBackpressure
	}
	return 0
}

func (x *TStorageServiceConfig) GetCompactionScoreFeatureMaxValue() uint32 {
	if x != nil && x.CompactionScoreFeatureMaxValue != nil {
		return *x.CompactionScoreFeatureMaxValue
	}
	return 0
}

func (x *TStorageServiceConfig) GetFreshByteCountLimitForBackpressure() uint32 {
	if x != nil && x.FreshByteCountLimitForBackpressure != nil {
		return *x.FreshByteCountLimitForBackpressure
	}
	return 0
}

func (x *TStorageServiceConfig) GetFreshByteCountThresholdForBackpressure() uint32 {
	if x != nil && x.FreshByteCountThresholdForBackpressure != nil {
		return *x.FreshByteCountThresholdForBackpressure
	}
	return 0
}

func (x *TStorageServiceConfig) GetFreshByteCountFeatureMaxValue() uint32 {
	if x != nil && x.FreshByteCountFeatureMaxValue != nil {
		return *x.FreshByteCountFeatureMaxValue
	}
	return 0
}

func (x *TStorageServiceConfig) GetCleanupQueueBytesLimitForBackpressure() uint64 {
	if x != nil && x.CleanupQueueBytesLimitForBackpressure != nil {
		return *x.CleanupQueueBytesLimitForBackpressure
	}
	return 0
}

func (x *TStorageServiceConfig) GetCleanupQueueBytesThresholdForBackpressure() uint64 {
	if x != nil && x.CleanupQueueBytesThresholdForBackpressure != nil {
		return *x.CleanupQueueBytesThresholdForBackpressure
	}
	return 0
}

func (x *TStorageServiceConfig) GetCleanupQueueBytesFeatureMaxValue() uint32 {
	if x != nil && x.CleanupQueueBytesFeatureMaxValue != nil {
		return *x.CleanupQueueBytesFeatureMaxValue
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxWriteCostMultiplier() uint32 {
	if x != nil && x.MaxWriteCostMultiplier != nil {
		return *x.MaxWriteCostMultiplier
	}
	return 0
}

func (x *TStorageServiceConfig) GetInitialAddClientTimeout() uint32 {
	if x != nil && x.InitialAddClientTimeout != nil {
		return *x.InitialAddClientTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetLocalStartAddClientTimeout() uint32 {
	if x != nil && x.LocalStartAddClientTimeout != nil {
		return *x.LocalStartAddClientTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetHDDSystemChannelPoolKind() string {
	if x != nil && x.HDDSystemChannelPoolKind != nil {
		return *x.HDDSystemChannelPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetHDDLogChannelPoolKind() string {
	if x != nil && x.HDDLogChannelPoolKind != nil {
		return *x.HDDLogChannelPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetHDDIndexChannelPoolKind() string {
	if x != nil && x.HDDIndexChannelPoolKind != nil {
		return *x.HDDIndexChannelPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetHDDMixedChannelPoolKind() string {
	if x != nil && x.HDDMixedChannelPoolKind != nil {
		return *x.HDDMixedChannelPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetHDDMergedChannelPoolKind() string {
	if x != nil && x.HDDMergedChannelPoolKind != nil {
		return *x.HDDMergedChannelPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetSSDSystemChannelPoolKind() string {
	if x != nil && x.SSDSystemChannelPoolKind != nil {
		return *x.SSDSystemChannelPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetSSDLogChannelPoolKind() string {
	if x != nil && x.SSDLogChannelPoolKind != nil {
		return *x.SSDLogChannelPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetSSDIndexChannelPoolKind() string {
	if x != nil && x.SSDIndexChannelPoolKind != nil {
		return *x.SSDIndexChannelPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetSSDMixedChannelPoolKind() string {
	if x != nil && x.SSDMixedChannelPoolKind != nil {
		return *x.SSDMixedChannelPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetSSDMergedChannelPoolKind() string {
	if x != nil && x.SSDMergedChannelPoolKind != nil {
		return *x.SSDMergedChannelPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetHybridSystemChannelPoolKind() string {
	if x != nil && x.HybridSystemChannelPoolKind != nil {
		return *x.HybridSystemChannelPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetHybridLogChannelPoolKind() string {
	if x != nil && x.HybridLogChannelPoolKind != nil {
		return *x.HybridLogChannelPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetHybridIndexChannelPoolKind() string {
	if x != nil && x.HybridIndexChannelPoolKind != nil {
		return *x.HybridIndexChannelPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetHybridMixedChannelPoolKind() string {
	if x != nil && x.HybridMixedChannelPoolKind != nil {
		return *x.HybridMixedChannelPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetHybridMergedChannelPoolKind() string {
	if x != nil && x.HybridMergedChannelPoolKind != nil {
		return *x.HybridMergedChannelPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetFolderId() string {
	if x != nil && x.FolderId != nil {
		return *x.FolderId
	}
	return ""
}

func (x *TStorageServiceConfig) GetAllocateSeparateMixedChannels() bool {
	if x != nil && x.AllocateSeparateMixedChannels != nil {
		return *x.AllocateSeparateMixedChannels
	}
	return false
}

func (x *TStorageServiceConfig) GetCleanupRetryTimeout() uint32 {
	if x != nil && x.CleanupRetryTimeout != nil {
		return *x.CleanupRetryTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetChannelFreeSpaceThreshold() uint32 {
	if x != nil && x.ChannelFreeSpaceThreshold != nil {
		return *x.ChannelFreeSpaceThreshold
	}
	return 0
}

func (x *TStorageServiceConfig) GetChannelMinFreeSpace() uint32 {
	if x != nil && x.ChannelMinFreeSpace != nil {
		return *x.ChannelMinFreeSpace
	}
	return 0
}

func (x *TStorageServiceConfig) GetMinChannelCount() uint32 {
	if x != nil && x.MinChannelCount != nil {
		return *x.MinChannelCount
	}
	return 0
}

func (x *TStorageServiceConfig) GetDefaultPostponedRequestWeight() uint32 {
	if x != nil && x.DefaultPostponedRequestWeight != nil {
		return *x.DefaultPostponedRequestWeight
	}
	return 0
}

func (x *TStorageServiceConfig) GetClientRemountPeriod() uint32 {
	if x != nil && x.ClientRemountPeriod != nil {
		return *x.ClientRemountPeriod
	}
	return 0
}

func (x *TStorageServiceConfig) GetZoneBlockCount() uint32 {
	if x != nil && x.ZoneBlockCount != nil {
		return *x.ZoneBlockCount
	}
	return 0
}

func (x *TStorageServiceConfig) GetHotZoneRequestCountFactor() uint32 {
	if x != nil && x.HotZoneRequestCountFactor != nil {
		return *x.HotZoneRequestCountFactor
	}
	return 0
}

func (x *TStorageServiceConfig) GetColdZoneRequestCountFactor() uint32 {
	if x != nil && x.ColdZoneRequestCountFactor != nil {
		return *x.ColdZoneRequestCountFactor
	}
	return 0
}

func (x *TStorageServiceConfig) GetWriteRequestBatchingEnabled() bool {
	if x != nil && x.WriteRequestBatchingEnabled != nil {
		return *x.WriteRequestBatchingEnabled
	}
	return false
}

func (x *TStorageServiceConfig) GetBlockListCacheSizePercentage() uint32 {
	if x != nil && x.BlockListCacheSizePercentage != nil {
		return *x.BlockListCacheSizePercentage
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxBlobsToCleanup() uint32 {
	if x != nil && x.MaxBlobsToCleanup != nil {
		return *x.MaxBlobsToCleanup
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxBlobSize() uint32 {
	if x != nil && x.MaxBlobSize != nil {
		return *x.MaxBlobSize
	}
	return 0
}

func (x *TStorageServiceConfig) GetAllocationUnitNonReplicatedSSD() uint32 {
	if x != nil && x.AllocationUnitNonReplicatedSSD != nil {
		return *x.AllocationUnitNonReplicatedSSD
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedSSDUnitReadBandwidth() uint32 {
	if x != nil && x.NonReplicatedSSDUnitReadBandwidth != nil {
		return *x.NonReplicatedSSDUnitReadBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedSSDUnitWriteBandwidth() uint32 {
	if x != nil && x.NonReplicatedSSDUnitWriteBandwidth != nil {
		return *x.NonReplicatedSSDUnitWriteBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedSSDMaxReadBandwidth() uint32 {
	if x != nil && x.NonReplicatedSSDMaxReadBandwidth != nil {
		return *x.NonReplicatedSSDMaxReadBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedSSDMaxWriteBandwidth() uint32 {
	if x != nil && x.NonReplicatedSSDMaxWriteBandwidth != nil {
		return *x.NonReplicatedSSDMaxWriteBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedSSDUnitReadIops() uint32 {
	if x != nil && x.NonReplicatedSSDUnitReadIops != nil {
		return *x.NonReplicatedSSDUnitReadIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedSSDUnitWriteIops() uint32 {
	if x != nil && x.NonReplicatedSSDUnitWriteIops != nil {
		return *x.NonReplicatedSSDUnitWriteIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedSSDMaxReadIops() uint32 {
	if x != nil && x.NonReplicatedSSDMaxReadIops != nil {
		return *x.NonReplicatedSSDMaxReadIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedSSDMaxWriteIops() uint32 {
	if x != nil && x.NonReplicatedSSDMaxWriteIops != nil {
		return *x.NonReplicatedSSDMaxWriteIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetSSDCompactionType() ECompactionType {
	if x != nil && x.SSDCompactionType != nil {
		return *x.SSDCompactionType
	}
	return ECompactionType_CT_DEFAULT
}

func (x *TStorageServiceConfig) GetHDDCompactionType() ECompactionType {
	if x != nil && x.HDDCompactionType != nil {
		return *x.HDDCompactionType
	}
	return ECompactionType_CT_DEFAULT
}

func (x *TStorageServiceConfig) GetV1GarbageCompactionEnabled() bool {
	if x != nil && x.V1GarbageCompactionEnabled != nil {
		return *x.V1GarbageCompactionEnabled
	}
	return false
}

func (x *TStorageServiceConfig) GetBlockDigestsEnabled() bool {
	if x != nil && x.BlockDigestsEnabled != nil {
		return *x.BlockDigestsEnabled
	}
	return false
}

func (x *TStorageServiceConfig) GetIndexStructuresConversionAttemptInterval() uint32 {
	if x != nil && x.IndexStructuresConversionAttemptInterval != nil {
		return *x.IndexStructuresConversionAttemptInterval
	}
	return 0
}

func (x *TStorageServiceConfig) GetDigestedBlocksPercentage() uint32 {
	if x != nil && x.DigestedBlocksPercentage != nil {
		return *x.DigestedBlocksPercentage
	}
	return 0
}

func (x *TStorageServiceConfig) GetCompactionRangeGarbageThreshold() uint32 {
	if x != nil && x.CompactionRangeGarbageThreshold != nil {
		return *x.CompactionRangeGarbageThreshold
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxAffectedBlocksPerCompaction() uint32 {
	if x != nil && x.MaxAffectedBlocksPerCompaction != nil {
		return *x.MaxAffectedBlocksPerCompaction
	}
	return 0
}

func (x *TStorageServiceConfig) GetRealSSDUnitReadBandwidth() uint32 {
	if x != nil && x.RealSSDUnitReadBandwidth != nil {
		return *x.RealSSDUnitReadBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetRealSSDUnitWriteBandwidth() uint32 {
	if x != nil && x.RealSSDUnitWriteBandwidth != nil {
		return *x.RealSSDUnitWriteBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetRealSSDUnitReadIops() uint32 {
	if x != nil && x.RealSSDUnitReadIops != nil {
		return *x.RealSSDUnitReadIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetRealSSDUnitWriteIops() uint32 {
	if x != nil && x.RealSSDUnitWriteIops != nil {
		return *x.RealSSDUnitWriteIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetRealHDDUnitReadBandwidth() uint32 {
	if x != nil && x.RealHDDUnitReadBandwidth != nil {
		return *x.RealHDDUnitReadBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetRealHDDUnitWriteBandwidth() uint32 {
	if x != nil && x.RealHDDUnitWriteBandwidth != nil {
		return *x.RealHDDUnitWriteBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetRealHDDUnitReadIops() uint32 {
	if x != nil && x.RealHDDUnitReadIops != nil {
		return *x.RealHDDUnitReadIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetRealHDDUnitWriteIops() uint32 {
	if x != nil && x.RealHDDUnitWriteIops != nil {
		return *x.RealHDDUnitWriteIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedDiskRecyclingPeriod() uint32 {
	if x != nil && x.NonReplicatedDiskRecyclingPeriod != nil {
		return *x.NonReplicatedDiskRecyclingPeriod
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxCompactionDelay() uint32 {
	if x != nil && x.MaxCompactionDelay != nil {
		return *x.MaxCompactionDelay
	}
	return 0
}

func (x *TStorageServiceConfig) GetMinCompactionDelay() uint32 {
	if x != nil && x.MinCompactionDelay != nil {
		return *x.MinCompactionDelay
	}
	return 0
}

func (x *TStorageServiceConfig) GetCompactionScoreHistorySize() uint32 {
	if x != nil && x.CompactionScoreHistorySize != nil {
		return *x.CompactionScoreHistorySize
	}
	return 0
}

func (x *TStorageServiceConfig) GetVolumePreemptionType() EVolumePreemptionType {
	if x != nil && x.VolumePreemptionType != nil {
		return *x.VolumePreemptionType
	}
	return EVolumePreemptionType_PREEMPTION_NONE
}

func (x *TStorageServiceConfig) GetPreemptionPushPercentage() uint32 {
	if x != nil && x.PreemptionPushPercentage != nil {
		return *x.PreemptionPushPercentage
	}
	return 0
}

func (x *TStorageServiceConfig) GetPreemptionPullPercentage() uint32 {
	if x != nil && x.PreemptionPullPercentage != nil {
		return *x.PreemptionPullPercentage
	}
	return 0
}

func (x *TStorageServiceConfig) GetDefaultTabletVersion() uint32 {
	if x != nil && x.DefaultTabletVersion != nil {
		return *x.DefaultTabletVersion
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxRangesPerBlob() uint32 {
	if x != nil && x.MaxRangesPerBlob != nil {
		return *x.MaxRangesPerBlob
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxCleanupDelay() uint32 {
	if x != nil && x.MaxCleanupDelay != nil {
		return *x.MaxCleanupDelay
	}
	return 0
}

func (x *TStorageServiceConfig) GetMinCleanupDelay() uint32 {
	if x != nil && x.MinCleanupDelay != nil {
		return *x.MinCleanupDelay
	}
	return 0
}

func (x *TStorageServiceConfig) GetCleanupScoreHistorySize() uint32 {
	if x != nil && x.CleanupScoreHistorySize != nil {
		return *x.CleanupScoreHistorySize
	}
	return 0
}

func (x *TStorageServiceConfig) GetPoolKindChangeAllowed() bool {
	if x != nil && x.PoolKindChangeAllowed != nil {
		return *x.PoolKindChangeAllowed
	}
	return false
}

func (x *TStorageServiceConfig) GetAcquireNonReplicatedDevices() bool {
	if x != nil && x.AcquireNonReplicatedDevices != nil {
		return *x.AcquireNonReplicatedDevices
	}
	return false
}

func (x *TStorageServiceConfig) GetNonReplicatedInflightLimit() uint32 {
	if x != nil && x.NonReplicatedInflightLimit != nil {
		return *x.NonReplicatedInflightLimit
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxDisksInPlacementGroup() uint32 {
	if x != nil && x.MaxDisksInPlacementGroup != nil {
		return *x.MaxDisksInPlacementGroup
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxPlacementPartitionCount() uint32 {
	if x != nil && x.MaxPlacementPartitionCount != nil {
		return *x.MaxPlacementPartitionCount
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxDisksInPartitionPlacementGroup() uint32 {
	if x != nil && x.MaxDisksInPartitionPlacementGroup != nil {
		return *x.MaxDisksInPartitionPlacementGroup
	}
	return 0
}

func (x *TStorageServiceConfig) GetWriteBlobThresholdSSD() uint32 {
	if x != nil && x.WriteBlobThresholdSSD != nil {
		return *x.WriteBlobThresholdSSD
	}
	return 0
}

func (x *TStorageServiceConfig) GetBrokenDiskDestructionDelay() uint32 {
	if x != nil && x.BrokenDiskDestructionDelay != nil {
		return *x.BrokenDiskDestructionDelay
	}
	return 0
}

func (x *TStorageServiceConfig) GetVolumeHistoryDuration() uint32 {
	if x != nil && x.VolumeHistoryDuration != nil {
		return *x.VolumeHistoryDuration
	}
	return 0
}

func (x *TStorageServiceConfig) GetSSDMaxBlobsPerRange() uint32 {
	if x != nil && x.SSDMaxBlobsPerRange != nil {
		return *x.SSDMaxBlobsPerRange
	}
	return 0
}

func (x *TStorageServiceConfig) GetHDDMaxBlobsPerRange() uint32 {
	if x != nil && x.HDDMaxBlobsPerRange != nil {
		return *x.HDDMaxBlobsPerRange
	}
	return 0
}

func (x *TStorageServiceConfig) GetFlushToDevNull() bool {
	if x != nil && x.FlushToDevNull != nil {
		return *x.FlushToDevNull
	}
	return false
}

func (x *TStorageServiceConfig) GetMaxCompactionExecTimePerSecond() uint32 {
	if x != nil && x.MaxCompactionExecTimePerSecond != nil {
		return *x.MaxCompactionExecTimePerSecond
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxCleanupExecTimePerSecond() uint32 {
	if x != nil && x.MaxCleanupExecTimePerSecond != nil {
		return *x.MaxCleanupExecTimePerSecond
	}
	return 0
}

func (x *TStorageServiceConfig) GetDontEnqueueCollectGarbageUponPartitionStartup() bool {
	if x != nil && x.DontEnqueueCollectGarbageUponPartitionStartup != nil {
		return *x.DontEnqueueCollectGarbageUponPartitionStartup
	}
	return false
}

func (x *TStorageServiceConfig) GetNonReplicatedDiskRepairTimeout() uint32 {
	if x != nil && x.NonReplicatedDiskRepairTimeout != nil {
		return *x.NonReplicatedDiskRepairTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetBytesPerPartition() uint64 {
	if x != nil && x.BytesPerPartition != nil {
		return *x.BytesPerPartition
	}
	return 0
}

func (x *TStorageServiceConfig) GetBytesPerStripe() uint32 {
	if x != nil && x.BytesPerStripe != nil {
		return *x.BytesPerStripe
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxPartitionsPerVolume() uint32 {
	if x != nil && x.MaxPartitionsPerVolume != nil {
		return *x.MaxPartitionsPerVolume
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedAgentMinTimeout() uint32 {
	if x != nil && x.NonReplicatedAgentMinTimeout != nil {
		return *x.NonReplicatedAgentMinTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetAgentRequestTimeout() uint32 {
	if x != nil && x.AgentRequestTimeout != nil {
		return *x.AgentRequestTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedInfraTimeout() uint32 {
	if x != nil && x.NonReplicatedInfraTimeout != nil {
		return *x.NonReplicatedInfraTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetCompactionScoreLimitForThrottling() uint32 {
	if x != nil && x.CompactionScoreLimitForThrottling != nil {
		return *x.CompactionScoreLimitForThrottling
	}
	return 0
}

func (x *TStorageServiceConfig) GetCleanupQueueBytesLimitForThrottling() uint64 {
	if x != nil && x.CleanupQueueBytesLimitForThrottling != nil {
		return *x.CleanupQueueBytesLimitForThrottling
	}
	return 0
}

func (x *TStorageServiceConfig) GetTargetCompactionBytesPerOp() uint64 {
	if x != nil && x.TargetCompactionBytesPerOp != nil {
		return *x.TargetCompactionBytesPerOp
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxSkippedBlobsDuringCompaction() uint32 {
	if x != nil && x.MaxSkippedBlobsDuringCompaction != nil {
		return *x.MaxSkippedBlobsDuringCompaction
	}
	return 0
}

func (x *TStorageServiceConfig) GetSSDV2MaxBlobsPerRange() uint32 {
	if x != nil && x.SSDV2MaxBlobsPerRange != nil {
		return *x.SSDV2MaxBlobsPerRange
	}
	return 0
}

func (x *TStorageServiceConfig) GetHDDV2MaxBlobsPerRange() uint32 {
	if x != nil && x.HDDV2MaxBlobsPerRange != nil {
		return *x.HDDV2MaxBlobsPerRange
	}
	return 0
}

func (x *TStorageServiceConfig) GetIncrementalCompactionEnabled() bool {
	if x != nil && x.IncrementalCompactionEnabled != nil {
		return *x.IncrementalCompactionEnabled
	}
	return false
}

func (x *TStorageServiceConfig) GetOptimizeForShortRanges() bool {
	if x != nil && x.OptimizeForShortRanges != nil {
		return *x.OptimizeForShortRanges
	}
	return false
}

func (x *TStorageServiceConfig) GetCompactionGarbageBlobLimit() uint32 {
	if x != nil && x.CompactionGarbageBlobLimit != nil {
		return *x.CompactionGarbageBlobLimit
	}
	return 0
}

func (x *TStorageServiceConfig) GetCompactionGarbageBlockLimit() uint32 {
	if x != nil && x.CompactionGarbageBlockLimit != nil {
		return *x.CompactionGarbageBlockLimit
	}
	return 0
}

func (x *TStorageServiceConfig) GetUserDataDebugDumpAllowed() bool {
	if x != nil && x.UserDataDebugDumpAllowed != nil {
		return *x.UserDataDebugDumpAllowed
	}
	return false
}

func (x *TStorageServiceConfig) GetHDDFreshChannelPoolKind() string {
	if x != nil && x.HDDFreshChannelPoolKind != nil {
		return *x.HDDFreshChannelPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetSSDFreshChannelPoolKind() string {
	if x != nil && x.SSDFreshChannelPoolKind != nil {
		return *x.SSDFreshChannelPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetHybridFreshChannelPoolKind() string {
	if x != nil && x.HybridFreshChannelPoolKind != nil {
		return *x.HybridFreshChannelPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetFreshChannelCount() uint32 {
	if x != nil && x.FreshChannelCount != nil {
		return *x.FreshChannelCount
	}
	return 0
}

func (x *TStorageServiceConfig) GetFreshChannelWriteRequestsEnabled() bool {
	if x != nil && x.FreshChannelWriteRequestsEnabled != nil {
		return *x.FreshChannelWriteRequestsEnabled
	}
	return false
}

func (x *TStorageServiceConfig) GetNonReplicatedMinRequestTimeoutSSD() uint32 {
	if x != nil && x.NonReplicatedMinRequestTimeoutSSD != nil {
		return *x.NonReplicatedMinRequestTimeoutSSD
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedMaxRequestTimeoutSSD() uint32 {
	if x != nil && x.NonReplicatedMaxRequestTimeoutSSD != nil {
		return *x.NonReplicatedMaxRequestTimeoutSSD
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxTimedOutDeviceStateDuration() uint32 {
	if x != nil && x.MaxTimedOutDeviceStateDuration != nil {
		return *x.MaxTimedOutDeviceStateDuration
	}
	return 0
}

func (x *TStorageServiceConfig) GetRunV2SoftGcAtStartup() bool {
	if x != nil && x.RunV2SoftGcAtStartup != nil {
		return *x.RunV2SoftGcAtStartup
	}
	return false
}

func (x *TStorageServiceConfig) GetDeletedCheckpointHistoryLifetime() uint32 {
	if x != nil && x.DeletedCheckpointHistoryLifetime != nil {
		return *x.DeletedCheckpointHistoryLifetime
	}
	return 0
}

func (x *TStorageServiceConfig) GetMultipartitionVolumesEnabled() bool {
	if x != nil && x.MultipartitionVolumesEnabled != nil {
		return *x.MultipartitionVolumesEnabled
	}
	return false
}

func (x *TStorageServiceConfig) GetNonReplicatedMigrationStartAllowed() bool {
	if x != nil && x.NonReplicatedMigrationStartAllowed != nil {
		return *x.NonReplicatedMigrationStartAllowed
	}
	return false
}

func (x *TStorageServiceConfig) GetMigrationIndexCachingInterval() uint32 {
	if x != nil && x.MigrationIndexCachingInterval != nil {
		return *x.MigrationIndexCachingInterval
	}
	return 0
}

func (x *TStorageServiceConfig) GetFreshBlobCountFlushThreshold() uint32 {
	if x != nil && x.FreshBlobCountFlushThreshold != nil {
		return *x.FreshBlobCountFlushThreshold
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxMigrationBandwidth() uint32 {
	if x != nil && x.MaxMigrationBandwidth != nil {
		return *x.MaxMigrationBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetExpectedDiskAgentSize() uint32 {
	if x != nil && x.ExpectedDiskAgentSize != nil {
		return *x.ExpectedDiskAgentSize
	}
	return 0
}

func (x *TStorageServiceConfig) GetBytesPerPartitionSSD() uint64 {
	if x != nil && x.BytesPerPartitionSSD != nil {
		return *x.BytesPerPartitionSSD
	}
	return 0
}

func (x *TStorageServiceConfig) GetPlacementGroupAlertPeriod() uint32 {
	if x != nil && x.PlacementGroupAlertPeriod != nil {
		return *x.PlacementGroupAlertPeriod
	}
	return 0
}

func (x *TStorageServiceConfig) GetEnableLoadActor() bool {
	if x != nil && x.EnableLoadActor != nil {
		return *x.EnableLoadActor
	}
	return false
}

func (x *TStorageServiceConfig) GetCpuMatBenchNsSystemThreshold() uint64 {
	if x != nil && x.CpuMatBenchNsSystemThreshold != nil {
		return *x.CpuMatBenchNsSystemThreshold
	}
	return 0
}

func (x *TStorageServiceConfig) GetCpuMatBenchNsUserThreshold() uint64 {
	if x != nil && x.CpuMatBenchNsUserThreshold != nil {
		return *x.CpuMatBenchNsUserThreshold
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedVolumeMigrationDisabled() bool {
	if x != nil && x.NonReplicatedVolumeMigrationDisabled != nil {
		return *x.NonReplicatedVolumeMigrationDisabled
	}
	return false
}

func (x *TStorageServiceConfig) GetMaxNonReplicatedDeviceMigrationsInProgress() uint32 {
	if x != nil && x.MaxNonReplicatedDeviceMigrationsInProgress != nil {
		return *x.MaxNonReplicatedDeviceMigrationsInProgress
	}
	return 0
}

func (x *TStorageServiceConfig) GetDumpBlockCommitIdsIntoProfileLog() bool {
	if x != nil && x.DumpBlockCommitIdsIntoProfileLog != nil {
		return *x.DumpBlockCommitIdsIntoProfileLog
	}
	return false
}

func (x *TStorageServiceConfig) GetUseTestBlockDigestGenerator() bool {
	if x != nil && x.UseTestBlockDigestGenerator != nil {
		return *x.UseTestBlockDigestGenerator
	}
	return false
}

func (x *TStorageServiceConfig) GetEnableConversionIntoMixedIndexV2() bool {
	if x != nil && x.EnableConversionIntoMixedIndexV2 != nil {
		return *x.EnableConversionIntoMixedIndexV2
	}
	return false
}

func (x *TStorageServiceConfig) GetStatsUploadDiskCount() uint32 {
	if x != nil && x.StatsUploadDiskCount != nil {
		return *x.StatsUploadDiskCount
	}
	return 0
}

func (x *TStorageServiceConfig) GetStatsUploadRetryTimeout() uint32 {
	if x != nil && x.StatsUploadRetryTimeout != nil {
		return *x.StatsUploadRetryTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetVolumeHistoryCacheSize() uint32 {
	if x != nil && x.VolumeHistoryCacheSize != nil {
		return *x.VolumeHistoryCacheSize
	}
	return 0
}

func (x *TStorageServiceConfig) GetRemoteMountOnly() bool {
	if x != nil && x.RemoteMountOnly != nil {
		return *x.RemoteMountOnly
	}
	return false
}

func (x *TStorageServiceConfig) GetMaxLocalVolumes() uint32 {
	if x != nil && x.MaxLocalVolumes != nil {
		return *x.MaxLocalVolumes
	}
	return 0
}

func (x *TStorageServiceConfig) GetFreshBlobByteCountFlushThreshold() uint32 {
	if x != nil && x.FreshBlobByteCountFlushThreshold != nil {
		return *x.FreshBlobByteCountFlushThreshold
	}
	return 0
}

func (x *TStorageServiceConfig) GetLogicalUsedBlocksUpdateBlockCount() uint32 {
	if x != nil && x.LogicalUsedBlocksUpdateBlockCount != nil {
		return *x.LogicalUsedBlocksUpdateBlockCount
	}
	return 0
}

func (x *TStorageServiceConfig) GetDiskRegistryVolumeConfigUpdatePeriod() uint32 {
	if x != nil && x.DiskRegistryVolumeConfigUpdatePeriod != nil {
		return *x.DiskRegistryVolumeConfigUpdatePeriod
	}
	return 0
}

func (x *TStorageServiceConfig) GetDumpBlobUpdatesIntoProfileLog() bool {
	if x != nil && x.DumpBlobUpdatesIntoProfileLog != nil {
		return *x.DumpBlobUpdatesIntoProfileLog
	}
	return false
}

func (x *TStorageServiceConfig) GetReassignRequestRetryTimeout() uint32 {
	if x != nil && x.ReassignRequestRetryTimeout != nil {
		return *x.ReassignRequestRetryTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetCommonSSDPoolKind() string {
	if x != nil && x.CommonSSDPoolKind != nil {
		return *x.CommonSSDPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetMaxSSDGroupWriteIops() uint64 {
	if x != nil && x.MaxSSDGroupWriteIops != nil {
		return *x.MaxSSDGroupWriteIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxSSDGroupWriteBandwidth() uint64 {
	if x != nil && x.MaxSSDGroupWriteBandwidth != nil {
		return *x.MaxSSDGroupWriteBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxSSDGroupReadIops() uint64 {
	if x != nil && x.MaxSSDGroupReadIops != nil {
		return *x.MaxSSDGroupReadIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxSSDGroupReadBandwidth() uint64 {
	if x != nil && x.MaxSSDGroupReadBandwidth != nil {
		return *x.MaxSSDGroupReadBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetCommonHDDPoolKind() string {
	if x != nil && x.CommonHDDPoolKind != nil {
		return *x.CommonHDDPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetMaxHDDGroupWriteIops() uint64 {
	if x != nil && x.MaxHDDGroupWriteIops != nil {
		return *x.MaxHDDGroupWriteIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxHDDGroupWriteBandwidth() uint64 {
	if x != nil && x.MaxHDDGroupWriteBandwidth != nil {
		return *x.MaxHDDGroupWriteBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxHDDGroupReadIops() uint64 {
	if x != nil && x.MaxHDDGroupReadIops != nil {
		return *x.MaxHDDGroupReadIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxHDDGroupReadBandwidth() uint64 {
	if x != nil && x.MaxHDDGroupReadBandwidth != nil {
		return *x.MaxHDDGroupReadBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetCommonOverlayPrefixPoolKind() string {
	if x != nil && x.CommonOverlayPrefixPoolKind != nil {
		return *x.CommonOverlayPrefixPoolKind
	}
	return ""
}

func (x *TStorageServiceConfig) GetMixedIndexCacheV1Enabled() bool {
	if x != nil && x.MixedIndexCacheV1Enabled != nil {
		return *x.MixedIndexCacheV1Enabled
	}
	return false
}

func (x *TStorageServiceConfig) GetMixedIndexCacheV1SizeSSD() uint32 {
	if x != nil && x.MixedIndexCacheV1SizeSSD != nil {
		return *x.MixedIndexCacheV1SizeSSD
	}
	return 0
}

func (x *TStorageServiceConfig) GetAllocationUnitMirror2SSD() uint32 {
	if x != nil && x.AllocationUnitMirror2SSD != nil {
		return *x.AllocationUnitMirror2SSD
	}
	return 0
}

func (x *TStorageServiceConfig) GetMirror2SSDUnitReadBandwidth() uint32 {
	if x != nil && x.Mirror2SSDUnitReadBandwidth != nil {
		return *x.Mirror2SSDUnitReadBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetMirror2SSDUnitWriteBandwidth() uint32 {
	if x != nil && x.Mirror2SSDUnitWriteBandwidth != nil {
		return *x.Mirror2SSDUnitWriteBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetMirror2SSDMaxReadBandwidth() uint32 {
	if x != nil && x.Mirror2SSDMaxReadBandwidth != nil {
		return *x.Mirror2SSDMaxReadBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetMirror2SSDMaxWriteBandwidth() uint32 {
	if x != nil && x.Mirror2SSDMaxWriteBandwidth != nil {
		return *x.Mirror2SSDMaxWriteBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetMirror2SSDUnitReadIops() uint32 {
	if x != nil && x.Mirror2SSDUnitReadIops != nil {
		return *x.Mirror2SSDUnitReadIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetMirror2SSDUnitWriteIops() uint32 {
	if x != nil && x.Mirror2SSDUnitWriteIops != nil {
		return *x.Mirror2SSDUnitWriteIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetMirror2SSDMaxReadIops() uint32 {
	if x != nil && x.Mirror2SSDMaxReadIops != nil {
		return *x.Mirror2SSDMaxReadIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetMirror2SSDMaxWriteIops() uint32 {
	if x != nil && x.Mirror2SSDMaxWriteIops != nil {
		return *x.Mirror2SSDMaxWriteIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetMirror2DiskReplicaCount() uint32 {
	if x != nil && x.Mirror2DiskReplicaCount != nil {
		return *x.Mirror2DiskReplicaCount
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxReadBlobErrorsBeforeSuicide() uint32 {
	if x != nil && x.MaxReadBlobErrorsBeforeSuicide != nil {
		return *x.MaxReadBlobErrorsBeforeSuicide
	}
	return 0
}

func (x *TStorageServiceConfig) GetThrottlerStateWriteInterval() uint32 {
	if x != nil && x.ThrottlerStateWriteInterval != nil {
		return *x.ThrottlerStateWriteInterval
	}
	return 0
}

func (x *TStorageServiceConfig) GetRejectMountOnAddClientTimeout() bool {
	if x != nil && x.RejectMountOnAddClientTimeout != nil {
		return *x.RejectMountOnAddClientTimeout
	}
	return false
}

func (x *TStorageServiceConfig) GetNonReplicatedVolumeNotificationTimeout() uint32 {
	if x != nil && x.NonReplicatedVolumeNotificationTimeout != nil {
		return *x.NonReplicatedVolumeNotificationTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetTabletBootInfoBackupFilePath() string {
	if x != nil && x.TabletBootInfoBackupFilePath != nil {
		return *x.TabletBootInfoBackupFilePath
	}
	return ""
}

func (x *TStorageServiceConfig) GetHiveProxyFallbackMode() bool {
	if x != nil && x.HiveProxyFallbackMode != nil {
		return *x.HiveProxyFallbackMode
	}
	return false
}

func (x *TStorageServiceConfig) GetPathDescriptionBackupFilePath() string {
	if x != nil && x.PathDescriptionBackupFilePath != nil {
		return *x.PathDescriptionBackupFilePath
	}
	return ""
}

func (x *TStorageServiceConfig) GetSSProxyFallbackMode() bool {
	if x != nil && x.SSProxyFallbackMode != nil {
		return *x.SSProxyFallbackMode
	}
	return false
}

func (x *TStorageServiceConfig) GetCpuLackThreshold() uint32 {
	if x != nil && x.CpuLackThreshold != nil {
		return *x.CpuLackThreshold
	}
	return 0
}

func (x *TStorageServiceConfig) GetInitialPullDelay() uint32 {
	if x != nil && x.InitialPullDelay != nil {
		return *x.InitialPullDelay
	}
	return 0
}

func (x *TStorageServiceConfig) GetRdmaTargetPort() uint32 {
	if x != nil && x.RdmaTargetPort != nil {
		return *x.RdmaTargetPort
	}
	return 0
}

func (x *TStorageServiceConfig) GetUseNonreplicatedRdmaActor() bool {
	if x != nil && x.UseNonreplicatedRdmaActor != nil {
		return *x.UseNonreplicatedRdmaActor
	}
	return false
}

func (x *TStorageServiceConfig) GetAllocationUnitMirror3SSD() uint32 {
	if x != nil && x.AllocationUnitMirror3SSD != nil {
		return *x.AllocationUnitMirror3SSD
	}
	return 0
}

func (x *TStorageServiceConfig) GetMirror3SSDUnitReadBandwidth() uint32 {
	if x != nil && x.Mirror3SSDUnitReadBandwidth != nil {
		return *x.Mirror3SSDUnitReadBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetMirror3SSDUnitWriteBandwidth() uint32 {
	if x != nil && x.Mirror3SSDUnitWriteBandwidth != nil {
		return *x.Mirror3SSDUnitWriteBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetMirror3SSDMaxReadBandwidth() uint32 {
	if x != nil && x.Mirror3SSDMaxReadBandwidth != nil {
		return *x.Mirror3SSDMaxReadBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetMirror3SSDMaxWriteBandwidth() uint32 {
	if x != nil && x.Mirror3SSDMaxWriteBandwidth != nil {
		return *x.Mirror3SSDMaxWriteBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetMirror3SSDUnitReadIops() uint32 {
	if x != nil && x.Mirror3SSDUnitReadIops != nil {
		return *x.Mirror3SSDUnitReadIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetMirror3SSDUnitWriteIops() uint32 {
	if x != nil && x.Mirror3SSDUnitWriteIops != nil {
		return *x.Mirror3SSDUnitWriteIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetMirror3SSDMaxReadIops() uint32 {
	if x != nil && x.Mirror3SSDMaxReadIops != nil {
		return *x.Mirror3SSDMaxReadIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetMirror3SSDMaxWriteIops() uint32 {
	if x != nil && x.Mirror3SSDMaxWriteIops != nil {
		return *x.Mirror3SSDMaxWriteIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetMirror3DiskReplicaCount() uint32 {
	if x != nil && x.Mirror3DiskReplicaCount != nil {
		return *x.Mirror3DiskReplicaCount
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedSecureEraseTimeout() uint32 {
	if x != nil && x.NonReplicatedSecureEraseTimeout != nil {
		return *x.NonReplicatedSecureEraseTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetCompactionRangeCountPerRun() uint32 {
	if x != nil && x.CompactionRangeCountPerRun != nil {
		return *x.CompactionRangeCountPerRun
	}
	return 0
}

func (x *TStorageServiceConfig) GetBatchCompactionEnabled() bool {
	if x != nil && x.BatchCompactionEnabled != nil {
		return *x.BatchCompactionEnabled
	}
	return false
}

func (x *TStorageServiceConfig) GetNonReplicatedInfraUnavailableAgentTimeout() uint32 {
	if x != nil && x.NonReplicatedInfraUnavailableAgentTimeout != nil {
		return *x.NonReplicatedInfraUnavailableAgentTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetUseRdma() bool {
	if x != nil && x.UseRdma != nil {
		return *x.UseRdma
	}
	return false
}

func (x *TStorageServiceConfig) GetMinExternalBootRequestTimeout() uint32 {
	if x != nil && x.MinExternalBootRequestTimeout != nil {
		return *x.MinExternalBootRequestTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetExternalBootRequestTimeoutIncrement() uint32 {
	if x != nil && x.ExternalBootRequestTimeoutIncrement != nil {
		return *x.ExternalBootRequestTimeoutIncrement
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxExternalBootRequestTimeout() uint32 {
	if x != nil && x.MaxExternalBootRequestTimeout != nil {
		return *x.MaxExternalBootRequestTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedAgentMaxTimeout() uint32 {
	if x != nil && x.NonReplicatedAgentMaxTimeout != nil {
		return *x.NonReplicatedAgentMaxTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedAgentDisconnectRecoveryInterval() uint32 {
	if x != nil && x.NonReplicatedAgentDisconnectRecoveryInterval != nil {
		return *x.NonReplicatedAgentDisconnectRecoveryInterval
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedAgentTimeoutGrowthFactor() float64 {
	if x != nil && x.NonReplicatedAgentTimeoutGrowthFactor != nil {
		return *x.NonReplicatedAgentTimeoutGrowthFactor
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedDontSuspendDevices() bool {
	if x != nil && x.NonReplicatedDontSuspendDevices != nil {
		return *x.NonReplicatedDontSuspendDevices
	}
	return false
}

func (x *TStorageServiceConfig) GetAddClientRetryTimeoutIncrement() uint32 {
	if x != nil && x.AddClientRetryTimeoutIncrement != nil {
		return *x.AddClientRetryTimeoutIncrement
	}
	return 0
}

func (x *TStorageServiceConfig) GetBlobPatchingEnabled() bool {
	if x != nil && x.BlobPatchingEnabled != nil {
		return *x.BlobPatchingEnabled
	}
	return false
}

func (x *TStorageServiceConfig) GetDiskRegistrySplitTransactionCounter() uint32 {
	if x != nil && x.DiskRegistrySplitTransactionCounter != nil {
		return *x.DiskRegistrySplitTransactionCounter
	}
	return 0
}

func (x *TStorageServiceConfig) GetDiskRegistryBackupPeriod() uint64 {
	if x != nil && x.DiskRegistryBackupPeriod != nil {
		return *x.DiskRegistryBackupPeriod
	}
	return 0
}

func (x *TStorageServiceConfig) GetDiskRegistryBackupDirPath() string {
	if x != nil && x.DiskRegistryBackupDirPath != nil {
		return *x.DiskRegistryBackupDirPath
	}
	return ""
}

func (x *TStorageServiceConfig) GetExpectedClientBackoffIncrement() uint32 {
	if x != nil && x.ExpectedClientBackoffIncrement != nil {
		return *x.ExpectedClientBackoffIncrement
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxNonReplicatedDiskDeallocationRequests() uint32 {
	if x != nil && x.MaxNonReplicatedDiskDeallocationRequests != nil {
		return *x.MaxNonReplicatedDiskDeallocationRequests
	}
	return 0
}

func (x *TStorageServiceConfig) GetDiskRegistryMetricsCachePeriod() uint64 {
	if x != nil && x.DiskRegistryMetricsCachePeriod != nil {
		return *x.DiskRegistryMetricsCachePeriod
	}
	return 0
}

func (x *TStorageServiceConfig) GetDiskRegistryCountersHost() string {
	if x != nil && x.DiskRegistryCountersHost != nil {
		return *x.DiskRegistryCountersHost
	}
	return ""
}

func (x *TStorageServiceConfig) GetFreshByteCountHardLimit() uint32 {
	if x != nil && x.FreshByteCountHardLimit != nil {
		return *x.FreshByteCountHardLimit
	}
	return 0
}

func (x *TStorageServiceConfig) GetBalancerActionDelayInterval() uint32 {
	if x != nil && x.BalancerActionDelayInterval != nil {
		return *x.BalancerActionDelayInterval
	}
	return 0
}

func (x *TStorageServiceConfig) GetUseMirrorResync() bool {
	if x != nil && x.UseMirrorResync != nil {
		return *x.UseMirrorResync
	}
	return false
}

func (x *TStorageServiceConfig) GetForceMirrorResync() bool {
	if x != nil && x.ForceMirrorResync != nil {
		return *x.ForceMirrorResync
	}
	return false
}

func (x *TStorageServiceConfig) GetResyncIndexCachingInterval() uint32 {
	if x != nil && x.ResyncIndexCachingInterval != nil {
		return *x.ResyncIndexCachingInterval
	}
	return 0
}

func (x *TStorageServiceConfig) GetResyncAfterClientInactivityInterval() uint32 {
	if x != nil && x.ResyncAfterClientInactivityInterval != nil {
		return *x.ResyncAfterClientInactivityInterval
	}
	return 0
}

func (x *TStorageServiceConfig) GetManuallyPreemptedVolumesFile() string {
	if x != nil && x.ManuallyPreemptedVolumesFile != nil {
		return *x.ManuallyPreemptedVolumesFile
	}
	return ""
}

func (x *TStorageServiceConfig) GetManuallyPreemptedVolumeLivenessCheckPeriod() uint64 {
	if x != nil && x.ManuallyPreemptedVolumeLivenessCheckPeriod != nil {
		return *x.ManuallyPreemptedVolumeLivenessCheckPeriod
	}
	return 0
}

func (x *TStorageServiceConfig) GetPingMetricsHalfDecayInterval() uint32 {
	if x != nil && x.PingMetricsHalfDecayInterval != nil {
		return *x.PingMetricsHalfDecayInterval
	}
	return 0
}

func (x *TStorageServiceConfig) GetDisableManuallyPreemptedVolumesTracking() bool {
	if x != nil && x.DisableManuallyPreemptedVolumesTracking != nil {
		return *x.DisableManuallyPreemptedVolumesTracking
	}
	return false
}

func (x *TStorageServiceConfig) GetDisableStartPartitionsForGc() bool {
	if x != nil && x.DisableStartPartitionsForGc != nil {
		return *x.DisableStartPartitionsForGc
	}
	return false
}

func (x *TStorageServiceConfig) GetAddingUnconfirmedBlobsEnabled() bool {
	if x != nil && x.AddingUnconfirmedBlobsEnabled != nil {
		return *x.AddingUnconfirmedBlobsEnabled
	}
	return false
}

func (x *TStorageServiceConfig) GetBlobCompressionRate() uint32 {
	if x != nil && x.BlobCompressionRate != nil {
		return *x.BlobCompressionRate
	}
	return 0
}

func (x *TStorageServiceConfig) GetBlobCompressionCodec() string {
	if x != nil && x.BlobCompressionCodec != nil {
		return *x.BlobCompressionCodec
	}
	return ""
}

func (x *TStorageServiceConfig) GetDiskSpaceScoreThrottlingEnabled() bool {
	if x != nil && x.DiskSpaceScoreThrottlingEnabled != nil {
		return *x.DiskSpaceScoreThrottlingEnabled
	}
	return false
}

func (x *TStorageServiceConfig) GetMirroredMigrationStartAllowed() bool {
	if x != nil && x.MirroredMigrationStartAllowed != nil {
		return *x.MirroredMigrationStartAllowed
	}
	return false
}

func (x *TStorageServiceConfig) GetSerialNumberValidationEnabled() bool {
	if x != nil && x.SerialNumberValidationEnabled != nil {
		return *x.SerialNumberValidationEnabled
	}
	return false
}

func (x *TStorageServiceConfig) GetKnownSpareNodes() []string {
	if x != nil {
		return x.KnownSpareNodes
	}
	return nil
}

func (x *TStorageServiceConfig) GetSpareNodeProbability() uint32 {
	if x != nil && x.SpareNodeProbability != nil {
		return *x.SpareNodeProbability
	}
	return 0
}

func (x *TStorageServiceConfig) GetReassignChannelsPercentageThreshold() uint32 {
	if x != nil && x.ReassignChannelsPercentageThreshold != nil {
		return *x.ReassignChannelsPercentageThreshold
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxDiffPercentageForBlobPatching() uint32 {
	if x != nil && x.MaxDiffPercentageForBlobPatching != nil {
		return *x.MaxDiffPercentageForBlobPatching
	}
	return 0
}

func (x *TStorageServiceConfig) GetAutomaticallyReplacedDevicesFreezePeriod() uint32 {
	if x != nil && x.AutomaticallyReplacedDevicesFreezePeriod != nil {
		return *x.AutomaticallyReplacedDevicesFreezePeriod
	}
	return 0
}

func (x *TStorageServiceConfig) GetRejectLateRequestsAtDiskAgentEnabled() bool {
	if x != nil && x.RejectLateRequestsAtDiskAgentEnabled != nil {
		return *x.RejectLateRequestsAtDiskAgentEnabled
	}
	return false
}

func (x *TStorageServiceConfig) GetAttachedDiskDestructionTimeout() uint32 {
	if x != nil && x.AttachedDiskDestructionTimeout != nil {
		return *x.AttachedDiskDestructionTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetAssignIdToWriteAndZeroRequestsEnabled() bool {
	if x != nil && x.AssignIdToWriteAndZeroRequestsEnabled != nil {
		return *x.AssignIdToWriteAndZeroRequestsEnabled
	}
	return false
}

func (x *TStorageServiceConfig) GetSSDMaxBlobsPerUnit() uint32 {
	if x != nil && x.SSDMaxBlobsPerUnit != nil {
		return *x.SSDMaxBlobsPerUnit
	}
	return 0
}

func (x *TStorageServiceConfig) GetHDDMaxBlobsPerUnit() uint32 {
	if x != nil && x.HDDMaxBlobsPerUnit != nil {
		return *x.HDDMaxBlobsPerUnit
	}
	return 0
}

func (x *TStorageServiceConfig) GetAgentListExpiredParamsCleanupInterval() uint32 {
	if x != nil && x.AgentListExpiredParamsCleanupInterval != nil {
		return *x.AgentListExpiredParamsCleanupInterval
	}
	return 0
}

func (x *TStorageServiceConfig) GetAllocationUnitNonReplicatedHDD() uint32 {
	if x != nil && x.AllocationUnitNonReplicatedHDD != nil {
		return *x.AllocationUnitNonReplicatedHDD
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedHDDUnitReadBandwidth() uint32 {
	if x != nil && x.NonReplicatedHDDUnitReadBandwidth != nil {
		return *x.NonReplicatedHDDUnitReadBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedHDDUnitWriteBandwidth() uint32 {
	if x != nil && x.NonReplicatedHDDUnitWriteBandwidth != nil {
		return *x.NonReplicatedHDDUnitWriteBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedHDDMaxReadBandwidth() uint32 {
	if x != nil && x.NonReplicatedHDDMaxReadBandwidth != nil {
		return *x.NonReplicatedHDDMaxReadBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedHDDMaxWriteBandwidth() uint32 {
	if x != nil && x.NonReplicatedHDDMaxWriteBandwidth != nil {
		return *x.NonReplicatedHDDMaxWriteBandwidth
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedHDDUnitReadIops() uint32 {
	if x != nil && x.NonReplicatedHDDUnitReadIops != nil {
		return *x.NonReplicatedHDDUnitReadIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedHDDUnitWriteIops() uint32 {
	if x != nil && x.NonReplicatedHDDUnitWriteIops != nil {
		return *x.NonReplicatedHDDUnitWriteIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedHDDMaxReadIops() uint32 {
	if x != nil && x.NonReplicatedHDDMaxReadIops != nil {
		return *x.NonReplicatedHDDMaxReadIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedHDDMaxWriteIops() uint32 {
	if x != nil && x.NonReplicatedHDDMaxWriteIops != nil {
		return *x.NonReplicatedHDDMaxWriteIops
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedHDDPoolName() string {
	if x != nil && x.NonReplicatedHDDPoolName != nil {
		return *x.NonReplicatedHDDPoolName
	}
	return ""
}

func (x *TStorageServiceConfig) GetMaxBrokenHddPlacementGroupPartitionsAfterDeviceRemoval() uint32 {
	if x != nil && x.MaxBrokenHddPlacementGroupPartitionsAfterDeviceRemoval != nil {
		return *x.MaxBrokenHddPlacementGroupPartitionsAfterDeviceRemoval
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxAutomaticDeviceReplacementsPerHour() uint32 {
	if x != nil && x.MaxAutomaticDeviceReplacementsPerHour != nil {
		return *x.MaxAutomaticDeviceReplacementsPerHour
	}
	return 0
}

func (x *TStorageServiceConfig) GetTenantHiveTabletId() uint64 {
	if x != nil && x.TenantHiveTabletId != nil {
		return *x.TenantHiveTabletId
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxDevicesToErasePerDeviceNameForDefaultPoolKind() uint32 {
	if x != nil && x.MaxDevicesToErasePerDeviceNameForDefaultPoolKind != nil {
		return *x.MaxDevicesToErasePerDeviceNameForDefaultPoolKind
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxDevicesToErasePerDeviceNameForLocalPoolKind() uint32 {
	if x != nil && x.MaxDevicesToErasePerDeviceNameForLocalPoolKind != nil {
		return *x.MaxDevicesToErasePerDeviceNameForLocalPoolKind
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxDevicesToErasePerDeviceNameForGlobalPoolKind() uint32 {
	if x != nil && x.MaxDevicesToErasePerDeviceNameForGlobalPoolKind != nil {
		return *x.MaxDevicesToErasePerDeviceNameForGlobalPoolKind
	}
	return 0
}

func (x *TStorageServiceConfig) GetCompactionCountPerRunIncreasingThreshold() uint32 {
	if x != nil && x.CompactionCountPerRunIncreasingThreshold != nil {
		return *x.CompactionCountPerRunIncreasingThreshold
	}
	return 0
}

func (x *TStorageServiceConfig) GetCompactionCountPerRunDecreasingThreshold() uint32 {
	if x != nil && x.CompactionCountPerRunDecreasingThreshold != nil {
		return *x.CompactionCountPerRunDecreasingThreshold
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxCompactionRangeCountPerRun() uint32 {
	if x != nil && x.MaxCompactionRangeCountPerRun != nil {
		return *x.MaxCompactionRangeCountPerRun
	}
	return 0
}

func (x *TStorageServiceConfig) GetCompactionCountPerRunChangingPeriod() uint32 {
	if x != nil && x.CompactionCountPerRunChangingPeriod != nil {
		return *x.CompactionCountPerRunChangingPeriod
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedDiskSwitchToReadOnlyTimeout() uint32 {
	if x != nil && x.NonReplicatedDiskSwitchToReadOnlyTimeout != nil {
		return *x.NonReplicatedDiskSwitchToReadOnlyTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedMinRequestTimeoutHDD() uint32 {
	if x != nil && x.NonReplicatedMinRequestTimeoutHDD != nil {
		return *x.NonReplicatedMinRequestTimeoutHDD
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedMaxRequestTimeoutHDD() uint32 {
	if x != nil && x.NonReplicatedMaxRequestTimeoutHDD != nil {
		return *x.NonReplicatedMaxRequestTimeoutHDD
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedMinRequestTimeout() uint32 {
	if x != nil && x.NonReplicatedMinRequestTimeout != nil {
		return *x.NonReplicatedMinRequestTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetNonReplicatedMaxRequestTimeout() uint32 {
	if x != nil && x.NonReplicatedMaxRequestTimeout != nil {
		return *x.NonReplicatedMaxRequestTimeout
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxChangedBlocksRangeBlocksCount() uint64 {
	if x != nil && x.MaxChangedBlocksRangeBlocksCount != nil {
		return *x.MaxChangedBlocksRangeBlocksCount
	}
	return 0
}

func (x *TStorageServiceConfig) GetMaxNonReplicatedDeviceMigrationPercentageInProgress() uint32 {
	if x != nil && x.MaxNonReplicatedDeviceMigrationPercentageInProgress != nil {
		return *x.MaxNonReplicatedDeviceMigrationPercentageInProgress
	}
	return 0
}

var File_cloud_blockstore_config_storage_proto protoreflect.FileDescriptor

var file_cloud_blockstore_config_storage_proto_rawDesc = []byte{
	0x0a, 0x25, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0xa1, 0x01, 0x0a, 0x15, 0x54, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x44, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x44, 0x69, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x62,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x75, 0x70, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x38, 0x0a,
	0x17, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x48, 0x69, 0x76, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x48, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x44, 0x0a,
	0x1d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6f,
	0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x62,
	0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x4d, 0x61, 0x78, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x30, 0x0a,
	0x13, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x50, 0x69, 0x70, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x50,
	0x69, 0x70, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x69, 0x70, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x50, 0x69, 0x70, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x69, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x50,
	0x69, 0x70, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x50, 0x69, 0x70,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x6c, 0x6f, 0x62,
	0x53, 0x69, 0x7a, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x69,
	0x7a, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f,
	0x62, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x4d, 0x61, 0x78, 0x52, 0x65,
	0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x62,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x49, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x34, 0x0a, 0x15, 0x4d, 0x61, 0x78, 0x49, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x4d, 0x61, 0x78, 0x49, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x49,
	0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x4d, 0x61, 0x78, 0x49, 0x4f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x53, 0x44, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x4d, 0x61, 0x78, 0x49, 0x4f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x53, 0x44, 0x12, 0x3e, 0x0a, 0x1a, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x53, 0x44, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x53,
	0x44, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x48, 0x44, 0x44, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x44, 0x44, 0x12,
	0x2c, 0x0a, 0x11, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a,
	0x14, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x53, 0x53, 0x44, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x54, 0x68, 0x72,
	0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x53,
	0x44, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x19, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e,
	0x67, 0x42, 0x75, 0x72, 0x73, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69,
	0x6e, 0x67, 0x42, 0x75, 0x72, 0x73, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x42, 0x0a, 0x1c, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x6f,
	0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x54, 0x68, 0x72, 0x6f, 0x74,
	0x74, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x66, 0x69, 0x6c,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x69, 0x6e, 0x67, 0x53, 0x53, 0x44, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69,
	0x6e, 0x67, 0x53, 0x53, 0x44, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12,
	0x38, 0x0a, 0x17, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x44, 0x44,
	0x42, 0x6f, 0x6f, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x44, 0x44, 0x42,
	0x6f, 0x6f, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x53, 0x44,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x34, 0x0a,
	0x15, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x53, 0x53,
	0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61,
	0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x53, 0x44,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x49,
	0x6f, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x53,
	0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70,
	0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x52,
	0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x53, 0x44, 0x4d, 0x61,
	0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70,
	0x73, 0x12, 0x32, 0x0a, 0x14, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x48,
	0x44, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78,
	0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x32, 0x0a,
	0x14, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x48, 0x44, 0x44,
	0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x49, 0x6f, 0x70, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x48, 0x44, 0x44, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x48,
	0x44, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x48, 0x44, 0x44, 0x4d, 0x61,
	0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f,
	0x70, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61,
	0x78, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74,
	0x6c, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x50, 0x0a, 0x23, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x23, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x42, 0x61,
	0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x58, 0x0a, 0x27, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x27, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61,
	0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x22,
	0x46, 0x72, 0x65, 0x73, 0x68, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x46, 0x72, 0x65, 0x73, 0x68, 0x42,
	0x79, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x42, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x56, 0x0a, 0x26,
	0x46, 0x72, 0x65, 0x73, 0x68, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x26, 0x46, 0x72,
	0x65, 0x73, 0x68, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x46, 0x72, 0x65, 0x73, 0x68, 0x42, 0x79, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x78,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x46, 0x72, 0x65,
	0x73, 0x68, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x25, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x18, 0xb7, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x25, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x12, 0x5d, 0x0a, 0x29, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46,
	0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0xb8,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x29, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,
	0x12, 0x4b, 0x0a, 0x20, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0xb9, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a,
	0x16, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x4d,
	0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x41, 0x64, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x3e, 0x0a, 0x1a, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x64, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x48, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1a, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x64, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x3a, 0x0a, 0x18, 0x48, 0x44, 0x44, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x49, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x48, 0x44, 0x44, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x48,
	0x44, 0x44, 0x4c, 0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x48, 0x44, 0x44, 0x4c,
	0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x38, 0x0a, 0x17, 0x48, 0x44, 0x44, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x4b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x48, 0x44, 0x44, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x48,
	0x44, 0x44, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f,
	0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x48, 0x44,
	0x44, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x48, 0x44, 0x44, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x48, 0x44, 0x44, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x53, 0x44, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x4e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x53, 0x53, 0x44, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x34, 0x0a,
	0x15, 0x53, 0x53, 0x44, 0x4c, 0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f,
	0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x53, 0x53,
	0x44, 0x4c, 0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x53, 0x44, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x53, 0x53, 0x44, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x38, 0x0a,
	0x17, 0x53, 0x53, 0x44, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x53, 0x53, 0x44, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x53, 0x44, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x53, 0x53, 0x44, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x4c,
	0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x4c,
	0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18,
	0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x4d, 0x69, 0x78, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18,
	0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x4d, 0x69, 0x78,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x40, 0x0a, 0x1b, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x44, 0x0a, 0x1d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x65, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x18, 0x5b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x5c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x69, 0x6e, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x5e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x69, 0x6e, 0x46, 0x72,
	0x65, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x4d, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x44, 0x0a, 0x1d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x70, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x61,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x5a, 0x6f, 0x6e,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x62, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x5a, 0x6f, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x19, 0x48, 0x6f, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x63,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x48, 0x6f, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x3e, 0x0a, 0x1a, 0x43, 0x6f, 0x6c, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1a, 0x43, 0x6f, 0x6c, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x40, 0x0a, 0x1b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x42, 0x0a, 0x1c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x62,
	0x73, 0x54, 0x6f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x54, 0x6f, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f,
	0x62, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x53, 0x44, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x53, 0x44, 0x12, 0x4c, 0x0a,
	0x21, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x53,
	0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x22, 0x4e,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x53, 0x44, 0x55,
	0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x20, 0x4e,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x53, 0x44, 0x4d,
	0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x6c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x4c, 0x0a, 0x21, 0x4e, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x6d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x21, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x1c, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x4e, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x4e, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69,
	0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1d, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x12,
	0x40, 0x0a, 0x1b, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x70,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70,
	0x73, 0x12, 0x42, 0x0a, 0x1c, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70,
	0x73, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x53, 0x53, 0x44, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x53, 0x53,
	0x44, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x58, 0x0a, 0x11, 0x48, 0x44, 0x44, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x48, 0x44, 0x44, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x56, 0x31, 0x47,
	0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x74, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x56,
	0x31, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x75, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x28, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x28, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x18, 0x44, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x44, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x61, 0x72,
	0x62, 0x61, 0x67, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x46, 0x0a,
	0x1e, 0x4d, 0x61, 0x78, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x79, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x4d, 0x61, 0x78, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x53, 0x44,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x53, 0x44,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x3c, 0x0a, 0x19, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x7b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69,
	0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x30, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x52, 0x65,
	0x61, 0x6c, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70,
	0x73, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x6c, 0x48, 0x44, 0x44,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x52, 0x65, 0x61, 0x6c, 0x48, 0x44, 0x44,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x3c, 0x0a, 0x19, 0x52, 0x65, 0x61, 0x6c, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x7f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x52, 0x65, 0x61, 0x6c, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69,
	0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x31, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x6c, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x52,
	0x65, 0x61, 0x6c, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f,
	0x70, 0x73, 0x12, 0x33, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x6c, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69,
	0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x52, 0x65, 0x61, 0x6c, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x4b, 0x0a, 0x20, 0x4e, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x82, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x20, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x2f, 0x0a, 0x12, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x2f, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x84, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3f, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x65, 0x0a, 0x14, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x86, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b,
	0x0a, 0x18, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x73, 0x68,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x18, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x73,
	0x68, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x18, 0x50,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18,
	0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x14, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x10, 0x4d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x62, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x4d, 0x61, 0x78, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x29, 0x0a, 0x0f, 0x4d, 0x61,
	0x78, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x8b, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x4d, 0x61, 0x78, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x29, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x4d, 0x69, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x39, 0x0a, 0x17, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x8d, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x15, 0x50,
	0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x50, 0x6f, 0x6f,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x12, 0x41, 0x0a, 0x1b, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4e, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x1a, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x4e, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x18, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x73,
	0x6b, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x4d, 0x61, 0x78, 0x44, 0x69,
	0x73, 0x6b, 0x73, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x3f, 0x0a, 0x1a, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0xa7, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x21, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x6b, 0x73,
	0x49, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xa8, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x21, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x35, 0x0a, 0x15, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x62,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x53, 0x44, 0x18, 0x92, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x53, 0x44, 0x12, 0x3f, 0x0a, 0x1a, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1a, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x35, 0x0a, 0x15, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x13, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x62,
	0x73, 0x50, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x50, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x13, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x42,
	0x6c, 0x6f, 0x62, 0x73, 0x50, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x96, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x62, 0x73,
	0x50, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x4e, 0x75, 0x6c,
	0x6c, 0x12, 0x47, 0x0a, 0x1e, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x4d, 0x61, 0x78, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x1b, 0x4d, 0x61,
	0x78, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1b, 0x4d, 0x61, 0x78, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x45, 0x78, 0x65, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x65, 0x0a,
	0x2d, 0x44, 0x6f, 0x6e, 0x74, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x18, 0x9a,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2d, 0x44, 0x6f, 0x6e, 0x74, 0x45, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x75, 0x70, 0x12, 0x47, 0x0a, 0x1e, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x4e,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2d, 0x0a,
	0x11, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x50, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x18, 0x9d,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x69, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x16, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x9e, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x43,
	0x0a, 0x1c, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x9f,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x13, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x19, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x4e, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x21, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x51, 0x0a, 0x23, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x46, 0x6f,
	0x72, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0xa4, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x23, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x72,
	0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x1a, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x50, 0x65, 0x72, 0x4f, 0x70, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x4f, 0x70, 0x12, 0x49, 0x0a, 0x1f, 0x4d, 0x61, 0x78, 0x53,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x44, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa6, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1f, 0x4d, 0x61, 0x78, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x62, 0x73, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x15, 0x53, 0x53, 0x44, 0x56, 0x32, 0x4d, 0x61, 0x78, 0x42,
	0x6c, 0x6f, 0x62, 0x73, 0x50, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0xa7, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x53, 0x53, 0x44, 0x56, 0x32, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f,
	0x62, 0x73, 0x50, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x15, 0x48, 0x44,
	0x44, 0x56, 0x32, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x50, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x48, 0x44, 0x44, 0x56,
	0x32, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x50, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x43, 0x0a, 0x1c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x16, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x65, 0x46, 0x6f, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x3f, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x72,
	0x62, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xad, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x41, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61,
	0x72, 0x62, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0xae, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0xaf, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x12, 0x39, 0x0a, 0x17, 0x48, 0x44, 0x44, 0x46, 0x72, 0x65, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0xb0, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x48, 0x44, 0x44, 0x46, 0x72, 0x65, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x17, 0x53,
	0x53, 0x44, 0x46, 0x72, 0x65, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f,
	0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x53,
	0x53, 0x44, 0x46, 0x72, 0x65, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f,
	0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x1a, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x46, 0x72, 0x65, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x18, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x46, 0x72, 0x65, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x11, 0x46, 0x72, 0x65, 0x73, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xb3, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x46, 0x72, 0x65, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x20, 0x46, 0x72, 0x65, 0x73, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x20, 0x46, 0x72, 0x65, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x21, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x53, 0x44, 0x18, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x21, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x53, 0x44, 0x12, 0x4d, 0x0a, 0x21, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x53, 0x53, 0x44, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21,
	0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x53,
	0x44, 0x12, 0x47, 0x0a, 0x1e, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x4d, 0x61, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x14, 0x52, 0x75,
	0x6e, 0x56, 0x32, 0x53, 0x6f, 0x66, 0x74, 0x47, 0x63, 0x41, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x75, 0x70, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x52, 0x75, 0x6e, 0x56, 0x32,
	0x53, 0x6f, 0x66, 0x74, 0x47, 0x63, 0x41, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x12,
	0x4b, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0xba, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1c,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xbb, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x4f, 0x0a, 0x22, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22,
	0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x12, 0x45, 0x0a, 0x1d, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x1c, 0x46, 0x72, 0x65,
	0x73, 0x68, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1c, 0x46, 0x72, 0x65, 0x73, 0x68, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x35,
	0x0a, 0x15, 0x4d, 0x61, 0x78, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x4d, 0x61, 0x78, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x44, 0x69, 0x73, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0xc0,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44,
	0x69, 0x73, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a, 0x14,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x53, 0x44, 0x18, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x53,
	0x44, 0x12, 0x3d, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0xc3,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x29, 0x0a, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x1c, 0x43,
	0x70, 0x75, 0x4d, 0x61, 0x74, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x4e, 0x73, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0xc6, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x1c, 0x43, 0x70, 0x75, 0x4d, 0x61, 0x74, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x4e,
	0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x3f, 0x0a, 0x1a, 0x43, 0x70, 0x75, 0x4d, 0x61, 0x74, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x4e,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0xc7,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x43, 0x70, 0x75, 0x4d, 0x61, 0x74, 0x42, 0x65, 0x6e,
	0x63, 0x68, 0x4e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x53, 0x0a, 0x24, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x24, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x2a, 0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x2a, 0x4d, 0x61, 0x78,
	0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x20, 0x44, 0x75, 0x6d, 0x70, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x73, 0x49, 0x6e, 0x74,
	0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x18, 0xcb, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x20, 0x44, 0x75, 0x6d, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x49, 0x64, 0x73, 0x49, 0x6e, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x12, 0x41, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x55, 0x73, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x20, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x6f, 0x4d,
	0x69, 0x78, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x32, 0x18, 0xcd, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x20, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x6f, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x56, 0x32, 0x12, 0x33, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x73, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xce, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x53, 0x74, 0x61, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x17, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x37, 0x0a, 0x16, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0xd0,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a,
	0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79,
	0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0xd3, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x20, 0x46, 0x72, 0x65, 0x73, 0x68, 0x42, 0x6c, 0x6f, 0x62,
	0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20,
	0x46, 0x72, 0x65, 0x73, 0x68, 0x42, 0x6c, 0x6f, 0x62, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x4d, 0x0a, 0x21, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x53, 0x0a, 0x24, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x24,
	0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x45, 0x0a, 0x1d, 0x44, 0x75, 0x6d, 0x70, 0x42, 0x6c, 0x6f, 0x62,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x18, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x44, 0x75,
	0x6d, 0x70, 0x42, 0x6c, 0x6f, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x74,
	0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x41, 0x0a, 0x1b, 0x52,
	0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xd8, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1b, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2d,
	0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x53, 0x44, 0x50, 0x6f, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x18, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x53, 0x53, 0x44, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x33, 0x0a,
	0x14, 0x4d, 0x61, 0x78, 0x53, 0x53, 0x44, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x49, 0x6f, 0x70, 0x73, 0x18, 0xda, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x4d, 0x61,
	0x78, 0x53, 0x53, 0x44, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f,
	0x70, 0x73, 0x12, 0x3d, 0x0a, 0x19, 0x4d, 0x61, 0x78, 0x53, 0x53, 0x44, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0xdb, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x4d, 0x61, 0x78, 0x53, 0x53, 0x44, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x31, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x53, 0x53, 0x44, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x4d, 0x61, 0x78, 0x53, 0x53, 0x44, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x61, 0x64,
	0x49, 0x6f, 0x70, 0x73, 0x12, 0x3b, 0x0a, 0x18, 0x4d, 0x61, 0x78, 0x53, 0x53, 0x44, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x4d, 0x61, 0x78, 0x53, 0x53, 0x44, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x2d, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x44, 0x44, 0x50, 0x6f,
	0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0xde, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x44, 0x44, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x33, 0x0a, 0x14, 0x4d, 0x61, 0x78, 0x48, 0x44, 0x44, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x18, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x14, 0x4d, 0x61, 0x78, 0x48, 0x44, 0x44, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x3d, 0x0a, 0x19, 0x4d, 0x61, 0x78, 0x48, 0x44, 0x44, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x4d, 0x61, 0x78, 0x48, 0x44,
	0x44, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x48, 0x44, 0x44, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x18, 0xe1, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x4d, 0x61, 0x78, 0x48, 0x44, 0x44, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x3b, 0x0a, 0x18, 0x4d, 0x61, 0x78, 0x48, 0x44,
	0x44, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x4d, 0x61, 0x78, 0x48,
	0x44, 0x44, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x18, 0xe3, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x50,
	0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x18, 0x4d, 0x69, 0x78, 0x65, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x4d, 0x69, 0x78, 0x65,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x18, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x56, 0x31, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x53, 0x44,
	0x18, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x56, 0x31, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x53,
	0x44, 0x12, 0x3b, 0x0a, 0x18, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x53, 0x53, 0x44, 0x18, 0xe6, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x53, 0x53, 0x44, 0x12, 0x41,
	0x0a, 0x1b, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0xe7, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x53, 0x53, 0x44,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x43, 0x0a, 0x1c, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x53, 0x53, 0x44, 0x55,
	0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x32, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x3f, 0x0a, 0x1a, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x32, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x32, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x1b, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x32, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x16, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x32, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x49, 0x6f, 0x70, 0x73, 0x18, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x32, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x49,
	0x6f, 0x70, 0x73, 0x12, 0x39, 0x0a, 0x17, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x53, 0x53,
	0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x18, 0xec,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x53, 0x53,
	0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x35,
	0x0a, 0x15, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x52,
	0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x18, 0xed, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61,
	0x64, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x37, 0x0a, 0x16, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x32,
	0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x18,
	0xee, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x53,
	0x53, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x39,
	0x0a, 0x17, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x1e, 0x4d, 0x61, 0x78,
	0x52, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x53, 0x75, 0x69, 0x63, 0x69, 0x64, 0x65, 0x18, 0xf0, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x75, 0x69, 0x63, 0x69,
	0x64, 0x65, 0x12, 0x41, 0x0a, 0x1b, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74,
	0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x45, 0x0a, 0x1d, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x41, 0x64, 0x64, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x57, 0x0a, 0x26,
	0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xf3, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x26, 0x4e,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x43, 0x0a, 0x1c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x42,
	0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x15, 0x48, 0x69,
	0x76, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x48, 0x69, 0x76, 0x65,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x45, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x68, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x50, 0x61, 0x74, 0x68, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x13, 0x53, 0x53, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0xf7, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x53, 0x53, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x46,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x43,
	0x70, 0x75, 0x4c, 0x61, 0x63, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0xf8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x43, 0x70, 0x75, 0x4c, 0x61, 0x63, 0x6b, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0xf9, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x75, 0x6c, 0x6c,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x27, 0x0a, 0x0e, 0x52, 0x64, 0x6d, 0x61, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x52, 0x64, 0x6d, 0x61, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x3d,
	0x0a, 0x19, 0x55, 0x73, 0x65, 0x4e, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x64, 0x6d, 0x61, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x18, 0xfc, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x19, 0x55, 0x73, 0x65, 0x4e, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x64, 0x6d, 0x61, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a,
	0x18, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x33, 0x53, 0x53, 0x44, 0x18, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x33, 0x53, 0x53, 0x44, 0x12, 0x41, 0x0a, 0x1b, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x33, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1b, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x33, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x43, 0x0a,
	0x1c, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x33, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0xff, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x33, 0x53, 0x53, 0x44,
	0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x3f, 0x0a, 0x1a, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x33, 0x53, 0x53, 0x44,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x33,
	0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x1b, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x33, 0x53, 0x53,
	0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x81, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x33, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x16, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x33, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73,
	0x18, 0x82, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x33,
	0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x12,
	0x39, 0x0a, 0x17, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x33, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69,
	0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x83, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x17, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x33, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69,
	0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x35, 0x0a, 0x15, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x33, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49,
	0x6f, 0x70, 0x73, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x4d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x33, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70,
	0x73, 0x12, 0x37, 0x0a, 0x16, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x33, 0x53, 0x53, 0x44, 0x4d,
	0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x85, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x33, 0x53, 0x53, 0x44, 0x4d, 0x61,
	0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x39, 0x0a, 0x17, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x33, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x86, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x33, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x1f, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x45, 0x72, 0x61, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x87, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1f, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x45, 0x72, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x3f, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x18, 0x88,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x52, 0x75,
	0x6e, 0x12, 0x37, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x89, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5d, 0x0a, 0x29, 0x4e, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x72, 0x61,
	0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x8a, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x29,
	0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x72, 0x61, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x55, 0x73, 0x65,
	0x52, 0x64, 0x6d, 0x61, 0x18, 0x8b, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x55, 0x73, 0x65,
	0x52, 0x64, 0x6d, 0x61, 0x12, 0x45, 0x0a, 0x1d, 0x4d, 0x69, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x8c, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x4d, 0x69,
	0x6e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x51, 0x0a, 0x23, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x8d, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x23, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45,
	0x0a, 0x1d, 0x4d, 0x61, 0x78, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x8e, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x4d, 0x61, 0x78, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x43, 0x0a, 0x1c, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x8f, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x4e, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x63, 0x0a, 0x2c, 0x4e, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x90, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x2c, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x55, 0x0a, 0x25, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x91, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x25, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x1f, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6e, 0x74, 0x53, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x92, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1f, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x6f, 0x6e, 0x74, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x47, 0x0a, 0x1e, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x93, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x41, 0x64, 0x64, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x13, 0x42, 0x6c,
	0x6f, 0x62, 0x50, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x94, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x42, 0x6c, 0x6f, 0x62, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x51, 0x0a,
	0x23, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x95, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x23, 0x44, 0x69, 0x73,
	0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x3b, 0x0a, 0x18, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x96, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x18, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3d, 0x0a,
	0x19, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x44, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x18, 0x97, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x47, 0x0a, 0x1e,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x63, 0x6b, 0x6f, 0x66, 0x66, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x98,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x28, 0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x99, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x28, 0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x44, 0x65,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x47, 0x0a, 0x1e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x9a, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1e, 0x44, 0x69, 0x73,
	0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x18, 0x44,
	0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x9b, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x17, 0x46, 0x72, 0x65, 0x73,
	0x68, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x9c, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x46, 0x72, 0x65, 0x73,
	0x68, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x1b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x9d, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x9e, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x55, 0x73, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x79, 0x6e,
	0x63, 0x12, 0x2d, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x9f, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63,
	0x12, 0x3f, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xa0,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x51, 0x0a, 0x23, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xa1, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x23, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x1c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x46, 0x69, 0x6c, 0x65, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x6c, 0x79, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x2a, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x6c, 0x79, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0xa3, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x2a,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x65,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x43, 0x0a, 0x1c, 0x50, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x48, 0x61, 0x6c, 0x66, 0x44, 0x65, 0x63,
	0x61, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xa4, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1c, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x48, 0x61,
	0x6c, 0x66, 0x44, 0x65, 0x63, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x59, 0x0a, 0x27, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x6c, 0x79, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0xa5, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x27, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x6c, 0x79, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x1b, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x47, 0x63, 0x18, 0xa6, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x47, 0x63, 0x12, 0x45, 0x0a,
	0x1d, 0x41, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xa9,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x41, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x13, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0xaa, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x14, 0x42, 0x6c, 0x6f, 0x62, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x18,
	0xab, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x49, 0x0a, 0x1f,
	0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0xac, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x1d, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x65, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1d, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x45,
	0x0a, 0x1d, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0xae, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x70,
	0x61, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0xaf, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x70, 0x61, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x33, 0x0a, 0x14, 0x53, 0x70, 0x61, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0xb0, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x53, 0x70, 0x61, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x23, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0xb1, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x23, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4b, 0x0a, 0x20, 0x4d, 0x61, 0x78, 0x44,
	0x69, 0x66, 0x66, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72,
	0x42, 0x6c, 0x6f, 0x62, 0x50, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0xb2, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x20, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x66, 0x66, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x62, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x5b, 0x0a, 0x28, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0xb3, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x28, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x53, 0x0a, 0x24, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x41, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xb4, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x24, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x41, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x1e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xb5, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x55, 0x0a, 0x25, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x54, 0x6f, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x5a, 0x65, 0x72, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x25, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x54, 0x6f, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x41, 0x6e, 0x64, 0x5a, 0x65, 0x72, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x12, 0x53, 0x53, 0x44, 0x4d, 0x61,
	0x78, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x50, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x18, 0xba, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x62,
	0x73, 0x50, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x48, 0x44, 0x44, 0x4d,
	0x61, 0x78, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x50, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x18, 0xbb,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f,
	0x62, 0x73, 0x50, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x55, 0x0a, 0x25, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0xbc, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x25, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x47, 0x0a, 0x1e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x44, 0x44, 0x18, 0xbd, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x44, 0x44, 0x12, 0x4d, 0x0a, 0x21, 0x4e, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0xbe,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x4f, 0x0a, 0x22, 0x4e, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0xbf,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x4b, 0x0a, 0x20, 0x4e, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78,
	0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0xc0, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x4d, 0x0a, 0x21, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0xc1, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x21, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x43, 0x0a, 0x1c, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x49, 0x6f, 0x70, 0x73, 0x18, 0xc2, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x4e, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x44, 0x44, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x45, 0x0a, 0x1d, 0x4e, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x44, 0x44, 0x55, 0x6e,
	0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x18, 0xc3, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1d, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70,
	0x73, 0x12, 0x41, 0x0a, 0x1b, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73,
	0x18, 0xc4, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64,
	0x49, 0x6f, 0x70, 0x73, 0x12, 0x43, 0x0a, 0x1c, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x49, 0x6f, 0x70, 0x73, 0x18, 0xc5, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x4e, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x3b, 0x0a, 0x18, 0x4e, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x44, 0x44, 0x50, 0x6f, 0x6f,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xc6, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x4e, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x44, 0x44, 0x50, 0x6f,
	0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x77, 0x0a, 0x36, 0x4d, 0x61, 0x78, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x6e, 0x48, 0x64, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c,
	0x18, 0xc7, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x36, 0x4d, 0x61, 0x78, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x6e, 0x48, 0x64, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x12,
	0x55, 0x0a, 0x25, 0x4d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x18, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x25, 0x4d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50,
	0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x2f, 0x0a, 0x12, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x48, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x18, 0xc9, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x48, 0x69, 0x76, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x30, 0x4d, 0x61, 0x78, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x72, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0xca, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x30, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f,
	0x45, 0x72, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x67, 0x0a, 0x2e, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x54, 0x6f, 0x45, 0x72, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f,
	0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0xcb, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x2e, 0x4d,
	0x61, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x72, 0x61, 0x73, 0x65,
	0x50, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x69, 0x0a,
	0x2f, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x72, 0x61,
	0x73, 0x65, 0x50, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x46,
	0x6f, 0x72, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x18, 0xcc, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x2f, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x72, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x5b, 0x0a, 0x28, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x52, 0x75,
	0x6e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0xcd, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x28, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x52,
	0x75, 0x6e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x5b, 0x0a, 0x28, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x44, 0x65,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0xce, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x28, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x44,
	0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x45, 0x0a, 0x1d, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72,
	0x52, 0x75, 0x6e, 0x18, 0xcf, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x4d, 0x61, 0x78, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x12, 0x51, 0x0a, 0x23, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x52,
	0x75, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0xd0, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x23, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x5b, 0x0a, 0x28,
	0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xd1, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x28, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e,
	0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x21, 0x4e, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x48, 0x44, 0x44, 0x18, 0xd2,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x48, 0x44, 0x44, 0x12, 0x4d, 0x0a, 0x21, 0x4e, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x48, 0x44, 0x44, 0x18, 0xd3, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x48, 0x44, 0x44, 0x12, 0x47, 0x0a, 0x1e, 0x4e, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xd4, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1e, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x47, 0x0a, 0x1e, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0xd5, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x4e, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4b, 0x0a, 0x20, 0x4d, 0x61, 0x78,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd6, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x20, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x33, 0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0xd7, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x33, 0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2a, 0x29, 0x0a, 0x16, 0x45, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43,
	0x49, 0x54, 0x10, 0x02, 0x2a, 0x2e, 0x0a, 0x0f, 0x45, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x54, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x54, 0x5f, 0x4c, 0x4f,
	0x41, 0x44, 0x10, 0x01, 0x2a, 0x6d, 0x0a, 0x15, 0x45, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x52, 0x45, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x45, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4d, 0x4f, 0x53, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x56, 0x59,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x45, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x56,
	0x59, 0x10, 0x02, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6e,
	0x62, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
}

var (
	file_cloud_blockstore_config_storage_proto_rawDescOnce sync.Once
	file_cloud_blockstore_config_storage_proto_rawDescData = file_cloud_blockstore_config_storage_proto_rawDesc
)

func file_cloud_blockstore_config_storage_proto_rawDescGZIP() []byte {
	file_cloud_blockstore_config_storage_proto_rawDescOnce.Do(func() {
		file_cloud_blockstore_config_storage_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_blockstore_config_storage_proto_rawDescData)
	})
	return file_cloud_blockstore_config_storage_proto_rawDescData
}

var file_cloud_blockstore_config_storage_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cloud_blockstore_config_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_cloud_blockstore_config_storage_proto_goTypes = []interface{}{
	(EChannelAllocationMode)(0),    // 0: NCloud.NBlockStore.NProto.EChannelAllocationMode
	(ECompactionType)(0),           // 1: NCloud.NBlockStore.NProto.ECompactionType
	(EVolumePreemptionType)(0),     // 2: NCloud.NBlockStore.NProto.EVolumePreemptionType
	(*TStorageServiceConfig)(nil),  // 3: NCloud.NBlockStore.NProto.TStorageServiceConfig
	(protos.EAuthorizationMode)(0), // 4: NCloud.NProto.EAuthorizationMode
}
var file_cloud_blockstore_config_storage_proto_depIdxs = []int32{
	4, // 0: NCloud.NBlockStore.NProto.TStorageServiceConfig.AuthorizationMode:type_name -> NCloud.NProto.EAuthorizationMode
	1, // 1: NCloud.NBlockStore.NProto.TStorageServiceConfig.SSDCompactionType:type_name -> NCloud.NBlockStore.NProto.ECompactionType
	1, // 2: NCloud.NBlockStore.NProto.TStorageServiceConfig.HDDCompactionType:type_name -> NCloud.NBlockStore.NProto.ECompactionType
	2, // 3: NCloud.NBlockStore.NProto.TStorageServiceConfig.VolumePreemptionType:type_name -> NCloud.NBlockStore.NProto.EVolumePreemptionType
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_cloud_blockstore_config_storage_proto_init() }
func file_cloud_blockstore_config_storage_proto_init() {
	if File_cloud_blockstore_config_storage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_blockstore_config_storage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TStorageServiceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_blockstore_config_storage_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_blockstore_config_storage_proto_goTypes,
		DependencyIndexes: file_cloud_blockstore_config_storage_proto_depIdxs,
		EnumInfos:         file_cloud_blockstore_config_storage_proto_enumTypes,
		MessageInfos:      file_cloud_blockstore_config_storage_proto_msgTypes,
	}.Build()
	File_cloud_blockstore_config_storage_proto = out.File
	file_cloud_blockstore_config_storage_proto_rawDesc = nil
	file_cloud_blockstore_config_storage_proto_goTypes = nil
	file_cloud_blockstore_config_storage_proto_depIdxs = nil
}
