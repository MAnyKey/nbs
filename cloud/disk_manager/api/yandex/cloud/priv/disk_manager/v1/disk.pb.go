// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: yandex/cloud/priv/disk_manager/v1/disk.proto

package disk_manager

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DiskKind int32

const (
	DiskKind_DISK_KIND_UNSPECIFIED DiskKind = 0
	DiskKind_DISK_KIND_SSD         DiskKind = 1
	// The base storage is HDD, index is still kept on SSD.
	DiskKind_DISK_KIND_HDD               DiskKind = 2
	DiskKind_DISK_KIND_SSD_NONREPLICATED DiskKind = 3
	DiskKind_DISK_KIND_SSD_MIRROR2       DiskKind = 4
	DiskKind_DISK_KIND_SSD_LOCAL         DiskKind = 5
	DiskKind_DISK_KIND_SSD_MIRROR3       DiskKind = 6
	DiskKind_DISK_KIND_HDD_NONREPLICATED DiskKind = 7
)

// Enum value maps for DiskKind.
var (
	DiskKind_name = map[int32]string{
		0: "DISK_KIND_UNSPECIFIED",
		1: "DISK_KIND_SSD",
		2: "DISK_KIND_HDD",
		3: "DISK_KIND_SSD_NONREPLICATED",
		4: "DISK_KIND_SSD_MIRROR2",
		5: "DISK_KIND_SSD_LOCAL",
		6: "DISK_KIND_SSD_MIRROR3",
		7: "DISK_KIND_HDD_NONREPLICATED",
	}
	DiskKind_value = map[string]int32{
		"DISK_KIND_UNSPECIFIED":       0,
		"DISK_KIND_SSD":               1,
		"DISK_KIND_HDD":               2,
		"DISK_KIND_SSD_NONREPLICATED": 3,
		"DISK_KIND_SSD_MIRROR2":       4,
		"DISK_KIND_SSD_LOCAL":         5,
		"DISK_KIND_SSD_MIRROR3":       6,
		"DISK_KIND_HDD_NONREPLICATED": 7,
	}
)

func (x DiskKind) Enum() *DiskKind {
	p := new(DiskKind)
	*p = x
	return p
}

func (x DiskKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskKind) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_priv_disk_manager_v1_disk_proto_enumTypes[0].Descriptor()
}

func (DiskKind) Type() protoreflect.EnumType {
	return &file_yandex_cloud_priv_disk_manager_v1_disk_proto_enumTypes[0]
}

func (x DiskKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskKind.Descriptor instead.
func (DiskKind) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDescGZIP(), []int{0}
}

type EncryptionMode int32

const (
	EncryptionMode_NO_ENCRYPTION      EncryptionMode = 0
	EncryptionMode_ENCRYPTION_AES_XTS EncryptionMode = 1
)

// Enum value maps for EncryptionMode.
var (
	EncryptionMode_name = map[int32]string{
		0: "NO_ENCRYPTION",
		1: "ENCRYPTION_AES_XTS",
	}
	EncryptionMode_value = map[string]int32{
		"NO_ENCRYPTION":      0,
		"ENCRYPTION_AES_XTS": 1,
	}
)

func (x EncryptionMode) Enum() *EncryptionMode {
	p := new(EncryptionMode)
	*p = x
	return p
}

func (x EncryptionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncryptionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_priv_disk_manager_v1_disk_proto_enumTypes[1].Descriptor()
}

func (EncryptionMode) Type() protoreflect.EnumType {
	return &file_yandex_cloud_priv_disk_manager_v1_disk_proto_enumTypes[1]
}

func (x EncryptionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncryptionMode.Descriptor instead.
func (EncryptionMode) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDescGZIP(), []int{1}
}

type DiskId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId string `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	DiskId string `protobuf:"bytes,2,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
}

func (x *DiskId) Reset() {
	*x = DiskId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskId) ProtoMessage() {}

func (x *DiskId) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskId.ProtoReflect.Descriptor instead.
func (*DiskId) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDescGZIP(), []int{0}
}

func (x *DiskId) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *DiskId) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

type DiskPerformanceProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxReadBandwidth   int64 `protobuf:"varint,1,opt,name=max_read_bandwidth,json=maxReadBandwidth,proto3" json:"max_read_bandwidth,omitempty"`
	MaxPostponedWeight int64 `protobuf:"varint,2,opt,name=max_postponed_weight,json=maxPostponedWeight,proto3" json:"max_postponed_weight,omitempty"`
	ThrottlingEnabled  bool  `protobuf:"varint,3,opt,name=throttling_enabled,json=throttlingEnabled,proto3" json:"throttling_enabled,omitempty"`
	MaxReadIops        int64 `protobuf:"varint,4,opt,name=max_read_iops,json=maxReadIops,proto3" json:"max_read_iops,omitempty"`
	BoostTime          int64 `protobuf:"varint,5,opt,name=boost_time,json=boostTime,proto3" json:"boost_time,omitempty"`
	BoostRefillTime    int64 `protobuf:"varint,6,opt,name=boost_refill_time,json=boostRefillTime,proto3" json:"boost_refill_time,omitempty"`
	BoostPercentage    int64 `protobuf:"varint,7,opt,name=boost_percentage,json=boostPercentage,proto3" json:"boost_percentage,omitempty"`
	MaxWriteBandwidth  int64 `protobuf:"varint,8,opt,name=max_write_bandwidth,json=maxWriteBandwidth,proto3" json:"max_write_bandwidth,omitempty"`
	MaxWriteIops       int64 `protobuf:"varint,9,opt,name=max_write_iops,json=maxWriteIops,proto3" json:"max_write_iops,omitempty"`
	BurstPercentage    int64 `protobuf:"varint,10,opt,name=burst_percentage,json=burstPercentage,proto3" json:"burst_percentage,omitempty"`
}

func (x *DiskPerformanceProfile) Reset() {
	*x = DiskPerformanceProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskPerformanceProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskPerformanceProfile) ProtoMessage() {}

func (x *DiskPerformanceProfile) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskPerformanceProfile.ProtoReflect.Descriptor instead.
func (*DiskPerformanceProfile) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDescGZIP(), []int{1}
}

func (x *DiskPerformanceProfile) GetMaxReadBandwidth() int64 {
	if x != nil {
		return x.MaxReadBandwidth
	}
	return 0
}

func (x *DiskPerformanceProfile) GetMaxPostponedWeight() int64 {
	if x != nil {
		return x.MaxPostponedWeight
	}
	return 0
}

func (x *DiskPerformanceProfile) GetThrottlingEnabled() bool {
	if x != nil {
		return x.ThrottlingEnabled
	}
	return false
}

func (x *DiskPerformanceProfile) GetMaxReadIops() int64 {
	if x != nil {
		return x.MaxReadIops
	}
	return 0
}

func (x *DiskPerformanceProfile) GetBoostTime() int64 {
	if x != nil {
		return x.BoostTime
	}
	return 0
}

func (x *DiskPerformanceProfile) GetBoostRefillTime() int64 {
	if x != nil {
		return x.BoostRefillTime
	}
	return 0
}

func (x *DiskPerformanceProfile) GetBoostPercentage() int64 {
	if x != nil {
		return x.BoostPercentage
	}
	return 0
}

func (x *DiskPerformanceProfile) GetMaxWriteBandwidth() int64 {
	if x != nil {
		return x.MaxWriteBandwidth
	}
	return 0
}

func (x *DiskPerformanceProfile) GetMaxWriteIops() int64 {
	if x != nil {
		return x.MaxWriteIops
	}
	return 0
}

func (x *DiskPerformanceProfile) GetBurstPercentage() int64 {
	if x != nil {
		return x.BurstPercentage
	}
	return 0
}

type DiskModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockSize           int64                   `protobuf:"varint,1,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	Size                int64                   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	ChannelsCount       int64                   `protobuf:"varint,3,opt,name=channels_count,json=channelsCount,proto3" json:"channels_count,omitempty"`
	Kind                DiskKind                `protobuf:"varint,4,opt,name=kind,proto3,enum=yandex.cloud.priv.disk_manager.v1.DiskKind" json:"kind,omitempty"`
	PerformanceProfile  *DiskPerformanceProfile `protobuf:"bytes,5,opt,name=performance_profile,json=performanceProfile,proto3" json:"performance_profile,omitempty"`
	MergedChannelsCount int64                   `protobuf:"varint,6,opt,name=merged_channels_count,json=mergedChannelsCount,proto3" json:"merged_channels_count,omitempty"`
	MixedChannelsCount  int64                   `protobuf:"varint,7,opt,name=mixed_channels_count,json=mixedChannelsCount,proto3" json:"mixed_channels_count,omitempty"`
}

func (x *DiskModel) Reset() {
	*x = DiskModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskModel) ProtoMessage() {}

func (x *DiskModel) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskModel.ProtoReflect.Descriptor instead.
func (*DiskModel) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDescGZIP(), []int{2}
}

func (x *DiskModel) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *DiskModel) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DiskModel) GetChannelsCount() int64 {
	if x != nil {
		return x.ChannelsCount
	}
	return 0
}

func (x *DiskModel) GetKind() DiskKind {
	if x != nil {
		return x.Kind
	}
	return DiskKind_DISK_KIND_UNSPECIFIED
}

func (x *DiskModel) GetPerformanceProfile() *DiskPerformanceProfile {
	if x != nil {
		return x.PerformanceProfile
	}
	return nil
}

func (x *DiskModel) GetMergedChannelsCount() int64 {
	if x != nil {
		return x.MergedChannelsCount
	}
	return 0
}

func (x *DiskModel) GetMixedChannelsCount() int64 {
	if x != nil {
		return x.MixedChannelsCount
	}
	return 0
}

type KmsKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KekId        string `protobuf:"bytes,1,opt,name=kek_id,json=kekId,proto3" json:"kek_id,omitempty"`
	EncryptedDek []byte `protobuf:"bytes,2,opt,name=encrypted_dek,json=encryptedDek,proto3" json:"encrypted_dek,omitempty"`
	TaskId       string `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *KmsKey) Reset() {
	*x = KmsKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KmsKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KmsKey) ProtoMessage() {}

func (x *KmsKey) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KmsKey.ProtoReflect.Descriptor instead.
func (*KmsKey) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDescGZIP(), []int{3}
}

func (x *KmsKey) GetKekId() string {
	if x != nil {
		return x.KekId
	}
	return ""
}

func (x *KmsKey) GetEncryptedDek() []byte {
	if x != nil {
		return x.EncryptedDek
	}
	return nil
}

func (x *KmsKey) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type EncryptionDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode EncryptionMode `protobuf:"varint,1,opt,name=mode,proto3,enum=yandex.cloud.priv.disk_manager.v1.EncryptionMode" json:"mode,omitempty"`
	// Types that are assignable to Key:
	//
	//	*EncryptionDesc_KeyHash
	//	*EncryptionDesc_KmsKey
	Key isEncryptionDesc_Key `protobuf_oneof:"key"`
}

func (x *EncryptionDesc) Reset() {
	*x = EncryptionDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionDesc) ProtoMessage() {}

func (x *EncryptionDesc) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionDesc.ProtoReflect.Descriptor instead.
func (*EncryptionDesc) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDescGZIP(), []int{4}
}

func (x *EncryptionDesc) GetMode() EncryptionMode {
	if x != nil {
		return x.Mode
	}
	return EncryptionMode_NO_ENCRYPTION
}

func (m *EncryptionDesc) GetKey() isEncryptionDesc_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *EncryptionDesc) GetKeyHash() []byte {
	if x, ok := x.GetKey().(*EncryptionDesc_KeyHash); ok {
		return x.KeyHash
	}
	return nil
}

func (x *EncryptionDesc) GetKmsKey() *KmsKey {
	if x, ok := x.GetKey().(*EncryptionDesc_KmsKey); ok {
		return x.KmsKey
	}
	return nil
}

type isEncryptionDesc_Key interface {
	isEncryptionDesc_Key()
}

type EncryptionDesc_KeyHash struct {
	KeyHash []byte `protobuf:"bytes,2,opt,name=key_hash,json=keyHash,proto3,oneof"`
}

type EncryptionDesc_KmsKey struct {
	KmsKey *KmsKey `protobuf:"bytes,3,opt,name=kms_key,json=kmsKey,proto3,oneof"`
}

func (*EncryptionDesc_KeyHash) isEncryptionDesc_Key() {}

func (*EncryptionDesc_KmsKey) isEncryptionDesc_Key() {}

type DiskStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageSize int64 `protobuf:"varint,1,opt,name=storage_size,json=storageSize,proto3" json:"storage_size,omitempty"`
}

func (x *DiskStats) Reset() {
	*x = DiskStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskStats) ProtoMessage() {}

func (x *DiskStats) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskStats.ProtoReflect.Descriptor instead.
func (*DiskStats) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDescGZIP(), []int{5}
}

func (x *DiskStats) GetStorageSize() int64 {
	if x != nil {
		return x.StorageSize
	}
	return 0
}

type DiskParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockSize int64  `protobuf:"varint,1,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	Size      int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	CloudId   string `protobuf:"bytes,3,opt,name=cloud_id,json=cloudId,proto3" json:"cloud_id,omitempty"`
	FolderId  string `protobuf:"bytes,4,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
}

func (x *DiskParams) Reset() {
	*x = DiskParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskParams) ProtoMessage() {}

func (x *DiskParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskParams.ProtoReflect.Descriptor instead.
func (*DiskParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDescGZIP(), []int{6}
}

func (x *DiskParams) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *DiskParams) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DiskParams) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *DiskParams) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

var File_yandex_cloud_priv_disk_manager_v1_disk_proto protoreflect.FileDescriptor

var file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x72, 0x69, 0x76, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x22, 0x3a, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xc2, 0x03,
	0x0a, 0x16, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e,
	0x65, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x66, 0x69,
	0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x6d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69,
	0x6f, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x75, 0x72, 0x73, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x22, 0xf8, 0x02, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73,
	0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x6a, 0x0a, 0x13, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73,
	0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6d,
	0x69, 0x78, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x69, 0x78, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5d, 0x0a,
	0x06, 0x4b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x6b, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xc1, 0x01, 0x0a,
	0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x45, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x44, 0x0a, 0x07, 0x6b, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x48,
	0x00, 0x52, 0x06, 0x6b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x2e, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x77, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x2a, 0xdc, 0x01, 0x0a, 0x08, 0x44, 0x69,
	0x73, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53,
	0x53, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x48, 0x44, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x4b, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x53, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x52, 0x45, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x53, 0x4b,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x53, 0x44, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52,
	0x32, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x53, 0x53, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15,
	0x44, 0x49, 0x53, 0x4b, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x53, 0x44, 0x5f, 0x4d, 0x49,
	0x52, 0x52, 0x4f, 0x52, 0x33, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x4b, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x44, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x52, 0x45, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x07, 0x2a, 0x3b, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f,
	0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x45, 0x53, 0x5f,
	0x58, 0x54, 0x53, 0x10, 0x01, 0x42, 0x63, 0x5a, 0x61, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x6e, 0x62, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDescOnce sync.Once
	file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDescData = file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDesc
)

func file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDescGZIP() []byte {
	file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDescData)
	})
	return file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDescData
}

var file_yandex_cloud_priv_disk_manager_v1_disk_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_yandex_cloud_priv_disk_manager_v1_disk_proto_goTypes = []interface{}{
	(DiskKind)(0),                  // 0: yandex.cloud.priv.disk_manager.v1.DiskKind
	(EncryptionMode)(0),            // 1: yandex.cloud.priv.disk_manager.v1.EncryptionMode
	(*DiskId)(nil),                 // 2: yandex.cloud.priv.disk_manager.v1.DiskId
	(*DiskPerformanceProfile)(nil), // 3: yandex.cloud.priv.disk_manager.v1.DiskPerformanceProfile
	(*DiskModel)(nil),              // 4: yandex.cloud.priv.disk_manager.v1.DiskModel
	(*KmsKey)(nil),                 // 5: yandex.cloud.priv.disk_manager.v1.KmsKey
	(*EncryptionDesc)(nil),         // 6: yandex.cloud.priv.disk_manager.v1.EncryptionDesc
	(*DiskStats)(nil),              // 7: yandex.cloud.priv.disk_manager.v1.DiskStats
	(*DiskParams)(nil),             // 8: yandex.cloud.priv.disk_manager.v1.DiskParams
}
var file_yandex_cloud_priv_disk_manager_v1_disk_proto_depIdxs = []int32{
	0, // 0: yandex.cloud.priv.disk_manager.v1.DiskModel.kind:type_name -> yandex.cloud.priv.disk_manager.v1.DiskKind
	3, // 1: yandex.cloud.priv.disk_manager.v1.DiskModel.performance_profile:type_name -> yandex.cloud.priv.disk_manager.v1.DiskPerformanceProfile
	1, // 2: yandex.cloud.priv.disk_manager.v1.EncryptionDesc.mode:type_name -> yandex.cloud.priv.disk_manager.v1.EncryptionMode
	5, // 3: yandex.cloud.priv.disk_manager.v1.EncryptionDesc.kms_key:type_name -> yandex.cloud.priv.disk_manager.v1.KmsKey
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_yandex_cloud_priv_disk_manager_v1_disk_proto_init() }
func file_yandex_cloud_priv_disk_manager_v1_disk_proto_init() {
	if File_yandex_cloud_priv_disk_manager_v1_disk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskPerformanceProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KmsKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*EncryptionDesc_KeyHash)(nil),
		(*EncryptionDesc_KmsKey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_priv_disk_manager_v1_disk_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_priv_disk_manager_v1_disk_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_priv_disk_manager_v1_disk_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_priv_disk_manager_v1_disk_proto_msgTypes,
	}.Build()
	File_yandex_cloud_priv_disk_manager_v1_disk_proto = out.File
	file_yandex_cloud_priv_disk_manager_v1_disk_proto_rawDesc = nil
	file_yandex_cloud_priv_disk_manager_v1_disk_proto_goTypes = nil
	file_yandex_cloud_priv_disk_manager_v1_disk_proto_depIdxs = nil
}
