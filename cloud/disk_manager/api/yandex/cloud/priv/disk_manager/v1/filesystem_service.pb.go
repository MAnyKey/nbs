// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: yandex/cloud/priv/disk_manager/v1/filesystem_service.proto

package disk_manager

import (
	context "context"
	operation "github.com/ydb-platform/nbs/cloud/api/operation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FilesystemStorageKind int32

const (
	FilesystemStorageKind_FILESYSTEM_STORAGE_KIND_UNSPECIFIED FilesystemStorageKind = 0
	FilesystemStorageKind_FILESYSTEM_STORAGE_KIND_HDD         FilesystemStorageKind = 1
	FilesystemStorageKind_FILESYSTEM_STORAGE_KIND_SSD         FilesystemStorageKind = 2
)

// Enum value maps for FilesystemStorageKind.
var (
	FilesystemStorageKind_name = map[int32]string{
		0: "FILESYSTEM_STORAGE_KIND_UNSPECIFIED",
		1: "FILESYSTEM_STORAGE_KIND_HDD",
		2: "FILESYSTEM_STORAGE_KIND_SSD",
	}
	FilesystemStorageKind_value = map[string]int32{
		"FILESYSTEM_STORAGE_KIND_UNSPECIFIED": 0,
		"FILESYSTEM_STORAGE_KIND_HDD":         1,
		"FILESYSTEM_STORAGE_KIND_SSD":         2,
	}
)

func (x FilesystemStorageKind) Enum() *FilesystemStorageKind {
	p := new(FilesystemStorageKind)
	*p = x
	return p
}

func (x FilesystemStorageKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilesystemStorageKind) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_enumTypes[0].Descriptor()
}

func (FilesystemStorageKind) Type() protoreflect.EnumType {
	return &file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_enumTypes[0]
}

func (x FilesystemStorageKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilesystemStorageKind.Descriptor instead.
func (FilesystemStorageKind) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDescGZIP(), []int{0}
}

type FilesystemId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId       string `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	FilesystemId string `protobuf:"bytes,2,opt,name=filesystem_id,json=filesystemId,proto3" json:"filesystem_id,omitempty"`
}

func (x *FilesystemId) Reset() {
	*x = FilesystemId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemId) ProtoMessage() {}

func (x *FilesystemId) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemId.ProtoReflect.Descriptor instead.
func (*FilesystemId) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDescGZIP(), []int{0}
}

func (x *FilesystemId) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *FilesystemId) GetFilesystemId() string {
	if x != nil {
		return x.FilesystemId
	}
	return ""
}

type FilesystemPerformanceProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxReadBandwidth  int64 `protobuf:"varint,1,opt,name=max_read_bandwidth,json=maxReadBandwidth,proto3" json:"max_read_bandwidth,omitempty"`
	MaxReadIops       int64 `protobuf:"varint,2,opt,name=max_read_iops,json=maxReadIops,proto3" json:"max_read_iops,omitempty"`
	MaxWriteBandwidth int64 `protobuf:"varint,3,opt,name=max_write_bandwidth,json=maxWriteBandwidth,proto3" json:"max_write_bandwidth,omitempty"`
	MaxWriteIops      int64 `protobuf:"varint,4,opt,name=max_write_iops,json=maxWriteIops,proto3" json:"max_write_iops,omitempty"`
}

func (x *FilesystemPerformanceProfile) Reset() {
	*x = FilesystemPerformanceProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemPerformanceProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemPerformanceProfile) ProtoMessage() {}

func (x *FilesystemPerformanceProfile) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemPerformanceProfile.ProtoReflect.Descriptor instead.
func (*FilesystemPerformanceProfile) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDescGZIP(), []int{1}
}

func (x *FilesystemPerformanceProfile) GetMaxReadBandwidth() int64 {
	if x != nil {
		return x.MaxReadBandwidth
	}
	return 0
}

func (x *FilesystemPerformanceProfile) GetMaxReadIops() int64 {
	if x != nil {
		return x.MaxReadIops
	}
	return 0
}

func (x *FilesystemPerformanceProfile) GetMaxWriteBandwidth() int64 {
	if x != nil {
		return x.MaxWriteBandwidth
	}
	return 0
}

func (x *FilesystemPerformanceProfile) GetMaxWriteIops() int64 {
	if x != nil {
		return x.MaxWriteIops
	}
	return 0
}

type FilesystemModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockSize          int64                         `protobuf:"varint,1,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	Size               int64                         `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	ChannelsCount      int64                         `protobuf:"varint,3,opt,name=channels_count,json=channelsCount,proto3" json:"channels_count,omitempty"`
	StorageKind        FilesystemStorageKind         `protobuf:"varint,4,opt,name=storage_kind,json=storageKind,proto3,enum=yandex.cloud.priv.disk_manager.v1.FilesystemStorageKind" json:"storage_kind,omitempty"`
	PerformanceProfile *FilesystemPerformanceProfile `protobuf:"bytes,5,opt,name=performance_profile,json=performanceProfile,proto3" json:"performance_profile,omitempty"`
}

func (x *FilesystemModel) Reset() {
	*x = FilesystemModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemModel) ProtoMessage() {}

func (x *FilesystemModel) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemModel.ProtoReflect.Descriptor instead.
func (*FilesystemModel) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDescGZIP(), []int{2}
}

func (x *FilesystemModel) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *FilesystemModel) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FilesystemModel) GetChannelsCount() int64 {
	if x != nil {
		return x.ChannelsCount
	}
	return 0
}

func (x *FilesystemModel) GetStorageKind() FilesystemStorageKind {
	if x != nil {
		return x.StorageKind
	}
	return FilesystemStorageKind_FILESYSTEM_STORAGE_KIND_UNSPECIFIED
}

func (x *FilesystemModel) GetPerformanceProfile() *FilesystemPerformanceProfile {
	if x != nil {
		return x.PerformanceProfile
	}
	return nil
}

type CreateFilesystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesystemId *FilesystemId         `protobuf:"bytes,1,opt,name=filesystem_id,json=filesystemId,proto3" json:"filesystem_id,omitempty"`
	CloudId      string                `protobuf:"bytes,2,opt,name=cloud_id,json=cloudId,proto3" json:"cloud_id,omitempty"`
	FolderId     string                `protobuf:"bytes,3,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	BlockSize    int64                 `protobuf:"varint,4,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	Size         int64                 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	StorageKind  FilesystemStorageKind `protobuf:"varint,6,opt,name=storage_kind,json=storageKind,proto3,enum=yandex.cloud.priv.disk_manager.v1.FilesystemStorageKind" json:"storage_kind,omitempty"`
}

func (x *CreateFilesystemRequest) Reset() {
	*x = CreateFilesystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFilesystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFilesystemRequest) ProtoMessage() {}

func (x *CreateFilesystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFilesystemRequest.ProtoReflect.Descriptor instead.
func (*CreateFilesystemRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFilesystemRequest) GetFilesystemId() *FilesystemId {
	if x != nil {
		return x.FilesystemId
	}
	return nil
}

func (x *CreateFilesystemRequest) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *CreateFilesystemRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateFilesystemRequest) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *CreateFilesystemRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CreateFilesystemRequest) GetStorageKind() FilesystemStorageKind {
	if x != nil {
		return x.StorageKind
	}
	return FilesystemStorageKind_FILESYSTEM_STORAGE_KIND_UNSPECIFIED
}

type DeleteFilesystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesystemId *FilesystemId `protobuf:"bytes,1,opt,name=filesystem_id,json=filesystemId,proto3" json:"filesystem_id,omitempty"`
}

func (x *DeleteFilesystemRequest) Reset() {
	*x = DeleteFilesystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFilesystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFilesystemRequest) ProtoMessage() {}

func (x *DeleteFilesystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFilesystemRequest.ProtoReflect.Descriptor instead.
func (*DeleteFilesystemRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteFilesystemRequest) GetFilesystemId() *FilesystemId {
	if x != nil {
		return x.FilesystemId
	}
	return nil
}

type DeleteFilesystemMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesystemId *FilesystemId `protobuf:"bytes,1,opt,name=filesystem_id,json=filesystemId,proto3" json:"filesystem_id,omitempty"`
}

func (x *DeleteFilesystemMetadata) Reset() {
	*x = DeleteFilesystemMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFilesystemMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFilesystemMetadata) ProtoMessage() {}

func (x *DeleteFilesystemMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFilesystemMetadata.ProtoReflect.Descriptor instead.
func (*DeleteFilesystemMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteFilesystemMetadata) GetFilesystemId() *FilesystemId {
	if x != nil {
		return x.FilesystemId
	}
	return nil
}

type ResizeFilesystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesystemId *FilesystemId `protobuf:"bytes,1,opt,name=filesystem_id,json=filesystemId,proto3" json:"filesystem_id,omitempty"`
	Size         int64         `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ResizeFilesystemRequest) Reset() {
	*x = ResizeFilesystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizeFilesystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeFilesystemRequest) ProtoMessage() {}

func (x *ResizeFilesystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeFilesystemRequest.ProtoReflect.Descriptor instead.
func (*ResizeFilesystemRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDescGZIP(), []int{6}
}

func (x *ResizeFilesystemRequest) GetFilesystemId() *FilesystemId {
	if x != nil {
		return x.FilesystemId
	}
	return nil
}

func (x *ResizeFilesystemRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type DescribeFilesystemModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId      string                `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	BlockSize   int64                 `protobuf:"varint,2,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	Size        int64                 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	StorageKind FilesystemStorageKind `protobuf:"varint,4,opt,name=storage_kind,json=storageKind,proto3,enum=yandex.cloud.priv.disk_manager.v1.FilesystemStorageKind" json:"storage_kind,omitempty"`
}

func (x *DescribeFilesystemModelRequest) Reset() {
	*x = DescribeFilesystemModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeFilesystemModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeFilesystemModelRequest) ProtoMessage() {}

func (x *DescribeFilesystemModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeFilesystemModelRequest.ProtoReflect.Descriptor instead.
func (*DescribeFilesystemModelRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDescGZIP(), []int{7}
}

func (x *DescribeFilesystemModelRequest) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *DescribeFilesystemModelRequest) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *DescribeFilesystemModelRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DescribeFilesystemModelRequest) GetStorageKind() FilesystemStorageKind {
	if x != nil {
		return x.StorageKind
	}
	return FilesystemStorageKind_FILESYSTEM_STORAGE_KIND_UNSPECIFIED
}

var File_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x72, 0x69, 0x76, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a,
	0x23, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x4c, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22,
	0xc6, 0x01, 0x0a, 0x1c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61,
	0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x22,
	0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6f, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f,
	0x70, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x6d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x69, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x22, 0xba, 0x02, 0x0a, 0x0f, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x70, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x54, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x22,
	0x6f, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0d, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x22, 0x70, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x0d,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x2a, 0x82, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x27,
	0x0a, 0x23, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x4f,
	0x52, 0x41, 0x47, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49, 0x4c, 0x45, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x48, 0x44, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49, 0x4c, 0x45,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x53, 0x53, 0x44, 0x10, 0x02, 0x32, 0xe8, 0x03, 0x0a, 0x11, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x6c, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x3a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x88, 0x01, 0x0a, 0x0d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x41, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x22, 0x00, 0x42, 0x63, 0x5a, 0x61, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x6e, 0x62, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDescData = file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDesc
)

func file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDescData)
	})
	return file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDescData
}

var file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_goTypes = []interface{}{
	(FilesystemStorageKind)(0),             // 0: yandex.cloud.priv.disk_manager.v1.FilesystemStorageKind
	(*FilesystemId)(nil),                   // 1: yandex.cloud.priv.disk_manager.v1.FilesystemId
	(*FilesystemPerformanceProfile)(nil),   // 2: yandex.cloud.priv.disk_manager.v1.FilesystemPerformanceProfile
	(*FilesystemModel)(nil),                // 3: yandex.cloud.priv.disk_manager.v1.FilesystemModel
	(*CreateFilesystemRequest)(nil),        // 4: yandex.cloud.priv.disk_manager.v1.CreateFilesystemRequest
	(*DeleteFilesystemRequest)(nil),        // 5: yandex.cloud.priv.disk_manager.v1.DeleteFilesystemRequest
	(*DeleteFilesystemMetadata)(nil),       // 6: yandex.cloud.priv.disk_manager.v1.DeleteFilesystemMetadata
	(*ResizeFilesystemRequest)(nil),        // 7: yandex.cloud.priv.disk_manager.v1.ResizeFilesystemRequest
	(*DescribeFilesystemModelRequest)(nil), // 8: yandex.cloud.priv.disk_manager.v1.DescribeFilesystemModelRequest
	(*operation.Operation)(nil),            // 9: yandex.cloud.priv.operation.Operation
}
var file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_depIdxs = []int32{
	0,  // 0: yandex.cloud.priv.disk_manager.v1.FilesystemModel.storage_kind:type_name -> yandex.cloud.priv.disk_manager.v1.FilesystemStorageKind
	2,  // 1: yandex.cloud.priv.disk_manager.v1.FilesystemModel.performance_profile:type_name -> yandex.cloud.priv.disk_manager.v1.FilesystemPerformanceProfile
	1,  // 2: yandex.cloud.priv.disk_manager.v1.CreateFilesystemRequest.filesystem_id:type_name -> yandex.cloud.priv.disk_manager.v1.FilesystemId
	0,  // 3: yandex.cloud.priv.disk_manager.v1.CreateFilesystemRequest.storage_kind:type_name -> yandex.cloud.priv.disk_manager.v1.FilesystemStorageKind
	1,  // 4: yandex.cloud.priv.disk_manager.v1.DeleteFilesystemRequest.filesystem_id:type_name -> yandex.cloud.priv.disk_manager.v1.FilesystemId
	1,  // 5: yandex.cloud.priv.disk_manager.v1.DeleteFilesystemMetadata.filesystem_id:type_name -> yandex.cloud.priv.disk_manager.v1.FilesystemId
	1,  // 6: yandex.cloud.priv.disk_manager.v1.ResizeFilesystemRequest.filesystem_id:type_name -> yandex.cloud.priv.disk_manager.v1.FilesystemId
	0,  // 7: yandex.cloud.priv.disk_manager.v1.DescribeFilesystemModelRequest.storage_kind:type_name -> yandex.cloud.priv.disk_manager.v1.FilesystemStorageKind
	4,  // 8: yandex.cloud.priv.disk_manager.v1.FilesystemService.Create:input_type -> yandex.cloud.priv.disk_manager.v1.CreateFilesystemRequest
	5,  // 9: yandex.cloud.priv.disk_manager.v1.FilesystemService.Delete:input_type -> yandex.cloud.priv.disk_manager.v1.DeleteFilesystemRequest
	7,  // 10: yandex.cloud.priv.disk_manager.v1.FilesystemService.Resize:input_type -> yandex.cloud.priv.disk_manager.v1.ResizeFilesystemRequest
	8,  // 11: yandex.cloud.priv.disk_manager.v1.FilesystemService.DescribeModel:input_type -> yandex.cloud.priv.disk_manager.v1.DescribeFilesystemModelRequest
	9,  // 12: yandex.cloud.priv.disk_manager.v1.FilesystemService.Create:output_type -> yandex.cloud.priv.operation.Operation
	9,  // 13: yandex.cloud.priv.disk_manager.v1.FilesystemService.Delete:output_type -> yandex.cloud.priv.operation.Operation
	9,  // 14: yandex.cloud.priv.disk_manager.v1.FilesystemService.Resize:output_type -> yandex.cloud.priv.operation.Operation
	3,  // 15: yandex.cloud.priv.disk_manager.v1.FilesystemService.DescribeModel:output_type -> yandex.cloud.priv.disk_manager.v1.FilesystemModel
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_init() }
func file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_init() {
	if File_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemPerformanceProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFilesystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFilesystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFilesystemMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResizeFilesystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeFilesystemModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto = out.File
	file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_rawDesc = nil
	file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_goTypes = nil
	file_yandex_cloud_priv_disk_manager_v1_filesystem_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FilesystemServiceClient is the client API for FilesystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FilesystemServiceClient interface {
	// Returns operation with:
	// response: google.protobuf.Empty
	Create(ctx context.Context, in *CreateFilesystemRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Returns operation with:
	// metadata: DeleteFilesystemMetadata
	// response: google.protobuf.Empty
	Delete(ctx context.Context, in *DeleteFilesystemRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Returns operation with:
	// response: google.protobuf.Empty
	Resize(ctx context.Context, in *ResizeFilesystemRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	DescribeModel(ctx context.Context, in *DescribeFilesystemModelRequest, opts ...grpc.CallOption) (*FilesystemModel, error)
}

type filesystemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesystemServiceClient(cc grpc.ClientConnInterface) FilesystemServiceClient {
	return &filesystemServiceClient{cc}
}

func (c *filesystemServiceClient) Create(ctx context.Context, in *CreateFilesystemRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.disk_manager.v1.FilesystemService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemServiceClient) Delete(ctx context.Context, in *DeleteFilesystemRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.disk_manager.v1.FilesystemService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemServiceClient) Resize(ctx context.Context, in *ResizeFilesystemRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.disk_manager.v1.FilesystemService/Resize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemServiceClient) DescribeModel(ctx context.Context, in *DescribeFilesystemModelRequest, opts ...grpc.CallOption) (*FilesystemModel, error) {
	out := new(FilesystemModel)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.disk_manager.v1.FilesystemService/DescribeModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesystemServiceServer is the server API for FilesystemService service.
type FilesystemServiceServer interface {
	// Returns operation with:
	// response: google.protobuf.Empty
	Create(context.Context, *CreateFilesystemRequest) (*operation.Operation, error)
	// Returns operation with:
	// metadata: DeleteFilesystemMetadata
	// response: google.protobuf.Empty
	Delete(context.Context, *DeleteFilesystemRequest) (*operation.Operation, error)
	// Returns operation with:
	// response: google.protobuf.Empty
	Resize(context.Context, *ResizeFilesystemRequest) (*operation.Operation, error)
	DescribeModel(context.Context, *DescribeFilesystemModelRequest) (*FilesystemModel, error)
}

// UnimplementedFilesystemServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFilesystemServiceServer struct {
}

func (*UnimplementedFilesystemServiceServer) Create(context.Context, *CreateFilesystemRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedFilesystemServiceServer) Delete(context.Context, *DeleteFilesystemRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedFilesystemServiceServer) Resize(context.Context, *ResizeFilesystemRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resize not implemented")
}
func (*UnimplementedFilesystemServiceServer) DescribeModel(context.Context, *DescribeFilesystemModelRequest) (*FilesystemModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeModel not implemented")
}

func RegisterFilesystemServiceServer(s *grpc.Server, srv FilesystemServiceServer) {
	s.RegisterService(&_FilesystemService_serviceDesc, srv)
}

func _FilesystemService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFilesystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.disk_manager.v1.FilesystemService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServiceServer).Create(ctx, req.(*CreateFilesystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFilesystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.disk_manager.v1.FilesystemService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServiceServer).Delete(ctx, req.(*DeleteFilesystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemService_Resize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeFilesystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServiceServer).Resize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.disk_manager.v1.FilesystemService/Resize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServiceServer).Resize(ctx, req.(*ResizeFilesystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemService_DescribeModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeFilesystemModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServiceServer).DescribeModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.disk_manager.v1.FilesystemService/DescribeModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServiceServer).DescribeModel(ctx, req.(*DescribeFilesystemModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FilesystemService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.priv.disk_manager.v1.FilesystemService",
	HandlerType: (*FilesystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FilesystemService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FilesystemService_Delete_Handler,
		},
		{
			MethodName: "Resize",
			Handler:    _FilesystemService_Resize_Handler,
		},
		{
			MethodName: "DescribeModel",
			Handler:    _FilesystemService_DescribeModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/priv/disk_manager/v1/filesystem_service.proto",
}
