// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: yandex/cloud/priv/disk_manager/v1/image_service.proto

package disk_manager

import (
	context "context"
	operation "github.com/ydb-platform/nbs/cloud/api/operation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Src:
	//
	//	*CreateImageRequest_SrcSnapshotId
	//	*CreateImageRequest_SrcImageId
	//	*CreateImageRequest_SrcUrl
	//	*CreateImageRequest_SrcDiskId
	Src               isCreateImageRequest_Src `protobuf_oneof:"src"`
	DstImageId        string                   `protobuf:"bytes,6,opt,name=dst_image_id,json=dstImageId,proto3" json:"dst_image_id,omitempty"`
	FolderId          string                   `protobuf:"bytes,7,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	OperationCloudId  string                   `protobuf:"bytes,8,opt,name=operation_cloud_id,json=operationCloudId,proto3" json:"operation_cloud_id,omitempty"`
	OperationFolderId string                   `protobuf:"bytes,9,opt,name=operation_folder_id,json=operationFolderId,proto3" json:"operation_folder_id,omitempty"`
	Pooled            bool                     `protobuf:"varint,10,opt,name=pooled,proto3" json:"pooled,omitempty"`
}

func (x *CreateImageRequest) Reset() {
	*x = CreateImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImageRequest) ProtoMessage() {}

func (x *CreateImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImageRequest.ProtoReflect.Descriptor instead.
func (*CreateImageRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_image_service_proto_rawDescGZIP(), []int{0}
}

func (m *CreateImageRequest) GetSrc() isCreateImageRequest_Src {
	if m != nil {
		return m.Src
	}
	return nil
}

func (x *CreateImageRequest) GetSrcSnapshotId() string {
	if x, ok := x.GetSrc().(*CreateImageRequest_SrcSnapshotId); ok {
		return x.SrcSnapshotId
	}
	return ""
}

func (x *CreateImageRequest) GetSrcImageId() string {
	if x, ok := x.GetSrc().(*CreateImageRequest_SrcImageId); ok {
		return x.SrcImageId
	}
	return ""
}

func (x *CreateImageRequest) GetSrcUrl() *ImageUrl {
	if x, ok := x.GetSrc().(*CreateImageRequest_SrcUrl); ok {
		return x.SrcUrl
	}
	return nil
}

func (x *CreateImageRequest) GetSrcDiskId() *DiskId {
	if x, ok := x.GetSrc().(*CreateImageRequest_SrcDiskId); ok {
		return x.SrcDiskId
	}
	return nil
}

func (x *CreateImageRequest) GetDstImageId() string {
	if x != nil {
		return x.DstImageId
	}
	return ""
}

func (x *CreateImageRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateImageRequest) GetOperationCloudId() string {
	if x != nil {
		return x.OperationCloudId
	}
	return ""
}

func (x *CreateImageRequest) GetOperationFolderId() string {
	if x != nil {
		return x.OperationFolderId
	}
	return ""
}

func (x *CreateImageRequest) GetPooled() bool {
	if x != nil {
		return x.Pooled
	}
	return false
}

type isCreateImageRequest_Src interface {
	isCreateImageRequest_Src()
}

type CreateImageRequest_SrcSnapshotId struct {
	SrcSnapshotId string `protobuf:"bytes,1,opt,name=src_snapshot_id,json=srcSnapshotId,proto3,oneof"`
}

type CreateImageRequest_SrcImageId struct {
	SrcImageId string `protobuf:"bytes,2,opt,name=src_image_id,json=srcImageId,proto3,oneof"`
}

type CreateImageRequest_SrcUrl struct {
	SrcUrl *ImageUrl `protobuf:"bytes,3,opt,name=src_url,json=srcUrl,proto3,oneof"`
}

type CreateImageRequest_SrcDiskId struct {
	SrcDiskId *DiskId `protobuf:"bytes,5,opt,name=src_disk_id,json=srcDiskId,proto3,oneof"`
}

func (*CreateImageRequest_SrcSnapshotId) isCreateImageRequest_Src() {}

func (*CreateImageRequest_SrcImageId) isCreateImageRequest_Src() {}

func (*CreateImageRequest_SrcUrl) isCreateImageRequest_Src() {}

func (*CreateImageRequest_SrcDiskId) isCreateImageRequest_Src() {}

type CreateImageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress float64 `protobuf:"fixed64,1,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *CreateImageMetadata) Reset() {
	*x = CreateImageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateImageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImageMetadata) ProtoMessage() {}

func (x *CreateImageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImageMetadata.ProtoReflect.Descriptor instead.
func (*CreateImageMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_image_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateImageMetadata) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type CreateImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size        int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	StorageSize int64 `protobuf:"varint,2,opt,name=storage_size,json=storageSize,proto3" json:"storage_size,omitempty"`
}

func (x *CreateImageResponse) Reset() {
	*x = CreateImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImageResponse) ProtoMessage() {}

func (x *CreateImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImageResponse.ProtoReflect.Descriptor instead.
func (*CreateImageResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_image_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateImageResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CreateImageResponse) GetStorageSize() int64 {
	if x != nil {
		return x.StorageSize
	}
	return 0
}

type UpdateImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	Pooled  bool   `protobuf:"varint,2,opt,name=pooled,proto3" json:"pooled,omitempty"`
}

func (x *UpdateImageRequest) Reset() {
	*x = UpdateImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateImageRequest) ProtoMessage() {}

func (x *UpdateImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateImageRequest.ProtoReflect.Descriptor instead.
func (*UpdateImageRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_image_service_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateImageRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *UpdateImageRequest) GetPooled() bool {
	if x != nil {
		return x.Pooled
	}
	return false
}

type UpdateImageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
}

func (x *UpdateImageMetadata) Reset() {
	*x = UpdateImageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateImageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateImageMetadata) ProtoMessage() {}

func (x *UpdateImageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateImageMetadata.ProtoReflect.Descriptor instead.
func (*UpdateImageMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_image_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateImageMetadata) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

type DeleteImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId           string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	OperationCloudId  string `protobuf:"bytes,2,opt,name=operation_cloud_id,json=operationCloudId,proto3" json:"operation_cloud_id,omitempty"`
	OperationFolderId string `protobuf:"bytes,3,opt,name=operation_folder_id,json=operationFolderId,proto3" json:"operation_folder_id,omitempty"`
}

func (x *DeleteImageRequest) Reset() {
	*x = DeleteImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteImageRequest) ProtoMessage() {}

func (x *DeleteImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteImageRequest.ProtoReflect.Descriptor instead.
func (*DeleteImageRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_image_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteImageRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *DeleteImageRequest) GetOperationCloudId() string {
	if x != nil {
		return x.OperationCloudId
	}
	return ""
}

func (x *DeleteImageRequest) GetOperationFolderId() string {
	if x != nil {
		return x.OperationFolderId
	}
	return ""
}

type DeleteImageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
}

func (x *DeleteImageMetadata) Reset() {
	*x = DeleteImageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteImageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteImageMetadata) ProtoMessage() {}

func (x *DeleteImageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteImageMetadata.ProtoReflect.Descriptor instead.
func (*DeleteImageMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_image_service_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteImageMetadata) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

var File_yandex_cloud_priv_disk_manager_v1_image_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_priv_disk_manager_v1_image_service_proto_rawDesc = []byte{
	0x0a, 0x35, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x72, 0x69, 0x76, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x23, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2c, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72,
	0x69, 0x76, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76,
	0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x03, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d,
	0x73, 0x72, 0x63, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x46, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x72, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x4b, 0x0a, 0x0b, 0x73, 0x72, 0x63,
	0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x48, 0x00, 0x52, 0x09, 0x73, 0x72, 0x63,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x73,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x65, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x73,
	0x72, 0x63, 0x22, 0x31, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4c, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x47, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x65, 0x64, 0x22, 0x30, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x8d,
	0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x30,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x32, 0xc9, 0x02, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x67, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x06, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x35, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x63, 0x5a, 0x61,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6e, 0x62, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x70, 0x72, 0x69, 0x76, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_priv_disk_manager_v1_image_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_priv_disk_manager_v1_image_service_proto_rawDescData = file_yandex_cloud_priv_disk_manager_v1_image_service_proto_rawDesc
)

func file_yandex_cloud_priv_disk_manager_v1_image_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_priv_disk_manager_v1_image_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_priv_disk_manager_v1_image_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_priv_disk_manager_v1_image_service_proto_rawDescData)
	})
	return file_yandex_cloud_priv_disk_manager_v1_image_service_proto_rawDescData
}

var file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_yandex_cloud_priv_disk_manager_v1_image_service_proto_goTypes = []interface{}{
	(*CreateImageRequest)(nil),  // 0: yandex.cloud.priv.disk_manager.v1.CreateImageRequest
	(*CreateImageMetadata)(nil), // 1: yandex.cloud.priv.disk_manager.v1.CreateImageMetadata
	(*CreateImageResponse)(nil), // 2: yandex.cloud.priv.disk_manager.v1.CreateImageResponse
	(*UpdateImageRequest)(nil),  // 3: yandex.cloud.priv.disk_manager.v1.UpdateImageRequest
	(*UpdateImageMetadata)(nil), // 4: yandex.cloud.priv.disk_manager.v1.UpdateImageMetadata
	(*DeleteImageRequest)(nil),  // 5: yandex.cloud.priv.disk_manager.v1.DeleteImageRequest
	(*DeleteImageMetadata)(nil), // 6: yandex.cloud.priv.disk_manager.v1.DeleteImageMetadata
	(*ImageUrl)(nil),            // 7: yandex.cloud.priv.disk_manager.v1.ImageUrl
	(*DiskId)(nil),              // 8: yandex.cloud.priv.disk_manager.v1.DiskId
	(*operation.Operation)(nil), // 9: yandex.cloud.priv.operation.Operation
}
var file_yandex_cloud_priv_disk_manager_v1_image_service_proto_depIdxs = []int32{
	7, // 0: yandex.cloud.priv.disk_manager.v1.CreateImageRequest.src_url:type_name -> yandex.cloud.priv.disk_manager.v1.ImageUrl
	8, // 1: yandex.cloud.priv.disk_manager.v1.CreateImageRequest.src_disk_id:type_name -> yandex.cloud.priv.disk_manager.v1.DiskId
	0, // 2: yandex.cloud.priv.disk_manager.v1.ImageService.Create:input_type -> yandex.cloud.priv.disk_manager.v1.CreateImageRequest
	3, // 3: yandex.cloud.priv.disk_manager.v1.ImageService.Update:input_type -> yandex.cloud.priv.disk_manager.v1.UpdateImageRequest
	5, // 4: yandex.cloud.priv.disk_manager.v1.ImageService.Delete:input_type -> yandex.cloud.priv.disk_manager.v1.DeleteImageRequest
	9, // 5: yandex.cloud.priv.disk_manager.v1.ImageService.Create:output_type -> yandex.cloud.priv.operation.Operation
	9, // 6: yandex.cloud.priv.disk_manager.v1.ImageService.Update:output_type -> yandex.cloud.priv.operation.Operation
	9, // 7: yandex.cloud.priv.disk_manager.v1.ImageService.Delete:output_type -> yandex.cloud.priv.operation.Operation
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_yandex_cloud_priv_disk_manager_v1_image_service_proto_init() }
func file_yandex_cloud_priv_disk_manager_v1_image_service_proto_init() {
	if File_yandex_cloud_priv_disk_manager_v1_image_service_proto != nil {
		return
	}
	file_yandex_cloud_priv_disk_manager_v1_disk_proto_init()
	file_yandex_cloud_priv_disk_manager_v1_image_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateImageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateImageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteImageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CreateImageRequest_SrcSnapshotId)(nil),
		(*CreateImageRequest_SrcImageId)(nil),
		(*CreateImageRequest_SrcUrl)(nil),
		(*CreateImageRequest_SrcDiskId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_priv_disk_manager_v1_image_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_priv_disk_manager_v1_image_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_priv_disk_manager_v1_image_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_priv_disk_manager_v1_image_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_priv_disk_manager_v1_image_service_proto = out.File
	file_yandex_cloud_priv_disk_manager_v1_image_service_proto_rawDesc = nil
	file_yandex_cloud_priv_disk_manager_v1_image_service_proto_goTypes = nil
	file_yandex_cloud_priv_disk_manager_v1_image_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ImageServiceClient is the client API for ImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImageServiceClient interface {
	// Returns operation with:
	// metadata: CreateImageMetadata
	// response: CreateImageResponse
	Create(ctx context.Context, in *CreateImageRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Returns operation with:
	// metadata: UpdateImageMetadata
	// response: google.protobuf.Empty
	Update(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Returns operation with:
	// metadata: DeleteImageMetadata
	// response: google.protobuf.Empty
	Delete(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type imageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageServiceClient(cc grpc.ClientConnInterface) ImageServiceClient {
	return &imageServiceClient{cc}
}

func (c *imageServiceClient) Create(ctx context.Context, in *CreateImageRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.disk_manager.v1.ImageService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) Update(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.disk_manager.v1.ImageService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) Delete(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.disk_manager.v1.ImageService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageServiceServer is the server API for ImageService service.
type ImageServiceServer interface {
	// Returns operation with:
	// metadata: CreateImageMetadata
	// response: CreateImageResponse
	Create(context.Context, *CreateImageRequest) (*operation.Operation, error)
	// Returns operation with:
	// metadata: UpdateImageMetadata
	// response: google.protobuf.Empty
	Update(context.Context, *UpdateImageRequest) (*operation.Operation, error)
	// Returns operation with:
	// metadata: DeleteImageMetadata
	// response: google.protobuf.Empty
	Delete(context.Context, *DeleteImageRequest) (*operation.Operation, error)
}

// UnimplementedImageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedImageServiceServer struct {
}

func (*UnimplementedImageServiceServer) Create(context.Context, *CreateImageRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedImageServiceServer) Update(context.Context, *UpdateImageRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedImageServiceServer) Delete(context.Context, *DeleteImageRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterImageServiceServer(s *grpc.Server, srv ImageServiceServer) {
	s.RegisterService(&_ImageService_serviceDesc, srv)
}

func _ImageService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.disk_manager.v1.ImageService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).Create(ctx, req.(*CreateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.disk_manager.v1.ImageService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).Update(ctx, req.(*UpdateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.disk_manager.v1.ImageService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).Delete(ctx, req.(*DeleteImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.priv.disk_manager.v1.ImageService",
	HandlerType: (*ImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ImageService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ImageService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ImageService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/priv/disk_manager/v1/image_service.proto",
}
