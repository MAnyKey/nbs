// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: yandex/cloud/priv/disk_manager/v1/disk_service.proto

package disk_manager

import (
	context "context"
	operation "github.com/ydb-platform/nbs/cloud/api/operation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MigrateDiskMetadata_Status int32

const (
	MigrateDiskMetadata_STATUS_UNSPECIFIED    MigrateDiskMetadata_Status = 0
	MigrateDiskMetadata_REPLICATING           MigrateDiskMetadata_Status = 1
	MigrateDiskMetadata_FINISHING_REPLICATION MigrateDiskMetadata_Status = 2
	MigrateDiskMetadata_REPLICATION_FINISHED  MigrateDiskMetadata_Status = 3
	MigrateDiskMetadata_FINISHING             MigrateDiskMetadata_Status = 4
)

// Enum value maps for MigrateDiskMetadata_Status.
var (
	MigrateDiskMetadata_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "REPLICATING",
		2: "FINISHING_REPLICATION",
		3: "REPLICATION_FINISHED",
		4: "FINISHING",
	}
	MigrateDiskMetadata_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":    0,
		"REPLICATING":           1,
		"FINISHING_REPLICATION": 2,
		"REPLICATION_FINISHED":  3,
		"FINISHING":             4,
	}
)

func (x MigrateDiskMetadata_Status) Enum() *MigrateDiskMetadata_Status {
	p := new(MigrateDiskMetadata_Status)
	*p = x
	return p
}

func (x MigrateDiskMetadata_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MigrateDiskMetadata_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_enumTypes[0].Descriptor()
}

func (MigrateDiskMetadata_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_enumTypes[0]
}

func (x MigrateDiskMetadata_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MigrateDiskMetadata_Status.Descriptor instead.
func (MigrateDiskMetadata_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescGZIP(), []int{11, 0}
}

type SendMigrationSignalRequest_Signal int32

const (
	SendMigrationSignalRequest_SIGNAL_UNSPECIFIED SendMigrationSignalRequest_Signal = 0
	// Signal to freeze source disk and finish data replication.
	SendMigrationSignalRequest_FINISH_REPLICATION SendMigrationSignalRequest_Signal = 1
	// Signal to delete source disk and replace it with destination disk. Can only be sent after FinishReplication signal.
	SendMigrationSignalRequest_FINISH_MIGRATION SendMigrationSignalRequest_Signal = 2
)

// Enum value maps for SendMigrationSignalRequest_Signal.
var (
	SendMigrationSignalRequest_Signal_name = map[int32]string{
		0: "SIGNAL_UNSPECIFIED",
		1: "FINISH_REPLICATION",
		2: "FINISH_MIGRATION",
	}
	SendMigrationSignalRequest_Signal_value = map[string]int32{
		"SIGNAL_UNSPECIFIED": 0,
		"FINISH_REPLICATION": 1,
		"FINISH_MIGRATION":   2,
	}
)

func (x SendMigrationSignalRequest_Signal) Enum() *SendMigrationSignalRequest_Signal {
	p := new(SendMigrationSignalRequest_Signal)
	*p = x
	return p
}

func (x SendMigrationSignalRequest_Signal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendMigrationSignalRequest_Signal) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_enumTypes[1].Descriptor()
}

func (SendMigrationSignalRequest_Signal) Type() protoreflect.EnumType {
	return &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_enumTypes[1]
}

func (x SendMigrationSignalRequest_Signal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendMigrationSignalRequest_Signal.Descriptor instead.
func (SendMigrationSignalRequest_Signal) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescGZIP(), []int{12, 0}
}

type CreateDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Src:
	//
	//	*CreateDiskRequest_SrcEmpty
	//	*CreateDiskRequest_SrcImageId
	//	*CreateDiskRequest_SrcSnapshotId
	Src              isCreateDiskRequest_Src `protobuf_oneof:"src"`
	Size             int64                   `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	DiskId           *DiskId                 `protobuf:"bytes,5,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	BlockSize        int64                   `protobuf:"varint,6,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	Kind             DiskKind                `protobuf:"varint,7,opt,name=kind,proto3,enum=yandex.cloud.priv.disk_manager.v1.DiskKind" json:"kind,omitempty"`
	CloudId          string                  `protobuf:"bytes,8,opt,name=cloud_id,json=cloudId,proto3" json:"cloud_id,omitempty"`
	FolderId         string                  `protobuf:"bytes,9,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	TabletVersion    int64                   `protobuf:"varint,10,opt,name=tablet_version,json=tabletVersion,proto3" json:"tablet_version,omitempty"`
	PlacementGroupId string                  `protobuf:"bytes,11,opt,name=placement_group_id,json=placementGroupId,proto3" json:"placement_group_id,omitempty"`
	// Prevents from creating layered (overlay) disk.
	ForceNotLayered         bool            `protobuf:"varint,12,opt,name=force_not_layered,json=forceNotLayered,proto3" json:"force_not_layered,omitempty"`
	OperationCloudId        string          `protobuf:"bytes,13,opt,name=operation_cloud_id,json=operationCloudId,proto3" json:"operation_cloud_id,omitempty"`
	OperationFolderId       string          `protobuf:"bytes,14,opt,name=operation_folder_id,json=operationFolderId,proto3" json:"operation_folder_id,omitempty"`
	StoragePoolName         string          `protobuf:"bytes,17,opt,name=storage_pool_name,json=storagePoolName,proto3" json:"storage_pool_name,omitempty"`
	AgentIds                []string        `protobuf:"bytes,18,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	EncryptionDesc          *EncryptionDesc `protobuf:"bytes,19,opt,name=encryption_desc,json=encryptionDesc,proto3" json:"encryption_desc,omitempty"`
	PlacementPartitionIndex uint32          `protobuf:"varint,20,opt,name=placement_partition_index,json=placementPartitionIndex,proto3" json:"placement_partition_index,omitempty"`
}

func (x *CreateDiskRequest) Reset() {
	*x = CreateDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDiskRequest) ProtoMessage() {}

func (x *CreateDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDiskRequest.ProtoReflect.Descriptor instead.
func (*CreateDiskRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescGZIP(), []int{0}
}

func (m *CreateDiskRequest) GetSrc() isCreateDiskRequest_Src {
	if m != nil {
		return m.Src
	}
	return nil
}

func (x *CreateDiskRequest) GetSrcEmpty() *emptypb.Empty {
	if x, ok := x.GetSrc().(*CreateDiskRequest_SrcEmpty); ok {
		return x.SrcEmpty
	}
	return nil
}

func (x *CreateDiskRequest) GetSrcImageId() string {
	if x, ok := x.GetSrc().(*CreateDiskRequest_SrcImageId); ok {
		return x.SrcImageId
	}
	return ""
}

func (x *CreateDiskRequest) GetSrcSnapshotId() string {
	if x, ok := x.GetSrc().(*CreateDiskRequest_SrcSnapshotId); ok {
		return x.SrcSnapshotId
	}
	return ""
}

func (x *CreateDiskRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CreateDiskRequest) GetDiskId() *DiskId {
	if x != nil {
		return x.DiskId
	}
	return nil
}

func (x *CreateDiskRequest) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *CreateDiskRequest) GetKind() DiskKind {
	if x != nil {
		return x.Kind
	}
	return DiskKind_DISK_KIND_UNSPECIFIED
}

func (x *CreateDiskRequest) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *CreateDiskRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateDiskRequest) GetTabletVersion() int64 {
	if x != nil {
		return x.TabletVersion
	}
	return 0
}

func (x *CreateDiskRequest) GetPlacementGroupId() string {
	if x != nil {
		return x.PlacementGroupId
	}
	return ""
}

func (x *CreateDiskRequest) GetForceNotLayered() bool {
	if x != nil {
		return x.ForceNotLayered
	}
	return false
}

func (x *CreateDiskRequest) GetOperationCloudId() string {
	if x != nil {
		return x.OperationCloudId
	}
	return ""
}

func (x *CreateDiskRequest) GetOperationFolderId() string {
	if x != nil {
		return x.OperationFolderId
	}
	return ""
}

func (x *CreateDiskRequest) GetStoragePoolName() string {
	if x != nil {
		return x.StoragePoolName
	}
	return ""
}

func (x *CreateDiskRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *CreateDiskRequest) GetEncryptionDesc() *EncryptionDesc {
	if x != nil {
		return x.EncryptionDesc
	}
	return nil
}

func (x *CreateDiskRequest) GetPlacementPartitionIndex() uint32 {
	if x != nil {
		return x.PlacementPartitionIndex
	}
	return 0
}

type isCreateDiskRequest_Src interface {
	isCreateDiskRequest_Src()
}

type CreateDiskRequest_SrcEmpty struct {
	SrcEmpty *emptypb.Empty `protobuf:"bytes,1,opt,name=src_empty,json=srcEmpty,proto3,oneof"`
}

type CreateDiskRequest_SrcImageId struct {
	// It's (generally) very fast to create disk from image, because it'll create a layered disk basing on some disk from image's pool
	SrcImageId string `protobuf:"bytes,2,opt,name=src_image_id,json=srcImageId,proto3,oneof"`
}

type CreateDiskRequest_SrcSnapshotId struct {
	// This is similar to creating from Image, except it performs full copy and so is very slow.
	SrcSnapshotId string `protobuf:"bytes,3,opt,name=src_snapshot_id,json=srcSnapshotId,proto3,oneof"`
}

func (*CreateDiskRequest_SrcEmpty) isCreateDiskRequest_Src() {}

func (*CreateDiskRequest_SrcImageId) isCreateDiskRequest_Src() {}

func (*CreateDiskRequest_SrcSnapshotId) isCreateDiskRequest_Src() {}

type CreateDiskMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress float64 `protobuf:"fixed64,1,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *CreateDiskMetadata) Reset() {
	*x = CreateDiskMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDiskMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDiskMetadata) ProtoMessage() {}

func (x *CreateDiskMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDiskMetadata.ProtoReflect.Descriptor instead.
func (*CreateDiskMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDiskMetadata) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type DeleteDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `disk_id.zone_id` is optional.
	DiskId *DiskId `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	Sync   bool    `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *DeleteDiskRequest) Reset() {
	*x = DeleteDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDiskRequest) ProtoMessage() {}

func (x *DeleteDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDiskRequest.ProtoReflect.Descriptor instead.
func (*DeleteDiskRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteDiskRequest) GetDiskId() *DiskId {
	if x != nil {
		return x.DiskId
	}
	return nil
}

func (x *DeleteDiskRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type DeleteDiskMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskId *DiskId `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
}

func (x *DeleteDiskMetadata) Reset() {
	*x = DeleteDiskMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDiskMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDiskMetadata) ProtoMessage() {}

func (x *DeleteDiskMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDiskMetadata.ProtoReflect.Descriptor instead.
func (*DeleteDiskMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteDiskMetadata) GetDiskId() *DiskId {
	if x != nil {
		return x.DiskId
	}
	return nil
}

type ResizeDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskId *DiskId `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	Size   int64   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ResizeDiskRequest) Reset() {
	*x = ResizeDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizeDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeDiskRequest) ProtoMessage() {}

func (x *ResizeDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeDiskRequest.ProtoReflect.Descriptor instead.
func (*ResizeDiskRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescGZIP(), []int{4}
}

func (x *ResizeDiskRequest) GetDiskId() *DiskId {
	if x != nil {
		return x.DiskId
	}
	return nil
}

func (x *ResizeDiskRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type AlterDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskId   *DiskId `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	CloudId  string  `protobuf:"bytes,2,opt,name=cloud_id,json=cloudId,proto3" json:"cloud_id,omitempty"`
	FolderId string  `protobuf:"bytes,3,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
}

func (x *AlterDiskRequest) Reset() {
	*x = AlterDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterDiskRequest) ProtoMessage() {}

func (x *AlterDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterDiskRequest.ProtoReflect.Descriptor instead.
func (*AlterDiskRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescGZIP(), []int{5}
}

func (x *AlterDiskRequest) GetDiskId() *DiskId {
	if x != nil {
		return x.DiskId
	}
	return nil
}

func (x *AlterDiskRequest) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *AlterDiskRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

type AssignDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskId     *DiskId `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	InstanceId string  `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Host       string  `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	// Empty token is not allowed.
	Token string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AssignDiskRequest) Reset() {
	*x = AssignDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignDiskRequest) ProtoMessage() {}

func (x *AssignDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignDiskRequest.ProtoReflect.Descriptor instead.
func (*AssignDiskRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescGZIP(), []int{6}
}

func (x *AssignDiskRequest) GetDiskId() *DiskId {
	if x != nil {
		return x.DiskId
	}
	return nil
}

func (x *AssignDiskRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *AssignDiskRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *AssignDiskRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UnassignDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskId *DiskId `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
}

func (x *UnassignDiskRequest) Reset() {
	*x = UnassignDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnassignDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnassignDiskRequest) ProtoMessage() {}

func (x *UnassignDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnassignDiskRequest.ProtoReflect.Descriptor instead.
func (*UnassignDiskRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescGZIP(), []int{7}
}

func (x *UnassignDiskRequest) GetDiskId() *DiskId {
	if x != nil {
		return x.DiskId
	}
	return nil
}

type DescribeDiskModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId        string   `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	BlockSize     int64    `protobuf:"varint,2,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	Size          int64    `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Kind          DiskKind `protobuf:"varint,4,opt,name=kind,proto3,enum=yandex.cloud.priv.disk_manager.v1.DiskKind" json:"kind,omitempty"`
	TabletVersion int64    `protobuf:"varint,5,opt,name=tablet_version,json=tabletVersion,proto3" json:"tablet_version,omitempty"`
}

func (x *DescribeDiskModelRequest) Reset() {
	*x = DescribeDiskModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDiskModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDiskModelRequest) ProtoMessage() {}

func (x *DescribeDiskModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDiskModelRequest.ProtoReflect.Descriptor instead.
func (*DescribeDiskModelRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescGZIP(), []int{8}
}

func (x *DescribeDiskModelRequest) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *DescribeDiskModelRequest) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *DescribeDiskModelRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DescribeDiskModelRequest) GetKind() DiskKind {
	if x != nil {
		return x.Kind
	}
	return DiskKind_DISK_KIND_UNSPECIFIED
}

func (x *DescribeDiskModelRequest) GetTabletVersion() int64 {
	if x != nil {
		return x.TabletVersion
	}
	return 0
}

type StatDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskId *DiskId `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
}

func (x *StatDiskRequest) Reset() {
	*x = StatDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatDiskRequest) ProtoMessage() {}

func (x *StatDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatDiskRequest.ProtoReflect.Descriptor instead.
func (*StatDiskRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescGZIP(), []int{9}
}

func (x *StatDiskRequest) GetDiskId() *DiskId {
	if x != nil {
		return x.DiskId
	}
	return nil
}

type MigrateDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskId                     *DiskId `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	DstZoneId                  string  `protobuf:"bytes,2,opt,name=dst_zone_id,json=dstZoneId,proto3" json:"dst_zone_id,omitempty"`
	DstPlacementGroupId        string  `protobuf:"bytes,3,opt,name=dst_placement_group_id,json=dstPlacementGroupId,proto3" json:"dst_placement_group_id,omitempty"`
	DstPlacementPartitionIndex uint32  `protobuf:"varint,4,opt,name=dst_placement_partition_index,json=dstPlacementPartitionIndex,proto3" json:"dst_placement_partition_index,omitempty"`
}

func (x *MigrateDiskRequest) Reset() {
	*x = MigrateDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateDiskRequest) ProtoMessage() {}

func (x *MigrateDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateDiskRequest.ProtoReflect.Descriptor instead.
func (*MigrateDiskRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescGZIP(), []int{10}
}

func (x *MigrateDiskRequest) GetDiskId() *DiskId {
	if x != nil {
		return x.DiskId
	}
	return nil
}

func (x *MigrateDiskRequest) GetDstZoneId() string {
	if x != nil {
		return x.DstZoneId
	}
	return ""
}

func (x *MigrateDiskRequest) GetDstPlacementGroupId() string {
	if x != nil {
		return x.DstPlacementGroupId
	}
	return ""
}

func (x *MigrateDiskRequest) GetDstPlacementPartitionIndex() uint32 {
	if x != nil {
		return x.DstPlacementPartitionIndex
	}
	return 0
}

type MigrateDiskMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           MigrateDiskMetadata_Status `protobuf:"varint,1,opt,name=status,proto3,enum=yandex.cloud.priv.disk_manager.v1.MigrateDiskMetadata_Status" json:"status,omitempty"`
	Progress         float64                    `protobuf:"fixed64,2,opt,name=progress,proto3" json:"progress,omitempty"`
	SecondsRemaining int64                      `protobuf:"varint,3,opt,name=seconds_remaining,json=secondsRemaining,proto3" json:"seconds_remaining,omitempty"` // To copy the rest of the data.
	UpdatedAt        *timestamppb.Timestamp     `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *MigrateDiskMetadata) Reset() {
	*x = MigrateDiskMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateDiskMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateDiskMetadata) ProtoMessage() {}

func (x *MigrateDiskMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateDiskMetadata.ProtoReflect.Descriptor instead.
func (*MigrateDiskMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescGZIP(), []int{11}
}

func (x *MigrateDiskMetadata) GetStatus() MigrateDiskMetadata_Status {
	if x != nil {
		return x.Status
	}
	return MigrateDiskMetadata_STATUS_UNSPECIFIED
}

func (x *MigrateDiskMetadata) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *MigrateDiskMetadata) GetSecondsRemaining() int64 {
	if x != nil {
		return x.SecondsRemaining
	}
	return 0
}

func (x *MigrateDiskMetadata) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type SendMigrationSignalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationId string                            `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	Signal      SendMigrationSignalRequest_Signal `protobuf:"varint,2,opt,name=signal,proto3,enum=yandex.cloud.priv.disk_manager.v1.SendMigrationSignalRequest_Signal" json:"signal,omitempty"`
}

func (x *SendMigrationSignalRequest) Reset() {
	*x = SendMigrationSignalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMigrationSignalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMigrationSignalRequest) ProtoMessage() {}

func (x *SendMigrationSignalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMigrationSignalRequest.ProtoReflect.Descriptor instead.
func (*SendMigrationSignalRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescGZIP(), []int{12}
}

func (x *SendMigrationSignalRequest) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *SendMigrationSignalRequest) GetSignal() SendMigrationSignalRequest_Signal {
	if x != nil {
		return x.Signal
	}
	return SendMigrationSignalRequest_SIGNAL_UNSPECIFIED
}

type DescribeDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskId *DiskId `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
}

func (x *DescribeDiskRequest) Reset() {
	*x = DescribeDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDiskRequest) ProtoMessage() {}

func (x *DescribeDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDiskRequest.ProtoReflect.Descriptor instead.
func (*DescribeDiskRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescGZIP(), []int{13}
}

func (x *DescribeDiskRequest) GetDiskId() *DiskId {
	if x != nil {
		return x.DiskId
	}
	return nil
}

var File_yandex_cloud_priv_disk_manager_v1_disk_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDesc = []byte{
	0x0a, 0x34, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x72, 0x69, 0x76, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x23, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x69, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x06, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x73,
	0x72, 0x63, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x73, 0x72, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73,
	0x72, 0x63, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x69, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x69, 0x73, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x5a, 0x0a,
	0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x05, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x4a, 0x04, 0x08, 0x0f,
	0x10, 0x10, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x22, 0x30, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x71, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x64, 0x69, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x58, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x52,
	0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x07,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x69, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x59, 0x0a, 0x13, 0x55, 0x6e,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x42, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x64,
	0x69, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3f,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x69, 0x73, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x44, 0x69,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x69, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xf0, 0x01,
	0x0a, 0x12, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64,
	0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x73, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x73, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x1d, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x64, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xe7, 0x02, 0x0a, 0x13, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x75, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48,
	0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x22, 0xed, 0x01, 0x0a, 0x1a, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0x4e, 0x0a, 0x06, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x4d,
	0x49, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0x59, 0x0a, 0x13, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x42, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x64,
	0x69, 0x73, 0x6b, 0x49, 0x64, 0x32, 0xb6, 0x09, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x66, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a,
	0x05, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x33, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x06, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x34, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x08, 0x55,
	0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7c, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x32, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22,
	0x00, 0x12, 0x68, 0x0a, 0x07, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x13, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x12, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x73, 0x0a, 0x08, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x00, 0x42, 0x63,
	0x5a, 0x61, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62,
	0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6e, 0x62, 0x73, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescData = file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDesc
)

func file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescData)
	})
	return file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDescData
}

var file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_goTypes = []interface{}{
	(MigrateDiskMetadata_Status)(0),        // 0: yandex.cloud.priv.disk_manager.v1.MigrateDiskMetadata.Status
	(SendMigrationSignalRequest_Signal)(0), // 1: yandex.cloud.priv.disk_manager.v1.SendMigrationSignalRequest.Signal
	(*CreateDiskRequest)(nil),              // 2: yandex.cloud.priv.disk_manager.v1.CreateDiskRequest
	(*CreateDiskMetadata)(nil),             // 3: yandex.cloud.priv.disk_manager.v1.CreateDiskMetadata
	(*DeleteDiskRequest)(nil),              // 4: yandex.cloud.priv.disk_manager.v1.DeleteDiskRequest
	(*DeleteDiskMetadata)(nil),             // 5: yandex.cloud.priv.disk_manager.v1.DeleteDiskMetadata
	(*ResizeDiskRequest)(nil),              // 6: yandex.cloud.priv.disk_manager.v1.ResizeDiskRequest
	(*AlterDiskRequest)(nil),               // 7: yandex.cloud.priv.disk_manager.v1.AlterDiskRequest
	(*AssignDiskRequest)(nil),              // 8: yandex.cloud.priv.disk_manager.v1.AssignDiskRequest
	(*UnassignDiskRequest)(nil),            // 9: yandex.cloud.priv.disk_manager.v1.UnassignDiskRequest
	(*DescribeDiskModelRequest)(nil),       // 10: yandex.cloud.priv.disk_manager.v1.DescribeDiskModelRequest
	(*StatDiskRequest)(nil),                // 11: yandex.cloud.priv.disk_manager.v1.StatDiskRequest
	(*MigrateDiskRequest)(nil),             // 12: yandex.cloud.priv.disk_manager.v1.MigrateDiskRequest
	(*MigrateDiskMetadata)(nil),            // 13: yandex.cloud.priv.disk_manager.v1.MigrateDiskMetadata
	(*SendMigrationSignalRequest)(nil),     // 14: yandex.cloud.priv.disk_manager.v1.SendMigrationSignalRequest
	(*DescribeDiskRequest)(nil),            // 15: yandex.cloud.priv.disk_manager.v1.DescribeDiskRequest
	(*emptypb.Empty)(nil),                  // 16: google.protobuf.Empty
	(*DiskId)(nil),                         // 17: yandex.cloud.priv.disk_manager.v1.DiskId
	(DiskKind)(0),                          // 18: yandex.cloud.priv.disk_manager.v1.DiskKind
	(*EncryptionDesc)(nil),                 // 19: yandex.cloud.priv.disk_manager.v1.EncryptionDesc
	(*timestamppb.Timestamp)(nil),          // 20: google.protobuf.Timestamp
	(*operation.Operation)(nil),            // 21: yandex.cloud.priv.operation.Operation
	(*DiskModel)(nil),                      // 22: yandex.cloud.priv.disk_manager.v1.DiskModel
	(*DiskStats)(nil),                      // 23: yandex.cloud.priv.disk_manager.v1.DiskStats
	(*DiskParams)(nil),                     // 24: yandex.cloud.priv.disk_manager.v1.DiskParams
}
var file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_depIdxs = []int32{
	16, // 0: yandex.cloud.priv.disk_manager.v1.CreateDiskRequest.src_empty:type_name -> google.protobuf.Empty
	17, // 1: yandex.cloud.priv.disk_manager.v1.CreateDiskRequest.disk_id:type_name -> yandex.cloud.priv.disk_manager.v1.DiskId
	18, // 2: yandex.cloud.priv.disk_manager.v1.CreateDiskRequest.kind:type_name -> yandex.cloud.priv.disk_manager.v1.DiskKind
	19, // 3: yandex.cloud.priv.disk_manager.v1.CreateDiskRequest.encryption_desc:type_name -> yandex.cloud.priv.disk_manager.v1.EncryptionDesc
	17, // 4: yandex.cloud.priv.disk_manager.v1.DeleteDiskRequest.disk_id:type_name -> yandex.cloud.priv.disk_manager.v1.DiskId
	17, // 5: yandex.cloud.priv.disk_manager.v1.DeleteDiskMetadata.disk_id:type_name -> yandex.cloud.priv.disk_manager.v1.DiskId
	17, // 6: yandex.cloud.priv.disk_manager.v1.ResizeDiskRequest.disk_id:type_name -> yandex.cloud.priv.disk_manager.v1.DiskId
	17, // 7: yandex.cloud.priv.disk_manager.v1.AlterDiskRequest.disk_id:type_name -> yandex.cloud.priv.disk_manager.v1.DiskId
	17, // 8: yandex.cloud.priv.disk_manager.v1.AssignDiskRequest.disk_id:type_name -> yandex.cloud.priv.disk_manager.v1.DiskId
	17, // 9: yandex.cloud.priv.disk_manager.v1.UnassignDiskRequest.disk_id:type_name -> yandex.cloud.priv.disk_manager.v1.DiskId
	18, // 10: yandex.cloud.priv.disk_manager.v1.DescribeDiskModelRequest.kind:type_name -> yandex.cloud.priv.disk_manager.v1.DiskKind
	17, // 11: yandex.cloud.priv.disk_manager.v1.StatDiskRequest.disk_id:type_name -> yandex.cloud.priv.disk_manager.v1.DiskId
	17, // 12: yandex.cloud.priv.disk_manager.v1.MigrateDiskRequest.disk_id:type_name -> yandex.cloud.priv.disk_manager.v1.DiskId
	0,  // 13: yandex.cloud.priv.disk_manager.v1.MigrateDiskMetadata.status:type_name -> yandex.cloud.priv.disk_manager.v1.MigrateDiskMetadata.Status
	20, // 14: yandex.cloud.priv.disk_manager.v1.MigrateDiskMetadata.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 15: yandex.cloud.priv.disk_manager.v1.SendMigrationSignalRequest.signal:type_name -> yandex.cloud.priv.disk_manager.v1.SendMigrationSignalRequest.Signal
	17, // 16: yandex.cloud.priv.disk_manager.v1.DescribeDiskRequest.disk_id:type_name -> yandex.cloud.priv.disk_manager.v1.DiskId
	2,  // 17: yandex.cloud.priv.disk_manager.v1.DiskService.Create:input_type -> yandex.cloud.priv.disk_manager.v1.CreateDiskRequest
	4,  // 18: yandex.cloud.priv.disk_manager.v1.DiskService.Delete:input_type -> yandex.cloud.priv.disk_manager.v1.DeleteDiskRequest
	6,  // 19: yandex.cloud.priv.disk_manager.v1.DiskService.Resize:input_type -> yandex.cloud.priv.disk_manager.v1.ResizeDiskRequest
	7,  // 20: yandex.cloud.priv.disk_manager.v1.DiskService.Alter:input_type -> yandex.cloud.priv.disk_manager.v1.AlterDiskRequest
	8,  // 21: yandex.cloud.priv.disk_manager.v1.DiskService.Assign:input_type -> yandex.cloud.priv.disk_manager.v1.AssignDiskRequest
	9,  // 22: yandex.cloud.priv.disk_manager.v1.DiskService.Unassign:input_type -> yandex.cloud.priv.disk_manager.v1.UnassignDiskRequest
	10, // 23: yandex.cloud.priv.disk_manager.v1.DiskService.DescribeModel:input_type -> yandex.cloud.priv.disk_manager.v1.DescribeDiskModelRequest
	11, // 24: yandex.cloud.priv.disk_manager.v1.DiskService.Stat:input_type -> yandex.cloud.priv.disk_manager.v1.StatDiskRequest
	12, // 25: yandex.cloud.priv.disk_manager.v1.DiskService.Migrate:input_type -> yandex.cloud.priv.disk_manager.v1.MigrateDiskRequest
	14, // 26: yandex.cloud.priv.disk_manager.v1.DiskService.SendMigrationSignal:input_type -> yandex.cloud.priv.disk_manager.v1.SendMigrationSignalRequest
	15, // 27: yandex.cloud.priv.disk_manager.v1.DiskService.Describe:input_type -> yandex.cloud.priv.disk_manager.v1.DescribeDiskRequest
	21, // 28: yandex.cloud.priv.disk_manager.v1.DiskService.Create:output_type -> yandex.cloud.priv.operation.Operation
	21, // 29: yandex.cloud.priv.disk_manager.v1.DiskService.Delete:output_type -> yandex.cloud.priv.operation.Operation
	21, // 30: yandex.cloud.priv.disk_manager.v1.DiskService.Resize:output_type -> yandex.cloud.priv.operation.Operation
	21, // 31: yandex.cloud.priv.disk_manager.v1.DiskService.Alter:output_type -> yandex.cloud.priv.operation.Operation
	21, // 32: yandex.cloud.priv.disk_manager.v1.DiskService.Assign:output_type -> yandex.cloud.priv.operation.Operation
	21, // 33: yandex.cloud.priv.disk_manager.v1.DiskService.Unassign:output_type -> yandex.cloud.priv.operation.Operation
	22, // 34: yandex.cloud.priv.disk_manager.v1.DiskService.DescribeModel:output_type -> yandex.cloud.priv.disk_manager.v1.DiskModel
	23, // 35: yandex.cloud.priv.disk_manager.v1.DiskService.Stat:output_type -> yandex.cloud.priv.disk_manager.v1.DiskStats
	21, // 36: yandex.cloud.priv.disk_manager.v1.DiskService.Migrate:output_type -> yandex.cloud.priv.operation.Operation
	16, // 37: yandex.cloud.priv.disk_manager.v1.DiskService.SendMigrationSignal:output_type -> google.protobuf.Empty
	24, // 38: yandex.cloud.priv.disk_manager.v1.DiskService.Describe:output_type -> yandex.cloud.priv.disk_manager.v1.DiskParams
	28, // [28:39] is the sub-list for method output_type
	17, // [17:28] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_init() }
func file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_init() {
	if File_yandex_cloud_priv_disk_manager_v1_disk_service_proto != nil {
		return
	}
	file_yandex_cloud_priv_disk_manager_v1_disk_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDiskMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDiskMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResizeDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnassignDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDiskModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrateDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrateDiskMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMigrationSignalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CreateDiskRequest_SrcEmpty)(nil),
		(*CreateDiskRequest_SrcImageId)(nil),
		(*CreateDiskRequest_SrcSnapshotId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_priv_disk_manager_v1_disk_service_proto = out.File
	file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_rawDesc = nil
	file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_goTypes = nil
	file_yandex_cloud_priv_disk_manager_v1_disk_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DiskServiceClient is the client API for DiskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiskServiceClient interface {
	// Returns operation with:
	// metadata: CreateDiskMetadata
	// response: google.protobuf.Empty
	Create(ctx context.Context, in *CreateDiskRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Delete the disk without deleting its snapshots.
	//
	// Returns operation with:
	// metadata: DeleteDiskMetadata
	// response: google.protobuf.Empty
	Delete(ctx context.Context, in *DeleteDiskRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Returns operation with:
	// response: google.protobuf.Empty
	Resize(ctx context.Context, in *ResizeDiskRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Returns operation with:
	// response: google.protobuf.Empty
	Alter(ctx context.Context, in *AlterDiskRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Should be called before starting the VM with proper token.
	//
	// Returns operation with:
	// response: google.protobuf.Empty
	Assign(ctx context.Context, in *AssignDiskRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Should be called after stopping the VM.
	//
	// Returns operation with:
	// response: google.protobuf.Empty
	Unassign(ctx context.Context, in *UnassignDiskRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	DescribeModel(ctx context.Context, in *DescribeDiskModelRequest, opts ...grpc.CallOption) (*DiskModel, error)
	Stat(ctx context.Context, in *StatDiskRequest, opts ...grpc.CallOption) (*DiskStats, error)
	// Creates a disk in the destination zone and starts replicating data to it from the source disk, and after replication is finished, replaces the source disk with the destination disk.
	//
	// In order to finish this operation, firstly FINISH_REPLICATION, and then FINISH_MIGRATION signals should be sent via |SendMigrationSignal|.
	//
	// Can be cancelled by performing |operations.Cancel| on returned operation, but only before FINISH_MIGRATION signal has been sent.
	//
	// Returns operation with:
	// metadata: MigrateDiskMetadata
	// response: google.protobuf.Empty
	Migrate(ctx context.Context, in *MigrateDiskRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Sends a signal to the migration operation, advancing migration process forward.
	SendMigrationSignal(ctx context.Context, in *SendMigrationSignalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Describe(ctx context.Context, in *DescribeDiskRequest, opts ...grpc.CallOption) (*DiskParams, error)
}

type diskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiskServiceClient(cc grpc.ClientConnInterface) DiskServiceClient {
	return &diskServiceClient{cc}
}

func (c *diskServiceClient) Create(ctx context.Context, in *CreateDiskRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.disk_manager.v1.DiskService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskServiceClient) Delete(ctx context.Context, in *DeleteDiskRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.disk_manager.v1.DiskService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskServiceClient) Resize(ctx context.Context, in *ResizeDiskRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.disk_manager.v1.DiskService/Resize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskServiceClient) Alter(ctx context.Context, in *AlterDiskRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.disk_manager.v1.DiskService/Alter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskServiceClient) Assign(ctx context.Context, in *AssignDiskRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.disk_manager.v1.DiskService/Assign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskServiceClient) Unassign(ctx context.Context, in *UnassignDiskRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.disk_manager.v1.DiskService/Unassign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskServiceClient) DescribeModel(ctx context.Context, in *DescribeDiskModelRequest, opts ...grpc.CallOption) (*DiskModel, error) {
	out := new(DiskModel)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.disk_manager.v1.DiskService/DescribeModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskServiceClient) Stat(ctx context.Context, in *StatDiskRequest, opts ...grpc.CallOption) (*DiskStats, error) {
	out := new(DiskStats)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.disk_manager.v1.DiskService/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskServiceClient) Migrate(ctx context.Context, in *MigrateDiskRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.disk_manager.v1.DiskService/Migrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskServiceClient) SendMigrationSignal(ctx context.Context, in *SendMigrationSignalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.disk_manager.v1.DiskService/SendMigrationSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskServiceClient) Describe(ctx context.Context, in *DescribeDiskRequest, opts ...grpc.CallOption) (*DiskParams, error) {
	out := new(DiskParams)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.disk_manager.v1.DiskService/Describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiskServiceServer is the server API for DiskService service.
type DiskServiceServer interface {
	// Returns operation with:
	// metadata: CreateDiskMetadata
	// response: google.protobuf.Empty
	Create(context.Context, *CreateDiskRequest) (*operation.Operation, error)
	// Delete the disk without deleting its snapshots.
	//
	// Returns operation with:
	// metadata: DeleteDiskMetadata
	// response: google.protobuf.Empty
	Delete(context.Context, *DeleteDiskRequest) (*operation.Operation, error)
	// Returns operation with:
	// response: google.protobuf.Empty
	Resize(context.Context, *ResizeDiskRequest) (*operation.Operation, error)
	// Returns operation with:
	// response: google.protobuf.Empty
	Alter(context.Context, *AlterDiskRequest) (*operation.Operation, error)
	// Should be called before starting the VM with proper token.
	//
	// Returns operation with:
	// response: google.protobuf.Empty
	Assign(context.Context, *AssignDiskRequest) (*operation.Operation, error)
	// Should be called after stopping the VM.
	//
	// Returns operation with:
	// response: google.protobuf.Empty
	Unassign(context.Context, *UnassignDiskRequest) (*operation.Operation, error)
	DescribeModel(context.Context, *DescribeDiskModelRequest) (*DiskModel, error)
	Stat(context.Context, *StatDiskRequest) (*DiskStats, error)
	// Creates a disk in the destination zone and starts replicating data to it from the source disk, and after replication is finished, replaces the source disk with the destination disk.
	//
	// In order to finish this operation, firstly FINISH_REPLICATION, and then FINISH_MIGRATION signals should be sent via |SendMigrationSignal|.
	//
	// Can be cancelled by performing |operations.Cancel| on returned operation, but only before FINISH_MIGRATION signal has been sent.
	//
	// Returns operation with:
	// metadata: MigrateDiskMetadata
	// response: google.protobuf.Empty
	Migrate(context.Context, *MigrateDiskRequest) (*operation.Operation, error)
	// Sends a signal to the migration operation, advancing migration process forward.
	SendMigrationSignal(context.Context, *SendMigrationSignalRequest) (*emptypb.Empty, error)
	Describe(context.Context, *DescribeDiskRequest) (*DiskParams, error)
}

// UnimplementedDiskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDiskServiceServer struct {
}

func (*UnimplementedDiskServiceServer) Create(context.Context, *CreateDiskRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedDiskServiceServer) Delete(context.Context, *DeleteDiskRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedDiskServiceServer) Resize(context.Context, *ResizeDiskRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resize not implemented")
}
func (*UnimplementedDiskServiceServer) Alter(context.Context, *AlterDiskRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alter not implemented")
}
func (*UnimplementedDiskServiceServer) Assign(context.Context, *AssignDiskRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assign not implemented")
}
func (*UnimplementedDiskServiceServer) Unassign(context.Context, *UnassignDiskRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unassign not implemented")
}
func (*UnimplementedDiskServiceServer) DescribeModel(context.Context, *DescribeDiskModelRequest) (*DiskModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeModel not implemented")
}
func (*UnimplementedDiskServiceServer) Stat(context.Context, *StatDiskRequest) (*DiskStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (*UnimplementedDiskServiceServer) Migrate(context.Context, *MigrateDiskRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Migrate not implemented")
}
func (*UnimplementedDiskServiceServer) SendMigrationSignal(context.Context, *SendMigrationSignalRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMigrationSignal not implemented")
}
func (*UnimplementedDiskServiceServer) Describe(context.Context, *DescribeDiskRequest) (*DiskParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}

func RegisterDiskServiceServer(s *grpc.Server, srv DiskServiceServer) {
	s.RegisterService(&_DiskService_serviceDesc, srv)
}

func _DiskService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.disk_manager.v1.DiskService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).Create(ctx, req.(*CreateDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.disk_manager.v1.DiskService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).Delete(ctx, req.(*DeleteDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskService_Resize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).Resize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.disk_manager.v1.DiskService/Resize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).Resize(ctx, req.(*ResizeDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskService_Alter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).Alter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.disk_manager.v1.DiskService/Alter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).Alter(ctx, req.(*AlterDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskService_Assign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).Assign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.disk_manager.v1.DiskService/Assign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).Assign(ctx, req.(*AssignDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskService_Unassign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).Unassign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.disk_manager.v1.DiskService/Unassign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).Unassign(ctx, req.(*UnassignDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskService_DescribeModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeDiskModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).DescribeModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.disk_manager.v1.DiskService/DescribeModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).DescribeModel(ctx, req.(*DescribeDiskModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskService_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.disk_manager.v1.DiskService/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).Stat(ctx, req.(*StatDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskService_Migrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).Migrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.disk_manager.v1.DiskService/Migrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).Migrate(ctx, req.(*MigrateDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskService_SendMigrationSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMigrationSignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).SendMigrationSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.disk_manager.v1.DiskService/SendMigrationSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).SendMigrationSignal(ctx, req.(*SendMigrationSignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskService_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.disk_manager.v1.DiskService/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).Describe(ctx, req.(*DescribeDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DiskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.priv.disk_manager.v1.DiskService",
	HandlerType: (*DiskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DiskService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DiskService_Delete_Handler,
		},
		{
			MethodName: "Resize",
			Handler:    _DiskService_Resize_Handler,
		},
		{
			MethodName: "Alter",
			Handler:    _DiskService_Alter_Handler,
		},
		{
			MethodName: "Assign",
			Handler:    _DiskService_Assign_Handler,
		},
		{
			MethodName: "Unassign",
			Handler:    _DiskService_Unassign_Handler,
		},
		{
			MethodName: "DescribeModel",
			Handler:    _DiskService_DescribeModel_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _DiskService_Stat_Handler,
		},
		{
			MethodName: "Migrate",
			Handler:    _DiskService_Migrate_Handler,
		},
		{
			MethodName: "SendMigrationSignal",
			Handler:    _DiskService_SendMigrationSignal_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _DiskService_Describe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/priv/disk_manager/v1/disk_service.proto",
}
