// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/disk_manager/internal/api/private_service.proto

package api

import (
	context "context"
	operation "github.com/ydb-platform/nbs/cloud/api/operation"
	v1 "github.com/ydb-platform/nbs/cloud/disk_manager/api/yandex/cloud/priv/disk_manager/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RebaseOverlayDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskId           *v1.DiskId `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	BaseDiskId       string     `protobuf:"bytes,4,opt,name=base_disk_id,json=baseDiskId,proto3" json:"base_disk_id,omitempty"`
	TargetBaseDiskId string     `protobuf:"bytes,2,opt,name=target_base_disk_id,json=targetBaseDiskId,proto3" json:"target_base_disk_id,omitempty"`
	SlotGeneration   uint64     `protobuf:"varint,3,opt,name=slot_generation,json=slotGeneration,proto3" json:"slot_generation,omitempty"`
}

func (x *RebaseOverlayDiskRequest) Reset() {
	*x = RebaseOverlayDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebaseOverlayDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebaseOverlayDiskRequest) ProtoMessage() {}

func (x *RebaseOverlayDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebaseOverlayDiskRequest.ProtoReflect.Descriptor instead.
func (*RebaseOverlayDiskRequest) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_api_private_service_proto_rawDescGZIP(), []int{0}
}

func (x *RebaseOverlayDiskRequest) GetDiskId() *v1.DiskId {
	if x != nil {
		return x.DiskId
	}
	return nil
}

func (x *RebaseOverlayDiskRequest) GetBaseDiskId() string {
	if x != nil {
		return x.BaseDiskId
	}
	return ""
}

func (x *RebaseOverlayDiskRequest) GetTargetBaseDiskId() string {
	if x != nil {
		return x.TargetBaseDiskId
	}
	return ""
}

func (x *RebaseOverlayDiskRequest) GetSlotGeneration() uint64 {
	if x != nil {
		return x.SlotGeneration
	}
	return 0
}

type RetireBaseDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseDiskId          string     `protobuf:"bytes,1,opt,name=base_disk_id,json=baseDiskId,proto3" json:"base_disk_id,omitempty"`
	SrcDiskId           *v1.DiskId `protobuf:"bytes,2,opt,name=src_disk_id,json=srcDiskId,proto3" json:"src_disk_id,omitempty"`
	SrcDiskCheckpointId string     `protobuf:"bytes,3,opt,name=src_disk_checkpoint_id,json=srcDiskCheckpointId,proto3" json:"src_disk_checkpoint_id,omitempty"`
}

func (x *RetireBaseDiskRequest) Reset() {
	*x = RetireBaseDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetireBaseDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetireBaseDiskRequest) ProtoMessage() {}

func (x *RetireBaseDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetireBaseDiskRequest.ProtoReflect.Descriptor instead.
func (*RetireBaseDiskRequest) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_api_private_service_proto_rawDescGZIP(), []int{1}
}

func (x *RetireBaseDiskRequest) GetBaseDiskId() string {
	if x != nil {
		return x.BaseDiskId
	}
	return ""
}

func (x *RetireBaseDiskRequest) GetSrcDiskId() *v1.DiskId {
	if x != nil {
		return x.SrcDiskId
	}
	return nil
}

func (x *RetireBaseDiskRequest) GetSrcDiskCheckpointId() string {
	if x != nil {
		return x.SrcDiskCheckpointId
	}
	return ""
}

type RetireBaseDisksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId          string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	ZoneId           string `protobuf:"bytes,2,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	UseBaseDiskAsSrc bool   `protobuf:"varint,3,opt,name=use_base_disk_as_src,json=useBaseDiskAsSrc,proto3" json:"use_base_disk_as_src,omitempty"`
}

func (x *RetireBaseDisksRequest) Reset() {
	*x = RetireBaseDisksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetireBaseDisksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetireBaseDisksRequest) ProtoMessage() {}

func (x *RetireBaseDisksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetireBaseDisksRequest.ProtoReflect.Descriptor instead.
func (*RetireBaseDisksRequest) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_api_private_service_proto_rawDescGZIP(), []int{2}
}

func (x *RetireBaseDisksRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *RetireBaseDisksRequest) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *RetireBaseDisksRequest) GetUseBaseDiskAsSrc() bool {
	if x != nil {
		return x.UseBaseDiskAsSrc
	}
	return false
}

type ConfigurePoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId      string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	ZoneId       string `protobuf:"bytes,2,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	Capacity     int64  `protobuf:"varint,4,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UseImageSize bool   `protobuf:"varint,5,opt,name=use_image_size,json=useImageSize,proto3" json:"use_image_size,omitempty"` // NBS-2005
}

func (x *ConfigurePoolRequest) Reset() {
	*x = ConfigurePoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurePoolRequest) ProtoMessage() {}

func (x *ConfigurePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurePoolRequest.ProtoReflect.Descriptor instead.
func (*ConfigurePoolRequest) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_api_private_service_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigurePoolRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *ConfigurePoolRequest) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *ConfigurePoolRequest) GetCapacity() int64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *ConfigurePoolRequest) GetUseImageSize() bool {
	if x != nil {
		return x.UseImageSize
	}
	return false
}

type DeletePoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	ZoneId  string `protobuf:"bytes,2,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
}

func (x *DeletePoolRequest) Reset() {
	*x = DeletePoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePoolRequest) ProtoMessage() {}

func (x *DeletePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePoolRequest.ProtoReflect.Descriptor instead.
func (*DeletePoolRequest) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_api_private_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeletePoolRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *DeletePoolRequest) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

type ListDisksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderId       string                 `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	CreatingBefore *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creating_before,json=creatingBefore,proto3" json:"creating_before,omitempty"`
}

func (x *ListDisksRequest) Reset() {
	*x = ListDisksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDisksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDisksRequest) ProtoMessage() {}

func (x *ListDisksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDisksRequest.ProtoReflect.Descriptor instead.
func (*ListDisksRequest) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_api_private_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListDisksRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListDisksRequest) GetCreatingBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatingBefore
	}
	return nil
}

type ListDisksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskIds []string `protobuf:"bytes,1,rep,name=disk_ids,json=diskIds,proto3" json:"disk_ids,omitempty"`
}

func (x *ListDisksResponse) Reset() {
	*x = ListDisksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDisksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDisksResponse) ProtoMessage() {}

func (x *ListDisksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDisksResponse.ProtoReflect.Descriptor instead.
func (*ListDisksResponse) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_api_private_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListDisksResponse) GetDiskIds() []string {
	if x != nil {
		return x.DiskIds
	}
	return nil
}

type ListImagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderId       string                 `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	CreatingBefore *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creating_before,json=creatingBefore,proto3" json:"creating_before,omitempty"`
}

func (x *ListImagesRequest) Reset() {
	*x = ListImagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImagesRequest) ProtoMessage() {}

func (x *ListImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImagesRequest.ProtoReflect.Descriptor instead.
func (*ListImagesRequest) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_api_private_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListImagesRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListImagesRequest) GetCreatingBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatingBefore
	}
	return nil
}

type ListImagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageIds []string `protobuf:"bytes,1,rep,name=image_ids,json=imageIds,proto3" json:"image_ids,omitempty"`
}

func (x *ListImagesResponse) Reset() {
	*x = ListImagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImagesResponse) ProtoMessage() {}

func (x *ListImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImagesResponse.ProtoReflect.Descriptor instead.
func (*ListImagesResponse) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_api_private_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListImagesResponse) GetImageIds() []string {
	if x != nil {
		return x.ImageIds
	}
	return nil
}

type ListSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderId       string                 `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	CreatingBefore *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creating_before,json=creatingBefore,proto3" json:"creating_before,omitempty"`
}

func (x *ListSnapshotsRequest) Reset() {
	*x = ListSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSnapshotsRequest) ProtoMessage() {}

func (x *ListSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*ListSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_api_private_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListSnapshotsRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListSnapshotsRequest) GetCreatingBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatingBefore
	}
	return nil
}

type ListSnapshotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotIds []string `protobuf:"bytes,1,rep,name=snapshot_ids,json=snapshotIds,proto3" json:"snapshot_ids,omitempty"`
}

func (x *ListSnapshotsResponse) Reset() {
	*x = ListSnapshotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSnapshotsResponse) ProtoMessage() {}

func (x *ListSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*ListSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_api_private_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListSnapshotsResponse) GetSnapshotIds() []string {
	if x != nil {
		return x.SnapshotIds
	}
	return nil
}

type ListFilesystemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderId       string                 `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	CreatingBefore *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creating_before,json=creatingBefore,proto3" json:"creating_before,omitempty"`
}

func (x *ListFilesystemsRequest) Reset() {
	*x = ListFilesystemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilesystemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesystemsRequest) ProtoMessage() {}

func (x *ListFilesystemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesystemsRequest.ProtoReflect.Descriptor instead.
func (*ListFilesystemsRequest) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_api_private_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListFilesystemsRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListFilesystemsRequest) GetCreatingBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatingBefore
	}
	return nil
}

type ListFilesystemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesystemIds []string `protobuf:"bytes,1,rep,name=filesystem_ids,json=filesystemIds,proto3" json:"filesystem_ids,omitempty"`
}

func (x *ListFilesystemsResponse) Reset() {
	*x = ListFilesystemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilesystemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesystemsResponse) ProtoMessage() {}

func (x *ListFilesystemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesystemsResponse.ProtoReflect.Descriptor instead.
func (*ListFilesystemsResponse) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_api_private_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListFilesystemsResponse) GetFilesystemIds() []string {
	if x != nil {
		return x.FilesystemIds
	}
	return nil
}

type ListPlacementGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderId       string                 `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	CreatingBefore *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creating_before,json=creatingBefore,proto3" json:"creating_before,omitempty"`
}

func (x *ListPlacementGroupsRequest) Reset() {
	*x = ListPlacementGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlacementGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlacementGroupsRequest) ProtoMessage() {}

func (x *ListPlacementGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlacementGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListPlacementGroupsRequest) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_api_private_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListPlacementGroupsRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListPlacementGroupsRequest) GetCreatingBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatingBefore
	}
	return nil
}

type ListPlacementGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlacementGroupIds []string `protobuf:"bytes,1,rep,name=placement_group_ids,json=placementGroupIds,proto3" json:"placement_group_ids,omitempty"`
}

func (x *ListPlacementGroupsResponse) Reset() {
	*x = ListPlacementGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlacementGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlacementGroupsResponse) ProtoMessage() {}

func (x *ListPlacementGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlacementGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListPlacementGroupsResponse) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_api_private_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListPlacementGroupsResponse) GetPlacementGroupIds() []string {
	if x != nil {
		return x.PlacementGroupIds
	}
	return nil
}

type GetAliveNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*GetAliveNodesResponse_Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *GetAliveNodesResponse) Reset() {
	*x = GetAliveNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAliveNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAliveNodesResponse) ProtoMessage() {}

func (x *GetAliveNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAliveNodesResponse.ProtoReflect.Descriptor instead.
func (*GetAliveNodesResponse) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_api_private_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetAliveNodesResponse) GetNodes() []*GetAliveNodesResponse_Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type GetAliveNodesResponse_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host              string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	LastHeartbeat     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_heartbeat,json=lastHeartbeat,proto3" json:"last_heartbeat,omitempty"`
	InflightTaskCount uint32                 `protobuf:"varint,3,opt,name=inflight_task_count,json=inflightTaskCount,proto3" json:"inflight_task_count,omitempty"`
}

func (x *GetAliveNodesResponse_Node) Reset() {
	*x = GetAliveNodesResponse_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAliveNodesResponse_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAliveNodesResponse_Node) ProtoMessage() {}

func (x *GetAliveNodesResponse_Node) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAliveNodesResponse_Node.ProtoReflect.Descriptor instead.
func (*GetAliveNodesResponse_Node) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_api_private_service_proto_rawDescGZIP(), []int{15, 0}
}

func (x *GetAliveNodesResponse_Node) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GetAliveNodesResponse_Node) GetLastHeartbeat() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHeartbeat
	}
	return nil
}

func (x *GetAliveNodesResponse_Node) GetInflightTaskCount() uint32 {
	if x != nil {
		return x.InflightTaskCount
	}
	return 0
}

var File_cloud_disk_manager_internal_api_private_service_proto protoreflect.FileDescriptor

var file_cloud_disk_manager_internal_api_private_service_proto_rawDesc = []byte{
	0x0a, 0x35, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x23, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2c, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72,
	0x69, 0x76, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x01,
	0x0a, 0x18, 0x52, 0x65, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x44,
	0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x6c, 0x6f, 0x74, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb9, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x74,
	0x69, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x44, 0x69,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x6b, 0x49, 0x64, 0x52, 0x09, 0x73, 0x72, 0x63, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x16, 0x73, 0x72, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x72, 0x63, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x16, 0x52, 0x65, 0x74, 0x69, 0x72, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x61, 0x73, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x75, 0x73, 0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x53,
	0x72, 0x63, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x47, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64,
	0x22, 0x74, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x43, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0x2e, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x69, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x22, 0x75, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0x31, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73,
	0x22, 0x78, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0x3a, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x49, 0x64, 0x73, 0x22, 0x7a, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x43, 0x0a,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x22, 0x40, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x73, 0x22, 0x7e, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x43, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x22, 0x4d, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x1a, 0x8d, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x69, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x32, 0x9b, 0x08, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x16, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5a, 0x0a, 0x11, 0x52, 0x65, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a,
	0x0e, 0x52, 0x65, 0x74, 0x69, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x12,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x74, 0x69, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x69, 0x72, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x74,
	0x69, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x11, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x52, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12,
	0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6e, 0x62,
	0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70,
	0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_disk_manager_internal_api_private_service_proto_rawDescOnce sync.Once
	file_cloud_disk_manager_internal_api_private_service_proto_rawDescData = file_cloud_disk_manager_internal_api_private_service_proto_rawDesc
)

func file_cloud_disk_manager_internal_api_private_service_proto_rawDescGZIP() []byte {
	file_cloud_disk_manager_internal_api_private_service_proto_rawDescOnce.Do(func() {
		file_cloud_disk_manager_internal_api_private_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_disk_manager_internal_api_private_service_proto_rawDescData)
	})
	return file_cloud_disk_manager_internal_api_private_service_proto_rawDescData
}

var file_cloud_disk_manager_internal_api_private_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_cloud_disk_manager_internal_api_private_service_proto_goTypes = []interface{}{
	(*RebaseOverlayDiskRequest)(nil),    // 0: api.RebaseOverlayDiskRequest
	(*RetireBaseDiskRequest)(nil),       // 1: api.RetireBaseDiskRequest
	(*RetireBaseDisksRequest)(nil),      // 2: api.RetireBaseDisksRequest
	(*ConfigurePoolRequest)(nil),        // 3: api.ConfigurePoolRequest
	(*DeletePoolRequest)(nil),           // 4: api.DeletePoolRequest
	(*ListDisksRequest)(nil),            // 5: api.ListDisksRequest
	(*ListDisksResponse)(nil),           // 6: api.ListDisksResponse
	(*ListImagesRequest)(nil),           // 7: api.ListImagesRequest
	(*ListImagesResponse)(nil),          // 8: api.ListImagesResponse
	(*ListSnapshotsRequest)(nil),        // 9: api.ListSnapshotsRequest
	(*ListSnapshotsResponse)(nil),       // 10: api.ListSnapshotsResponse
	(*ListFilesystemsRequest)(nil),      // 11: api.ListFilesystemsRequest
	(*ListFilesystemsResponse)(nil),     // 12: api.ListFilesystemsResponse
	(*ListPlacementGroupsRequest)(nil),  // 13: api.ListPlacementGroupsRequest
	(*ListPlacementGroupsResponse)(nil), // 14: api.ListPlacementGroupsResponse
	(*GetAliveNodesResponse)(nil),       // 15: api.GetAliveNodesResponse
	(*GetAliveNodesResponse_Node)(nil),  // 16: api.GetAliveNodesResponse.Node
	(*v1.DiskId)(nil),                   // 17: yandex.cloud.priv.disk_manager.v1.DiskId
	(*timestamppb.Timestamp)(nil),       // 18: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),               // 19: google.protobuf.Empty
	(*operation.Operation)(nil),         // 20: yandex.cloud.priv.operation.Operation
}
var file_cloud_disk_manager_internal_api_private_service_proto_depIdxs = []int32{
	17, // 0: api.RebaseOverlayDiskRequest.disk_id:type_name -> yandex.cloud.priv.disk_manager.v1.DiskId
	17, // 1: api.RetireBaseDiskRequest.src_disk_id:type_name -> yandex.cloud.priv.disk_manager.v1.DiskId
	18, // 2: api.ListDisksRequest.creating_before:type_name -> google.protobuf.Timestamp
	18, // 3: api.ListImagesRequest.creating_before:type_name -> google.protobuf.Timestamp
	18, // 4: api.ListSnapshotsRequest.creating_before:type_name -> google.protobuf.Timestamp
	18, // 5: api.ListFilesystemsRequest.creating_before:type_name -> google.protobuf.Timestamp
	18, // 6: api.ListPlacementGroupsRequest.creating_before:type_name -> google.protobuf.Timestamp
	16, // 7: api.GetAliveNodesResponse.nodes:type_name -> api.GetAliveNodesResponse.Node
	18, // 8: api.GetAliveNodesResponse.Node.last_heartbeat:type_name -> google.protobuf.Timestamp
	19, // 9: api.PrivateService.ScheduleBlankOperation:input_type -> google.protobuf.Empty
	0,  // 10: api.PrivateService.RebaseOverlayDisk:input_type -> api.RebaseOverlayDiskRequest
	1,  // 11: api.PrivateService.RetireBaseDisk:input_type -> api.RetireBaseDiskRequest
	2,  // 12: api.PrivateService.RetireBaseDisks:input_type -> api.RetireBaseDisksRequest
	19, // 13: api.PrivateService.OptimizeBaseDisks:input_type -> google.protobuf.Empty
	3,  // 14: api.PrivateService.ConfigurePool:input_type -> api.ConfigurePoolRequest
	4,  // 15: api.PrivateService.DeletePool:input_type -> api.DeletePoolRequest
	5,  // 16: api.PrivateService.ListDisks:input_type -> api.ListDisksRequest
	7,  // 17: api.PrivateService.ListImages:input_type -> api.ListImagesRequest
	9,  // 18: api.PrivateService.ListSnapshots:input_type -> api.ListSnapshotsRequest
	11, // 19: api.PrivateService.ListFilesystems:input_type -> api.ListFilesystemsRequest
	13, // 20: api.PrivateService.ListPlacementGroups:input_type -> api.ListPlacementGroupsRequest
	19, // 21: api.PrivateService.GetAliveNodes:input_type -> google.protobuf.Empty
	20, // 22: api.PrivateService.ScheduleBlankOperation:output_type -> yandex.cloud.priv.operation.Operation
	20, // 23: api.PrivateService.RebaseOverlayDisk:output_type -> yandex.cloud.priv.operation.Operation
	20, // 24: api.PrivateService.RetireBaseDisk:output_type -> yandex.cloud.priv.operation.Operation
	20, // 25: api.PrivateService.RetireBaseDisks:output_type -> yandex.cloud.priv.operation.Operation
	20, // 26: api.PrivateService.OptimizeBaseDisks:output_type -> yandex.cloud.priv.operation.Operation
	20, // 27: api.PrivateService.ConfigurePool:output_type -> yandex.cloud.priv.operation.Operation
	20, // 28: api.PrivateService.DeletePool:output_type -> yandex.cloud.priv.operation.Operation
	6,  // 29: api.PrivateService.ListDisks:output_type -> api.ListDisksResponse
	8,  // 30: api.PrivateService.ListImages:output_type -> api.ListImagesResponse
	10, // 31: api.PrivateService.ListSnapshots:output_type -> api.ListSnapshotsResponse
	12, // 32: api.PrivateService.ListFilesystems:output_type -> api.ListFilesystemsResponse
	14, // 33: api.PrivateService.ListPlacementGroups:output_type -> api.ListPlacementGroupsResponse
	15, // 34: api.PrivateService.GetAliveNodes:output_type -> api.GetAliveNodesResponse
	22, // [22:35] is the sub-list for method output_type
	9,  // [9:22] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_cloud_disk_manager_internal_api_private_service_proto_init() }
func file_cloud_disk_manager_internal_api_private_service_proto_init() {
	if File_cloud_disk_manager_internal_api_private_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebaseOverlayDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetireBaseDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetireBaseDisksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurePoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDisksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDisksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSnapshotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilesystemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilesystemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlacementGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlacementGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAliveNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_manager_internal_api_private_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAliveNodesResponse_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_disk_manager_internal_api_private_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cloud_disk_manager_internal_api_private_service_proto_goTypes,
		DependencyIndexes: file_cloud_disk_manager_internal_api_private_service_proto_depIdxs,
		MessageInfos:      file_cloud_disk_manager_internal_api_private_service_proto_msgTypes,
	}.Build()
	File_cloud_disk_manager_internal_api_private_service_proto = out.File
	file_cloud_disk_manager_internal_api_private_service_proto_rawDesc = nil
	file_cloud_disk_manager_internal_api_private_service_proto_goTypes = nil
	file_cloud_disk_manager_internal_api_private_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PrivateServiceClient is the client API for PrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrivateServiceClient interface {
	// Schedules blank (no op) operation, used for testing.
	ScheduleBlankOperation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*operation.Operation, error)
	RebaseOverlayDisk(ctx context.Context, in *RebaseOverlayDiskRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	RetireBaseDisk(ctx context.Context, in *RetireBaseDiskRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	RetireBaseDisks(ctx context.Context, in *RetireBaseDisksRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	OptimizeBaseDisks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*operation.Operation, error)
	ConfigurePool(ctx context.Context, in *ConfigurePoolRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	DeletePool(ctx context.Context, in *DeletePoolRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Lists all existing disk ids in specified |folder_id|.
	// Lists all existing disk ids if |folder_id| is not set.
	ListDisks(ctx context.Context, in *ListDisksRequest, opts ...grpc.CallOption) (*ListDisksResponse, error)
	// Lists all existing image ids in specified |folder_id|.
	// Lists all existing image ids if |folder_id| is not set.
	ListImages(ctx context.Context, in *ListImagesRequest, opts ...grpc.CallOption) (*ListImagesResponse, error)
	// Lists all existing snapshot ids in specified |folder_id|.
	// Lists all existing snapshot ids if |folder_id| is not set.
	ListSnapshots(ctx context.Context, in *ListSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error)
	// Lists all existing filesystem ids in specified |folder_id|.
	// Lists all existing filesystem ids if |folder_id| is not set.
	ListFilesystems(ctx context.Context, in *ListFilesystemsRequest, opts ...grpc.CallOption) (*ListFilesystemsResponse, error)
	// Lists all existing placement group ids in specified |folder_id|.
	// Lists all existing placement group ids if |folder_id| is not set.
	ListPlacementGroups(ctx context.Context, in *ListPlacementGroupsRequest, opts ...grpc.CallOption) (*ListPlacementGroupsResponse, error)
	// Get all nodes that are alive and can process tasks.
	// This endpoint is used for client task balancing.
	GetAliveNodes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAliveNodesResponse, error)
}

type privateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrivateServiceClient(cc grpc.ClientConnInterface) PrivateServiceClient {
	return &privateServiceClient{cc}
}

func (c *privateServiceClient) ScheduleBlankOperation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/api.PrivateService/ScheduleBlankOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) RebaseOverlayDisk(ctx context.Context, in *RebaseOverlayDiskRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/api.PrivateService/RebaseOverlayDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) RetireBaseDisk(ctx context.Context, in *RetireBaseDiskRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/api.PrivateService/RetireBaseDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) RetireBaseDisks(ctx context.Context, in *RetireBaseDisksRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/api.PrivateService/RetireBaseDisks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) OptimizeBaseDisks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/api.PrivateService/OptimizeBaseDisks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) ConfigurePool(ctx context.Context, in *ConfigurePoolRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/api.PrivateService/ConfigurePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) DeletePool(ctx context.Context, in *DeletePoolRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/api.PrivateService/DeletePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) ListDisks(ctx context.Context, in *ListDisksRequest, opts ...grpc.CallOption) (*ListDisksResponse, error) {
	out := new(ListDisksResponse)
	err := c.cc.Invoke(ctx, "/api.PrivateService/ListDisks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) ListImages(ctx context.Context, in *ListImagesRequest, opts ...grpc.CallOption) (*ListImagesResponse, error) {
	out := new(ListImagesResponse)
	err := c.cc.Invoke(ctx, "/api.PrivateService/ListImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) ListSnapshots(ctx context.Context, in *ListSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error) {
	out := new(ListSnapshotsResponse)
	err := c.cc.Invoke(ctx, "/api.PrivateService/ListSnapshots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) ListFilesystems(ctx context.Context, in *ListFilesystemsRequest, opts ...grpc.CallOption) (*ListFilesystemsResponse, error) {
	out := new(ListFilesystemsResponse)
	err := c.cc.Invoke(ctx, "/api.PrivateService/ListFilesystems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) ListPlacementGroups(ctx context.Context, in *ListPlacementGroupsRequest, opts ...grpc.CallOption) (*ListPlacementGroupsResponse, error) {
	out := new(ListPlacementGroupsResponse)
	err := c.cc.Invoke(ctx, "/api.PrivateService/ListPlacementGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) GetAliveNodes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAliveNodesResponse, error) {
	out := new(GetAliveNodesResponse)
	err := c.cc.Invoke(ctx, "/api.PrivateService/GetAliveNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateServiceServer is the server API for PrivateService service.
type PrivateServiceServer interface {
	// Schedules blank (no op) operation, used for testing.
	ScheduleBlankOperation(context.Context, *emptypb.Empty) (*operation.Operation, error)
	RebaseOverlayDisk(context.Context, *RebaseOverlayDiskRequest) (*operation.Operation, error)
	RetireBaseDisk(context.Context, *RetireBaseDiskRequest) (*operation.Operation, error)
	RetireBaseDisks(context.Context, *RetireBaseDisksRequest) (*operation.Operation, error)
	OptimizeBaseDisks(context.Context, *emptypb.Empty) (*operation.Operation, error)
	ConfigurePool(context.Context, *ConfigurePoolRequest) (*operation.Operation, error)
	DeletePool(context.Context, *DeletePoolRequest) (*operation.Operation, error)
	// Lists all existing disk ids in specified |folder_id|.
	// Lists all existing disk ids if |folder_id| is not set.
	ListDisks(context.Context, *ListDisksRequest) (*ListDisksResponse, error)
	// Lists all existing image ids in specified |folder_id|.
	// Lists all existing image ids if |folder_id| is not set.
	ListImages(context.Context, *ListImagesRequest) (*ListImagesResponse, error)
	// Lists all existing snapshot ids in specified |folder_id|.
	// Lists all existing snapshot ids if |folder_id| is not set.
	ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error)
	// Lists all existing filesystem ids in specified |folder_id|.
	// Lists all existing filesystem ids if |folder_id| is not set.
	ListFilesystems(context.Context, *ListFilesystemsRequest) (*ListFilesystemsResponse, error)
	// Lists all existing placement group ids in specified |folder_id|.
	// Lists all existing placement group ids if |folder_id| is not set.
	ListPlacementGroups(context.Context, *ListPlacementGroupsRequest) (*ListPlacementGroupsResponse, error)
	// Get all nodes that are alive and can process tasks.
	// This endpoint is used for client task balancing.
	GetAliveNodes(context.Context, *emptypb.Empty) (*GetAliveNodesResponse, error)
}

// UnimplementedPrivateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPrivateServiceServer struct {
}

func (*UnimplementedPrivateServiceServer) ScheduleBlankOperation(context.Context, *emptypb.Empty) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleBlankOperation not implemented")
}
func (*UnimplementedPrivateServiceServer) RebaseOverlayDisk(context.Context, *RebaseOverlayDiskRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebaseOverlayDisk not implemented")
}
func (*UnimplementedPrivateServiceServer) RetireBaseDisk(context.Context, *RetireBaseDiskRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetireBaseDisk not implemented")
}
func (*UnimplementedPrivateServiceServer) RetireBaseDisks(context.Context, *RetireBaseDisksRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetireBaseDisks not implemented")
}
func (*UnimplementedPrivateServiceServer) OptimizeBaseDisks(context.Context, *emptypb.Empty) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptimizeBaseDisks not implemented")
}
func (*UnimplementedPrivateServiceServer) ConfigurePool(context.Context, *ConfigurePoolRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurePool not implemented")
}
func (*UnimplementedPrivateServiceServer) DeletePool(context.Context, *DeletePoolRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePool not implemented")
}
func (*UnimplementedPrivateServiceServer) ListDisks(context.Context, *ListDisksRequest) (*ListDisksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDisks not implemented")
}
func (*UnimplementedPrivateServiceServer) ListImages(context.Context, *ListImagesRequest) (*ListImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImages not implemented")
}
func (*UnimplementedPrivateServiceServer) ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSnapshots not implemented")
}
func (*UnimplementedPrivateServiceServer) ListFilesystems(context.Context, *ListFilesystemsRequest) (*ListFilesystemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilesystems not implemented")
}
func (*UnimplementedPrivateServiceServer) ListPlacementGroups(context.Context, *ListPlacementGroupsRequest) (*ListPlacementGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlacementGroups not implemented")
}
func (*UnimplementedPrivateServiceServer) GetAliveNodes(context.Context, *emptypb.Empty) (*GetAliveNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAliveNodes not implemented")
}

func RegisterPrivateServiceServer(s *grpc.Server, srv PrivateServiceServer) {
	s.RegisterService(&_PrivateService_serviceDesc, srv)
}

func _PrivateService_ScheduleBlankOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).ScheduleBlankOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PrivateService/ScheduleBlankOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).ScheduleBlankOperation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_RebaseOverlayDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebaseOverlayDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).RebaseOverlayDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PrivateService/RebaseOverlayDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).RebaseOverlayDisk(ctx, req.(*RebaseOverlayDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_RetireBaseDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetireBaseDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).RetireBaseDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PrivateService/RetireBaseDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).RetireBaseDisk(ctx, req.(*RetireBaseDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_RetireBaseDisks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetireBaseDisksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).RetireBaseDisks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PrivateService/RetireBaseDisks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).RetireBaseDisks(ctx, req.(*RetireBaseDisksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_OptimizeBaseDisks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).OptimizeBaseDisks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PrivateService/OptimizeBaseDisks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).OptimizeBaseDisks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_ConfigurePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).ConfigurePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PrivateService/ConfigurePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).ConfigurePool(ctx, req.(*ConfigurePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_DeletePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).DeletePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PrivateService/DeletePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).DeletePool(ctx, req.(*DeletePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_ListDisks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDisksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).ListDisks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PrivateService/ListDisks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).ListDisks(ctx, req.(*ListDisksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_ListImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).ListImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PrivateService/ListImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).ListImages(ctx, req.(*ListImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_ListSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).ListSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PrivateService/ListSnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).ListSnapshots(ctx, req.(*ListSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_ListFilesystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesystemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).ListFilesystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PrivateService/ListFilesystems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).ListFilesystems(ctx, req.(*ListFilesystemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_ListPlacementGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlacementGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).ListPlacementGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PrivateService/ListPlacementGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).ListPlacementGroups(ctx, req.(*ListPlacementGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_GetAliveNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).GetAliveNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PrivateService/GetAliveNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).GetAliveNodes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PrivateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.PrivateService",
	HandlerType: (*PrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleBlankOperation",
			Handler:    _PrivateService_ScheduleBlankOperation_Handler,
		},
		{
			MethodName: "RebaseOverlayDisk",
			Handler:    _PrivateService_RebaseOverlayDisk_Handler,
		},
		{
			MethodName: "RetireBaseDisk",
			Handler:    _PrivateService_RetireBaseDisk_Handler,
		},
		{
			MethodName: "RetireBaseDisks",
			Handler:    _PrivateService_RetireBaseDisks_Handler,
		},
		{
			MethodName: "OptimizeBaseDisks",
			Handler:    _PrivateService_OptimizeBaseDisks_Handler,
		},
		{
			MethodName: "ConfigurePool",
			Handler:    _PrivateService_ConfigurePool_Handler,
		},
		{
			MethodName: "DeletePool",
			Handler:    _PrivateService_DeletePool_Handler,
		},
		{
			MethodName: "ListDisks",
			Handler:    _PrivateService_ListDisks_Handler,
		},
		{
			MethodName: "ListImages",
			Handler:    _PrivateService_ListImages_Handler,
		},
		{
			MethodName: "ListSnapshots",
			Handler:    _PrivateService_ListSnapshots_Handler,
		},
		{
			MethodName: "ListFilesystems",
			Handler:    _PrivateService_ListFilesystems_Handler,
		},
		{
			MethodName: "ListPlacementGroups",
			Handler:    _PrivateService_ListPlacementGroups_Handler,
		},
		{
			MethodName: "GetAliveNodes",
			Handler:    _PrivateService_GetAliveNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/disk_manager/internal/api/private_service.proto",
}
