// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/disk_manager/internal/pkg/dataplane/config/config.proto

package config

import (
	config "github.com/ydb-platform/nbs/cloud/disk_manager/internal/pkg/dataplane/snapshot/config"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataplaneConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotConfig                             *config.SnapshotConfig `protobuf:"bytes,1,req,name=SnapshotConfig" json:"SnapshotConfig,omitempty"`
	ReaderCount                                *uint32                `protobuf:"varint,2,opt,name=ReaderCount,def=10" json:"ReaderCount,omitempty"`
	WriterCount                                *uint32                `protobuf:"varint,3,opt,name=WriterCount,def=10" json:"WriterCount,omitempty"`
	ChunksInflightLimit                        *uint32                `protobuf:"varint,4,opt,name=ChunksInflightLimit,def=100" json:"ChunksInflightLimit,omitempty"`
	SnapshotCollectionTimeout                  *string                `protobuf:"bytes,5,opt,name=SnapshotCollectionTimeout,def=30m" json:"SnapshotCollectionTimeout,omitempty"`
	CollectSnapshotsTaskScheduleInterval       *string                `protobuf:"bytes,6,opt,name=CollectSnapshotsTaskScheduleInterval,def=1m" json:"CollectSnapshotsTaskScheduleInterval,omitempty"`
	SnapshotCollectionInflightLimit            *uint32                `protobuf:"varint,7,opt,name=SnapshotCollectionInflightLimit,def=10" json:"SnapshotCollectionInflightLimit,omitempty"`
	CreateSnapshotFromURLReaderCount           *uint32                `protobuf:"varint,8,opt,name=CreateSnapshotFromURLReaderCount,def=10" json:"CreateSnapshotFromURLReaderCount,omitempty"`
	HTTPClientTimeout                          *string                `protobuf:"bytes,9,opt,name=HTTPClientTimeout,def=60s" json:"HTTPClientTimeout,omitempty"`
	HTTPClientMinRetryTimeout                  *string                `protobuf:"bytes,10,opt,name=HTTPClientMinRetryTimeout,def=1s" json:"HTTPClientMinRetryTimeout,omitempty"`
	HTTPClientMaxRetryTimeout                  *string                `protobuf:"bytes,11,opt,name=HTTPClientMaxRetryTimeout,def=8s" json:"HTTPClientMaxRetryTimeout,omitempty"`
	HTTPClientMaxRetries                       *uint32                `protobuf:"varint,12,opt,name=HTTPClientMaxRetries,def=5" json:"HTTPClientMaxRetries,omitempty"`
	CollectSnapshotMetricsTaskScheduleInterval *string                `protobuf:"bytes,13,opt,name=CollectSnapshotMetricsTaskScheduleInterval,def=10m" json:"CollectSnapshotMetricsTaskScheduleInterval,omitempty"`
	SnapshotMetricsCollectionInterval          *string                `protobuf:"bytes,14,opt,name=SnapshotMetricsCollectionInterval,def=1m" json:"SnapshotMetricsCollectionInterval,omitempty"`
	// Abort replication if SecondsRemaining degrades in X iterations.
	UselessReplicationIterationsBeforeAbort *uint32 `protobuf:"varint,15,opt,name=UselessReplicationIterationsBeforeAbort,def=100" json:"UselessReplicationIterationsBeforeAbort,omitempty"`
}

// Default values for DataplaneConfig fields.
const (
	Default_DataplaneConfig_ReaderCount                                = uint32(10)
	Default_DataplaneConfig_WriterCount                                = uint32(10)
	Default_DataplaneConfig_ChunksInflightLimit                        = uint32(100)
	Default_DataplaneConfig_SnapshotCollectionTimeout                  = string("30m")
	Default_DataplaneConfig_CollectSnapshotsTaskScheduleInterval       = string("1m")
	Default_DataplaneConfig_SnapshotCollectionInflightLimit            = uint32(10)
	Default_DataplaneConfig_CreateSnapshotFromURLReaderCount           = uint32(10)
	Default_DataplaneConfig_HTTPClientTimeout                          = string("60s")
	Default_DataplaneConfig_HTTPClientMinRetryTimeout                  = string("1s")
	Default_DataplaneConfig_HTTPClientMaxRetryTimeout                  = string("8s")
	Default_DataplaneConfig_HTTPClientMaxRetries                       = uint32(5)
	Default_DataplaneConfig_CollectSnapshotMetricsTaskScheduleInterval = string("10m")
	Default_DataplaneConfig_SnapshotMetricsCollectionInterval          = string("1m")
	Default_DataplaneConfig_UselessReplicationIterationsBeforeAbort    = uint32(100)
)

func (x *DataplaneConfig) Reset() {
	*x = DataplaneConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataplaneConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataplaneConfig) ProtoMessage() {}

func (x *DataplaneConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataplaneConfig.ProtoReflect.Descriptor instead.
func (*DataplaneConfig) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *DataplaneConfig) GetSnapshotConfig() *config.SnapshotConfig {
	if x != nil {
		return x.SnapshotConfig
	}
	return nil
}

func (x *DataplaneConfig) GetReaderCount() uint32 {
	if x != nil && x.ReaderCount != nil {
		return *x.ReaderCount
	}
	return Default_DataplaneConfig_ReaderCount
}

func (x *DataplaneConfig) GetWriterCount() uint32 {
	if x != nil && x.WriterCount != nil {
		return *x.WriterCount
	}
	return Default_DataplaneConfig_WriterCount
}

func (x *DataplaneConfig) GetChunksInflightLimit() uint32 {
	if x != nil && x.ChunksInflightLimit != nil {
		return *x.ChunksInflightLimit
	}
	return Default_DataplaneConfig_ChunksInflightLimit
}

func (x *DataplaneConfig) GetSnapshotCollectionTimeout() string {
	if x != nil && x.SnapshotCollectionTimeout != nil {
		return *x.SnapshotCollectionTimeout
	}
	return Default_DataplaneConfig_SnapshotCollectionTimeout
}

func (x *DataplaneConfig) GetCollectSnapshotsTaskScheduleInterval() string {
	if x != nil && x.CollectSnapshotsTaskScheduleInterval != nil {
		return *x.CollectSnapshotsTaskScheduleInterval
	}
	return Default_DataplaneConfig_CollectSnapshotsTaskScheduleInterval
}

func (x *DataplaneConfig) GetSnapshotCollectionInflightLimit() uint32 {
	if x != nil && x.SnapshotCollectionInflightLimit != nil {
		return *x.SnapshotCollectionInflightLimit
	}
	return Default_DataplaneConfig_SnapshotCollectionInflightLimit
}

func (x *DataplaneConfig) GetCreateSnapshotFromURLReaderCount() uint32 {
	if x != nil && x.CreateSnapshotFromURLReaderCount != nil {
		return *x.CreateSnapshotFromURLReaderCount
	}
	return Default_DataplaneConfig_CreateSnapshotFromURLReaderCount
}

func (x *DataplaneConfig) GetHTTPClientTimeout() string {
	if x != nil && x.HTTPClientTimeout != nil {
		return *x.HTTPClientTimeout
	}
	return Default_DataplaneConfig_HTTPClientTimeout
}

func (x *DataplaneConfig) GetHTTPClientMinRetryTimeout() string {
	if x != nil && x.HTTPClientMinRetryTimeout != nil {
		return *x.HTTPClientMinRetryTimeout
	}
	return Default_DataplaneConfig_HTTPClientMinRetryTimeout
}

func (x *DataplaneConfig) GetHTTPClientMaxRetryTimeout() string {
	if x != nil && x.HTTPClientMaxRetryTimeout != nil {
		return *x.HTTPClientMaxRetryTimeout
	}
	return Default_DataplaneConfig_HTTPClientMaxRetryTimeout
}

func (x *DataplaneConfig) GetHTTPClientMaxRetries() uint32 {
	if x != nil && x.HTTPClientMaxRetries != nil {
		return *x.HTTPClientMaxRetries
	}
	return Default_DataplaneConfig_HTTPClientMaxRetries
}

func (x *DataplaneConfig) GetCollectSnapshotMetricsTaskScheduleInterval() string {
	if x != nil && x.CollectSnapshotMetricsTaskScheduleInterval != nil {
		return *x.CollectSnapshotMetricsTaskScheduleInterval
	}
	return Default_DataplaneConfig_CollectSnapshotMetricsTaskScheduleInterval
}

func (x *DataplaneConfig) GetSnapshotMetricsCollectionInterval() string {
	if x != nil && x.SnapshotMetricsCollectionInterval != nil {
		return *x.SnapshotMetricsCollectionInterval
	}
	return Default_DataplaneConfig_SnapshotMetricsCollectionInterval
}

func (x *DataplaneConfig) GetUselessReplicationIterationsBeforeAbort() uint32 {
	if x != nil && x.UselessReplicationIterationsBeforeAbort != nil {
		return *x.UselessReplicationIterationsBeforeAbort
	}
	return Default_DataplaneConfig_UselessReplicationIterationsBeforeAbort
}

var File_cloud_disk_manager_internal_pkg_dataplane_config_config_proto protoreflect.FileDescriptor

var file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x1a, 0x46, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x93, 0x08, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x02, 0x31,
	0x30, 0x52, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x02, 0x31, 0x30, 0x52, 0x0b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x13, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x49, 0x6e,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x03, 0x31, 0x30, 0x30, 0x52, 0x13, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x49, 0x6e,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x19, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03,
	0x33, 0x30, 0x6d, 0x52, 0x19, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x56,
	0x0a, 0x24, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x31, 0x6d,
	0x52, 0x24, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x1f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x02, 0x31, 0x30, 0x52, 0x1f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x4e, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x02,
	0x31, 0x30, 0x52, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x11, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x3a,
	0x03, 0x36, 0x30, 0x73, 0x52, 0x11, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x19, 0x48, 0x54, 0x54, 0x50, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x31, 0x73, 0x52, 0x19,
	0x48, 0x54, 0x54, 0x50, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x19, 0x48, 0x54, 0x54,
	0x50, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x38, 0x73,
	0x52, 0x19, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x14, 0x48,
	0x54, 0x54, 0x50, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x35, 0x52, 0x14, 0x48, 0x54,
	0x54, 0x50, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x63, 0x0a, 0x2a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03, 0x31, 0x30, 0x6d, 0x52, 0x2a, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x21, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x3a, 0x02, 0x31, 0x6d, 0x52, 0x21, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x5d, 0x0a, 0x27, 0x55, 0x73, 0x65,
	0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41,
	0x62, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x03, 0x31, 0x30, 0x30, 0x52,
	0x27, 0x55, 0x73, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x42, 0x4e, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x6e, 0x62, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
}

var (
	file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_rawDescOnce sync.Once
	file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_rawDescData = file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_rawDesc
)

func file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_rawDescGZIP() []byte {
	file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_rawDescOnce.Do(func() {
		file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_rawDescData)
	})
	return file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_rawDescData
}

var file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_goTypes = []interface{}{
	(*DataplaneConfig)(nil),       // 0: dataplane.DataplaneConfig
	(*config.SnapshotConfig)(nil), // 1: snapshot.SnapshotConfig
}
var file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_depIdxs = []int32{
	1, // 0: dataplane.DataplaneConfig.SnapshotConfig:type_name -> snapshot.SnapshotConfig
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_init() }
func file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_init() {
	if File_cloud_disk_manager_internal_pkg_dataplane_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataplaneConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_goTypes,
		DependencyIndexes: file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_depIdxs,
		MessageInfos:      file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_msgTypes,
	}.Build()
	File_cloud_disk_manager_internal_pkg_dataplane_config_config_proto = out.File
	file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_rawDesc = nil
	file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_goTypes = nil
	file_cloud_disk_manager_internal_pkg_dataplane_config_config_proto_depIdxs = nil
}
