// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/disk_manager/internal/pkg/dataplane/snapshot/config/config.proto

package config

import (
	config "github.com/ydb-platform/nbs/cloud/disk_manager/internal/pkg/persistence/config"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SnapshotConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersistenceConfig          *config.PersistenceConfig `protobuf:"bytes,1,req,name=PersistenceConfig" json:"PersistenceConfig,omitempty"`
	StorageFolder              *string                   `protobuf:"bytes,2,opt,name=StorageFolder,def=snapshot" json:"StorageFolder,omitempty"`
	LegacyStorageFolder        *string                   `protobuf:"bytes,3,opt,name=LegacyStorageFolder,def=hardware/default/snapshot" json:"LegacyStorageFolder,omitempty"`
	ChunkBlobsTableShardCount  *uint64                   `protobuf:"varint,4,opt,name=ChunkBlobsTableShardCount,def=10000" json:"ChunkBlobsTableShardCount,omitempty"`
	ChunkMapTableShardCount    *uint64                   `protobuf:"varint,5,opt,name=ChunkMapTableShardCount,def=1000" json:"ChunkMapTableShardCount,omitempty"`
	ExternalBlobsMediaKind     *string                   `protobuf:"bytes,6,opt,name=ExternalBlobsMediaKind,def=rotencrypted" json:"ExternalBlobsMediaKind,omitempty"`
	DeleteWorkerCount          *uint32                   `protobuf:"varint,7,opt,name=DeleteWorkerCount,def=100" json:"DeleteWorkerCount,omitempty"`
	ShallowCopyWorkerCount     *uint32                   `protobuf:"varint,8,opt,name=ShallowCopyWorkerCount,def=100" json:"ShallowCopyWorkerCount,omitempty"`
	ShallowCopyInflightLimit   *uint32                   `protobuf:"varint,9,opt,name=ShallowCopyInflightLimit,def=1000" json:"ShallowCopyInflightLimit,omitempty"`
	ChunkCompression           *string                   `protobuf:"bytes,10,opt,name=ChunkCompression,def=lz4" json:"ChunkCompression,omitempty"`
	S3Bucket                   *string                   `protobuf:"bytes,11,opt,name=S3Bucket" json:"S3Bucket,omitempty"`
	ChunkBlobsS3KeyPrefix      *string                   `protobuf:"bytes,12,opt,name=ChunkBlobsS3KeyPrefix,def=snapshot/chunks" json:"ChunkBlobsS3KeyPrefix,omitempty"`
	ProbeCompressionPercentage map[string]uint32         `protobuf:"bytes,13,rep,name=ProbeCompressionPercentage" json:"ProbeCompressionPercentage,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // by codec
}

// Default values for SnapshotConfig fields.
const (
	Default_SnapshotConfig_StorageFolder             = string("snapshot")
	Default_SnapshotConfig_LegacyStorageFolder       = string("hardware/default/snapshot")
	Default_SnapshotConfig_ChunkBlobsTableShardCount = uint64(10000)
	Default_SnapshotConfig_ChunkMapTableShardCount   = uint64(1000)
	Default_SnapshotConfig_ExternalBlobsMediaKind    = string("rotencrypted")
	Default_SnapshotConfig_DeleteWorkerCount         = uint32(100)
	Default_SnapshotConfig_ShallowCopyWorkerCount    = uint32(100)
	Default_SnapshotConfig_ShallowCopyInflightLimit  = uint32(1000)
	Default_SnapshotConfig_ChunkCompression          = string("lz4")
	Default_SnapshotConfig_ChunkBlobsS3KeyPrefix     = string("snapshot/chunks")
)

func (x *SnapshotConfig) Reset() {
	*x = SnapshotConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotConfig) ProtoMessage() {}

func (x *SnapshotConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotConfig.ProtoReflect.Descriptor instead.
func (*SnapshotConfig) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *SnapshotConfig) GetPersistenceConfig() *config.PersistenceConfig {
	if x != nil {
		return x.PersistenceConfig
	}
	return nil
}

func (x *SnapshotConfig) GetStorageFolder() string {
	if x != nil && x.StorageFolder != nil {
		return *x.StorageFolder
	}
	return Default_SnapshotConfig_StorageFolder
}

func (x *SnapshotConfig) GetLegacyStorageFolder() string {
	if x != nil && x.LegacyStorageFolder != nil {
		return *x.LegacyStorageFolder
	}
	return Default_SnapshotConfig_LegacyStorageFolder
}

func (x *SnapshotConfig) GetChunkBlobsTableShardCount() uint64 {
	if x != nil && x.ChunkBlobsTableShardCount != nil {
		return *x.ChunkBlobsTableShardCount
	}
	return Default_SnapshotConfig_ChunkBlobsTableShardCount
}

func (x *SnapshotConfig) GetChunkMapTableShardCount() uint64 {
	if x != nil && x.ChunkMapTableShardCount != nil {
		return *x.ChunkMapTableShardCount
	}
	return Default_SnapshotConfig_ChunkMapTableShardCount
}

func (x *SnapshotConfig) GetExternalBlobsMediaKind() string {
	if x != nil && x.ExternalBlobsMediaKind != nil {
		return *x.ExternalBlobsMediaKind
	}
	return Default_SnapshotConfig_ExternalBlobsMediaKind
}

func (x *SnapshotConfig) GetDeleteWorkerCount() uint32 {
	if x != nil && x.DeleteWorkerCount != nil {
		return *x.DeleteWorkerCount
	}
	return Default_SnapshotConfig_DeleteWorkerCount
}

func (x *SnapshotConfig) GetShallowCopyWorkerCount() uint32 {
	if x != nil && x.ShallowCopyWorkerCount != nil {
		return *x.ShallowCopyWorkerCount
	}
	return Default_SnapshotConfig_ShallowCopyWorkerCount
}

func (x *SnapshotConfig) GetShallowCopyInflightLimit() uint32 {
	if x != nil && x.ShallowCopyInflightLimit != nil {
		return *x.ShallowCopyInflightLimit
	}
	return Default_SnapshotConfig_ShallowCopyInflightLimit
}

func (x *SnapshotConfig) GetChunkCompression() string {
	if x != nil && x.ChunkCompression != nil {
		return *x.ChunkCompression
	}
	return Default_SnapshotConfig_ChunkCompression
}

func (x *SnapshotConfig) GetS3Bucket() string {
	if x != nil && x.S3Bucket != nil {
		return *x.S3Bucket
	}
	return ""
}

func (x *SnapshotConfig) GetChunkBlobsS3KeyPrefix() string {
	if x != nil && x.ChunkBlobsS3KeyPrefix != nil {
		return *x.ChunkBlobsS3KeyPrefix
	}
	return Default_SnapshotConfig_ChunkBlobsS3KeyPrefix
}

func (x *SnapshotConfig) GetProbeCompressionPercentage() map[string]uint32 {
	if x != nil {
		return x.ProbeCompressionPercentage
	}
	return nil
}

var File_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto protoreflect.FileDescriptor

var file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_rawDesc = []byte{
	0x0a, 0x46, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x1a, 0x3f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x07, 0x0a, 0x0e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x11, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x08, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x13, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x3a, 0x19, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x13, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x43, 0x0a, 0x19, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x05, 0x31, 0x30, 0x30, 0x30, 0x30, 0x52, 0x19, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x17, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d,
	0x61, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x04, 0x31, 0x30, 0x30, 0x30, 0x52, 0x17, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x16, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x0c, 0x72, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x52, 0x16, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x6c,
	0x6f, 0x62, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x03, 0x31, 0x30, 0x30, 0x52, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3b, 0x0a, 0x16, 0x53, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x70, 0x79, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x03, 0x31, 0x30, 0x30, 0x52, 0x16, 0x53, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x70,
	0x79, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x18,
	0x53, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x04,
	0x31, 0x30, 0x30, 0x30, 0x52, 0x18, 0x53, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x70,
	0x79, 0x49, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2f,
	0x0a, 0x10, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03, 0x6c, 0x7a, 0x34, 0x52, 0x10, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x15, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x53, 0x33, 0x4b, 0x65, 0x79, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x0f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x15, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x53, 0x33, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x78, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x1a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x4d, 0x0a, 0x1f,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x57, 0x5a, 0x55, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6e, 0x62, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67,
}

var (
	file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_rawDescOnce sync.Once
	file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_rawDescData = file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_rawDesc
)

func file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_rawDescGZIP() []byte {
	file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_rawDescOnce.Do(func() {
		file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_rawDescData)
	})
	return file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_rawDescData
}

var file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_goTypes = []interface{}{
	(*SnapshotConfig)(nil),           // 0: snapshot.SnapshotConfig
	nil,                              // 1: snapshot.SnapshotConfig.ProbeCompressionPercentageEntry
	(*config.PersistenceConfig)(nil), // 2: persistence.PersistenceConfig
}
var file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_depIdxs = []int32{
	2, // 0: snapshot.SnapshotConfig.PersistenceConfig:type_name -> persistence.PersistenceConfig
	1, // 1: snapshot.SnapshotConfig.ProbeCompressionPercentage:type_name -> snapshot.SnapshotConfig.ProbeCompressionPercentageEntry
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_init() }
func file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_init() {
	if File_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_goTypes,
		DependencyIndexes: file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_depIdxs,
		MessageInfos:      file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_msgTypes,
	}.Build()
	File_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto = out.File
	file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_rawDesc = nil
	file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_goTypes = nil
	file_cloud_disk_manager_internal_pkg_dataplane_snapshot_config_config_proto_depIdxs = nil
}
