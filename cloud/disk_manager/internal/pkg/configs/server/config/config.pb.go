// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/disk_manager/internal/pkg/configs/server/config/config.proto

package config

import (
	config7 "github.com/ydb-platform/nbs/cloud/disk_manager/internal/pkg/auth/config"
	config1 "github.com/ydb-platform/nbs/cloud/disk_manager/internal/pkg/clients/nbs/config"
	config10 "github.com/ydb-platform/nbs/cloud/disk_manager/internal/pkg/clients/nfs/config"
	config13 "github.com/ydb-platform/nbs/cloud/disk_manager/internal/pkg/dataplane/config"
	config5 "github.com/ydb-platform/nbs/cloud/disk_manager/internal/pkg/logging/config"
	config6 "github.com/ydb-platform/nbs/cloud/disk_manager/internal/pkg/monitoring/config"
	config14 "github.com/ydb-platform/nbs/cloud/disk_manager/internal/pkg/performance/config"
	config8 "github.com/ydb-platform/nbs/cloud/disk_manager/internal/pkg/persistence/config"
	config9 "github.com/ydb-platform/nbs/cloud/disk_manager/internal/pkg/services/disks/config"
	config11 "github.com/ydb-platform/nbs/cloud/disk_manager/internal/pkg/services/filesystem/config"
	config3 "github.com/ydb-platform/nbs/cloud/disk_manager/internal/pkg/services/images/config"
	config12 "github.com/ydb-platform/nbs/cloud/disk_manager/internal/pkg/services/placementgroup/config"
	config2 "github.com/ydb-platform/nbs/cloud/disk_manager/internal/pkg/services/pools/config"
	config4 "github.com/ydb-platform/nbs/cloud/disk_manager/internal/pkg/services/snapshots/config"
	config "github.com/ydb-platform/nbs/cloud/disk_manager/internal/pkg/tasks/config"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Cert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertFile       *string `protobuf:"bytes,1,opt,name=CertFile" json:"CertFile,omitempty"`
	PrivateKeyFile *string `protobuf:"bytes,2,opt,name=PrivateKeyFile" json:"PrivateKeyFile,omitempty"`
}

func (x *Cert) Reset() {
	*x = Cert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cert) ProtoMessage() {}

func (x *Cert) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cert.ProtoReflect.Descriptor instead.
func (*Cert) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *Cert) GetCertFile() string {
	if x != nil && x.CertFile != nil {
		return *x.CertFile
	}
	return ""
}

func (x *Cert) GetPrivateKeyFile() string {
	if x != nil && x.PrivateKeyFile != nil {
		return *x.PrivateKeyFile
	}
	return ""
}

type KeepAliveConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                *string `protobuf:"bytes,1,opt,name=Time,def=10s" json:"Time,omitempty"`
	Timeout             *string `protobuf:"bytes,2,opt,name=Timeout,def=1s" json:"Timeout,omitempty"`
	MinTime             *string `protobuf:"bytes,3,opt,name=MinTime,def=1s" json:"MinTime,omitempty"`
	PermitWithoutStream *bool   `protobuf:"varint,4,opt,name=PermitWithoutStream,def=1" json:"PermitWithoutStream,omitempty"`
}

// Default values for KeepAliveConfig fields.
const (
	Default_KeepAliveConfig_Time                = string("10s")
	Default_KeepAliveConfig_Timeout             = string("1s")
	Default_KeepAliveConfig_MinTime             = string("1s")
	Default_KeepAliveConfig_PermitWithoutStream = bool(true)
)

func (x *KeepAliveConfig) Reset() {
	*x = KeepAliveConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepAliveConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAliveConfig) ProtoMessage() {}

func (x *KeepAliveConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAliveConfig.ProtoReflect.Descriptor instead.
func (*KeepAliveConfig) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *KeepAliveConfig) GetTime() string {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_KeepAliveConfig_Time
}

func (x *KeepAliveConfig) GetTimeout() string {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return Default_KeepAliveConfig_Timeout
}

func (x *KeepAliveConfig) GetMinTime() string {
	if x != nil && x.MinTime != nil {
		return *x.MinTime
	}
	return Default_KeepAliveConfig_MinTime
}

func (x *KeepAliveConfig) GetPermitWithoutStream() bool {
	if x != nil && x.PermitWithoutStream != nil {
		return *x.PermitWithoutStream
	}
	return Default_KeepAliveConfig_PermitWithoutStream
}

type GrpcConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port     *uint32 `protobuf:"varint,1,opt,name=Port,def=9797" json:"Port,omitempty"`
	Certs    []*Cert `protobuf:"bytes,2,rep,name=Certs" json:"Certs,omitempty"`
	Insecure *bool   `protobuf:"varint,3,opt,name=Insecure" json:"Insecure,omitempty"`
	// Used in tests.
	Hostname  *string          `protobuf:"bytes,4,opt,name=Hostname" json:"Hostname,omitempty"`
	KeepAlive *KeepAliveConfig `protobuf:"bytes,5,req,name=KeepAlive" json:"KeepAlive,omitempty"`
}

// Default values for GrpcConfig fields.
const (
	Default_GrpcConfig_Port = uint32(9797)
)

func (x *GrpcConfig) Reset() {
	*x = GrpcConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcConfig) ProtoMessage() {}

func (x *GrpcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcConfig.ProtoReflect.Descriptor instead.
func (*GrpcConfig) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *GrpcConfig) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return Default_GrpcConfig_Port
}

func (x *GrpcConfig) GetCerts() []*Cert {
	if x != nil {
		return x.Certs
	}
	return nil
}

func (x *GrpcConfig) GetInsecure() bool {
	if x != nil && x.Insecure != nil {
		return *x.Insecure
	}
	return false
}

func (x *GrpcConfig) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *GrpcConfig) GetKeepAlive() *KeepAliveConfig {
	if x != nil {
		return x.KeepAlive
	}
	return nil
}

type ServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrpcConfig           *GrpcConfig                 `protobuf:"bytes,1,opt,name=GrpcConfig" json:"GrpcConfig,omitempty"`
	TasksConfig          *config.TasksConfig         `protobuf:"bytes,2,req,name=TasksConfig" json:"TasksConfig,omitempty"`
	NbsConfig            *config1.ClientConfig       `protobuf:"bytes,3,opt,name=NbsConfig" json:"NbsConfig,omitempty"`
	PoolsConfig          *config2.PoolsConfig        `protobuf:"bytes,4,opt,name=PoolsConfig" json:"PoolsConfig,omitempty"`
	ImagesConfig         *config3.ImagesConfig       `protobuf:"bytes,5,opt,name=ImagesConfig" json:"ImagesConfig,omitempty"`
	SnapshotsConfig      *config4.SnapshotsConfig    `protobuf:"bytes,6,opt,name=SnapshotsConfig" json:"SnapshotsConfig,omitempty"`
	LoggingConfig        *config5.LoggingConfig      `protobuf:"bytes,7,req,name=LoggingConfig" json:"LoggingConfig,omitempty"`
	MonitoringConfig     *config6.MonitoringConfig   `protobuf:"bytes,8,req,name=MonitoringConfig" json:"MonitoringConfig,omitempty"`
	AuthConfig           *config7.AuthConfig         `protobuf:"bytes,9,req,name=AuthConfig" json:"AuthConfig,omitempty"`
	PersistenceConfig    *config8.PersistenceConfig  `protobuf:"bytes,10,req,name=PersistenceConfig" json:"PersistenceConfig,omitempty"`
	DisksConfig          *config9.DisksConfig        `protobuf:"bytes,11,opt,name=DisksConfig" json:"DisksConfig,omitempty"`
	NfsConfig            *config10.ClientConfig      `protobuf:"bytes,12,opt,name=NfsConfig" json:"NfsConfig,omitempty"`
	FilesystemConfig     *config11.FilesystemConfig  `protobuf:"bytes,13,opt,name=FilesystemConfig" json:"FilesystemConfig,omitempty"`
	PlacementGroupConfig *config12.Config            `protobuf:"bytes,14,opt,name=PlacementGroupConfig" json:"PlacementGroupConfig,omitempty"`
	DataplaneConfig      *config13.DataplaneConfig   `protobuf:"bytes,15,opt,name=DataplaneConfig" json:"DataplaneConfig,omitempty"`
	PerformanceConfig    *config14.PerformanceConfig `protobuf:"bytes,16,opt,name=PerformanceConfig" json:"PerformanceConfig,omitempty"`
}

func (x *ServerConfig) Reset() {
	*x = ServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerConfig) ProtoMessage() {}

func (x *ServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerConfig.ProtoReflect.Descriptor instead.
func (*ServerConfig) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_rawDescGZIP(), []int{3}
}

func (x *ServerConfig) GetGrpcConfig() *GrpcConfig {
	if x != nil {
		return x.GrpcConfig
	}
	return nil
}

func (x *ServerConfig) GetTasksConfig() *config.TasksConfig {
	if x != nil {
		return x.TasksConfig
	}
	return nil
}

func (x *ServerConfig) GetNbsConfig() *config1.ClientConfig {
	if x != nil {
		return x.NbsConfig
	}
	return nil
}

func (x *ServerConfig) GetPoolsConfig() *config2.PoolsConfig {
	if x != nil {
		return x.PoolsConfig
	}
	return nil
}

func (x *ServerConfig) GetImagesConfig() *config3.ImagesConfig {
	if x != nil {
		return x.ImagesConfig
	}
	return nil
}

func (x *ServerConfig) GetSnapshotsConfig() *config4.SnapshotsConfig {
	if x != nil {
		return x.SnapshotsConfig
	}
	return nil
}

func (x *ServerConfig) GetLoggingConfig() *config5.LoggingConfig {
	if x != nil {
		return x.LoggingConfig
	}
	return nil
}

func (x *ServerConfig) GetMonitoringConfig() *config6.MonitoringConfig {
	if x != nil {
		return x.MonitoringConfig
	}
	return nil
}

func (x *ServerConfig) GetAuthConfig() *config7.AuthConfig {
	if x != nil {
		return x.AuthConfig
	}
	return nil
}

func (x *ServerConfig) GetPersistenceConfig() *config8.PersistenceConfig {
	if x != nil {
		return x.PersistenceConfig
	}
	return nil
}

func (x *ServerConfig) GetDisksConfig() *config9.DisksConfig {
	if x != nil {
		return x.DisksConfig
	}
	return nil
}

func (x *ServerConfig) GetNfsConfig() *config10.ClientConfig {
	if x != nil {
		return x.NfsConfig
	}
	return nil
}

func (x *ServerConfig) GetFilesystemConfig() *config11.FilesystemConfig {
	if x != nil {
		return x.FilesystemConfig
	}
	return nil
}

func (x *ServerConfig) GetPlacementGroupConfig() *config12.Config {
	if x != nil {
		return x.PlacementGroupConfig
	}
	return nil
}

func (x *ServerConfig) GetDataplaneConfig() *config13.DataplaneConfig {
	if x != nil {
		return x.DataplaneConfig
	}
	return nil
}

func (x *ServerConfig) GetPerformanceConfig() *config14.PerformanceConfig {
	if x != nil {
		return x.PerformanceConfig
	}
	return nil
}

var File_cloud_disk_manager_internal_pkg_configs_server_config_config_proto protoreflect.FileDescriptor

var file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_rawDesc = []byte{
	0x0a, 0x42, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x6e, 0x62, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x6e, 0x66, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x42, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x47, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x43, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x42, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x46, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x39, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x04,
	0x43, 0x65, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x0f, 0x4b, 0x65, 0x65,
	0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x04,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03, 0x31, 0x30, 0x73, 0x52,
	0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x31, 0x73, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x31, 0x73, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x13, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0xb9, 0x01, 0x0a, 0x0a, 0x47, 0x72,
	0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x04, 0x39, 0x37, 0x39, 0x37, 0x52, 0x04, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x43, 0x65, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x05, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x4b, 0x65, 0x65, 0x70,
	0x41, 0x6c, 0x69, 0x76, 0x65, 0x22, 0xf8, 0x07, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x0a, 0x47, 0x72, 0x70, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a,
	0x47, 0x72, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x0b, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2f, 0x0a, 0x09, 0x4e, 0x62, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x62, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x4e, 0x62, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x34, 0x0a, 0x0b, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x44, 0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x10, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x30, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x4c, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x34, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x2e, 0x44, 0x69, 0x73,
	0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x09, 0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x4e, 0x66, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x4a, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x14, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x0f,
	0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x4c, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x53, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79,
	0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6e, 0x62, 0x73, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67,
}

var (
	file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_rawDescOnce sync.Once
	file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_rawDescData = file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_rawDesc
)

func file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_rawDescGZIP() []byte {
	file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_rawDescOnce.Do(func() {
		file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_rawDescData)
	})
	return file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_rawDescData
}

var file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_goTypes = []interface{}{
	(*Cert)(nil),                       // 0: server.Cert
	(*KeepAliveConfig)(nil),            // 1: server.KeepAliveConfig
	(*GrpcConfig)(nil),                 // 2: server.GrpcConfig
	(*ServerConfig)(nil),               // 3: server.ServerConfig
	(*config.TasksConfig)(nil),         // 4: tasks.TasksConfig
	(*config1.ClientConfig)(nil),       // 5: nbs.ClientConfig
	(*config2.PoolsConfig)(nil),        // 6: pools.PoolsConfig
	(*config3.ImagesConfig)(nil),       // 7: images.ImagesConfig
	(*config4.SnapshotsConfig)(nil),    // 8: snapshots.SnapshotsConfig
	(*config5.LoggingConfig)(nil),      // 9: logging.LoggingConfig
	(*config6.MonitoringConfig)(nil),   // 10: monitoring.MonitoringConfig
	(*config7.AuthConfig)(nil),         // 11: auth.AuthConfig
	(*config8.PersistenceConfig)(nil),  // 12: persistence.PersistenceConfig
	(*config9.DisksConfig)(nil),        // 13: disks.DisksConfig
	(*config10.ClientConfig)(nil),      // 14: nfs.ClientConfig
	(*config11.FilesystemConfig)(nil),  // 15: filesystem.FilesystemConfig
	(*config12.Config)(nil),            // 16: placementgroup.Config
	(*config13.DataplaneConfig)(nil),   // 17: dataplane.DataplaneConfig
	(*config14.PerformanceConfig)(nil), // 18: performance.PerformanceConfig
}
var file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_depIdxs = []int32{
	0,  // 0: server.GrpcConfig.Certs:type_name -> server.Cert
	1,  // 1: server.GrpcConfig.KeepAlive:type_name -> server.KeepAliveConfig
	2,  // 2: server.ServerConfig.GrpcConfig:type_name -> server.GrpcConfig
	4,  // 3: server.ServerConfig.TasksConfig:type_name -> tasks.TasksConfig
	5,  // 4: server.ServerConfig.NbsConfig:type_name -> nbs.ClientConfig
	6,  // 5: server.ServerConfig.PoolsConfig:type_name -> pools.PoolsConfig
	7,  // 6: server.ServerConfig.ImagesConfig:type_name -> images.ImagesConfig
	8,  // 7: server.ServerConfig.SnapshotsConfig:type_name -> snapshots.SnapshotsConfig
	9,  // 8: server.ServerConfig.LoggingConfig:type_name -> logging.LoggingConfig
	10, // 9: server.ServerConfig.MonitoringConfig:type_name -> monitoring.MonitoringConfig
	11, // 10: server.ServerConfig.AuthConfig:type_name -> auth.AuthConfig
	12, // 11: server.ServerConfig.PersistenceConfig:type_name -> persistence.PersistenceConfig
	13, // 12: server.ServerConfig.DisksConfig:type_name -> disks.DisksConfig
	14, // 13: server.ServerConfig.NfsConfig:type_name -> nfs.ClientConfig
	15, // 14: server.ServerConfig.FilesystemConfig:type_name -> filesystem.FilesystemConfig
	16, // 15: server.ServerConfig.PlacementGroupConfig:type_name -> placementgroup.Config
	17, // 16: server.ServerConfig.DataplaneConfig:type_name -> dataplane.DataplaneConfig
	18, // 17: server.ServerConfig.PerformanceConfig:type_name -> performance.PerformanceConfig
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_init() }
func file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_init() {
	if File_cloud_disk_manager_internal_pkg_configs_server_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepAliveConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_goTypes,
		DependencyIndexes: file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_depIdxs,
		MessageInfos:      file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_msgTypes,
	}.Build()
	File_cloud_disk_manager_internal_pkg_configs_server_config_config_proto = out.File
	file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_rawDesc = nil
	file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_goTypes = nil
	file_cloud_disk_manager_internal_pkg_configs_server_config_config_proto_depIdxs = nil
}
