// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/disk_manager/internal/pkg/services/pools/config/config.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PoolsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of slots in one base disk.
	MaxActiveSlots *uint32 `protobuf:"varint,1,opt,name=MaxActiveSlots,def=640" json:"MaxActiveSlots,omitempty"`
	// Maximum number of base disks simultaneously creating from one image.
	MaxBaseDisksInflight                  *uint32 `protobuf:"varint,2,opt,name=MaxBaseDisksInflight,def=5" json:"MaxBaseDisksInflight,omitempty"`
	MaxBaseDiskUnits                      *uint32 `protobuf:"varint,3,opt,name=MaxBaseDiskUnits,def=640" json:"MaxBaseDiskUnits,omitempty"`
	TakeBaseDisksToScheduleParallelism    *uint32 `protobuf:"varint,4,opt,name=TakeBaseDisksToScheduleParallelism,def=20" json:"TakeBaseDisksToScheduleParallelism,omitempty"`
	ScheduleBaseDisksTaskScheduleInterval *string `protobuf:"bytes,5,opt,name=ScheduleBaseDisksTaskScheduleInterval,def=1m" json:"ScheduleBaseDisksTaskScheduleInterval,omitempty"`
	DeleteBaseDisksTaskScheduleInterval   *string `protobuf:"bytes,6,opt,name=DeleteBaseDisksTaskScheduleInterval,def=1m" json:"DeleteBaseDisksTaskScheduleInterval,omitempty"`
	StorageFolder                         *string `protobuf:"bytes,7,opt,name=StorageFolder,def=pools" json:"StorageFolder,omitempty"`
	CloudId                               *string `protobuf:"bytes,8,opt,name=CloudId,def=yc.disk-manager.cloud" json:"CloudId,omitempty"`
	FolderId                              *string `protobuf:"bytes,9,opt,name=FolderId,def=yc.disk-manager.pools" json:"FolderId,omitempty"`
	// Maximum number of base disks simultaneously deleting.
	DeleteBaseDisksLimit                      *uint32 `protobuf:"varint,10,opt,name=DeleteBaseDisksLimit,def=100" json:"DeleteBaseDisksLimit,omitempty"`
	DeletedBaseDiskExpirationTimeout          *string `protobuf:"bytes,11,opt,name=DeletedBaseDiskExpirationTimeout,def=30m" json:"DeletedBaseDiskExpirationTimeout,omitempty"`
	ClearDeletedBaseDisksTaskScheduleInterval *string `protobuf:"bytes,12,opt,name=ClearDeletedBaseDisksTaskScheduleInterval,def=1m" json:"ClearDeletedBaseDisksTaskScheduleInterval,omitempty"`
	ClearDeletedBaseDisksLimit                *uint32 `protobuf:"varint,13,opt,name=ClearDeletedBaseDisksLimit,def=1000" json:"ClearDeletedBaseDisksLimit,omitempty"`
	ReleasedSlotExpirationTimeout             *string `protobuf:"bytes,14,opt,name=ReleasedSlotExpirationTimeout,def=30m" json:"ReleasedSlotExpirationTimeout,omitempty"`
	ClearReleasedSlotsTaskScheduleInterval    *string `protobuf:"bytes,15,opt,name=ClearReleasedSlotsTaskScheduleInterval,def=1m" json:"ClearReleasedSlotsTaskScheduleInterval,omitempty"`
	ClearReleasedSlotsLimit                   *uint32 `protobuf:"varint,16,opt,name=ClearReleasedSlotsLimit,def=1000" json:"ClearReleasedSlotsLimit,omitempty"`
	ConvertToImageSizedBaseDiskThreshold      *uint64 `protobuf:"varint,17,opt,name=ConvertToImageSizedBaseDiskThreshold,def=128" json:"ConvertToImageSizedBaseDiskThreshold,omitempty"`
	ConvertToDefaultSizedBaseDiskThreshold    *uint64 `protobuf:"varint,18,opt,name=ConvertToDefaultSizedBaseDiskThreshold,def=32" json:"ConvertToDefaultSizedBaseDiskThreshold,omitempty"`
	OptimizeBaseDisksTaskScheduleInterval     *string `protobuf:"bytes,19,opt,name=OptimizeBaseDisksTaskScheduleInterval,def=15m" json:"OptimizeBaseDisksTaskScheduleInterval,omitempty"`
	MinOptimizedPoolAge                       *string `protobuf:"bytes,20,opt,name=MinOptimizedPoolAge,def=24h" json:"MinOptimizedPoolAge,omitempty"`
	RegularBaseDiskOptimizationEnabled        *bool   `protobuf:"varint,21,opt,name=RegularBaseDiskOptimizationEnabled,def=1" json:"RegularBaseDiskOptimizationEnabled,omitempty"`
}

// Default values for PoolsConfig fields.
const (
	Default_PoolsConfig_MaxActiveSlots                            = uint32(640)
	Default_PoolsConfig_MaxBaseDisksInflight                      = uint32(5)
	Default_PoolsConfig_MaxBaseDiskUnits                          = uint32(640)
	Default_PoolsConfig_TakeBaseDisksToScheduleParallelism        = uint32(20)
	Default_PoolsConfig_ScheduleBaseDisksTaskScheduleInterval     = string("1m")
	Default_PoolsConfig_DeleteBaseDisksTaskScheduleInterval       = string("1m")
	Default_PoolsConfig_StorageFolder                             = string("pools")
	Default_PoolsConfig_CloudId                                   = string("yc.disk-manager.cloud")
	Default_PoolsConfig_FolderId                                  = string("yc.disk-manager.pools")
	Default_PoolsConfig_DeleteBaseDisksLimit                      = uint32(100)
	Default_PoolsConfig_DeletedBaseDiskExpirationTimeout          = string("30m")
	Default_PoolsConfig_ClearDeletedBaseDisksTaskScheduleInterval = string("1m")
	Default_PoolsConfig_ClearDeletedBaseDisksLimit                = uint32(1000)
	Default_PoolsConfig_ReleasedSlotExpirationTimeout             = string("30m")
	Default_PoolsConfig_ClearReleasedSlotsTaskScheduleInterval    = string("1m")
	Default_PoolsConfig_ClearReleasedSlotsLimit                   = uint32(1000)
	Default_PoolsConfig_ConvertToImageSizedBaseDiskThreshold      = uint64(128)
	Default_PoolsConfig_ConvertToDefaultSizedBaseDiskThreshold    = uint64(32)
	Default_PoolsConfig_OptimizeBaseDisksTaskScheduleInterval     = string("15m")
	Default_PoolsConfig_MinOptimizedPoolAge                       = string("24h")
	Default_PoolsConfig_RegularBaseDiskOptimizationEnabled        = bool(true)
)

func (x *PoolsConfig) Reset() {
	*x = PoolsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolsConfig) ProtoMessage() {}

func (x *PoolsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolsConfig.ProtoReflect.Descriptor instead.
func (*PoolsConfig) Descriptor() ([]byte, []int) {
	return file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *PoolsConfig) GetMaxActiveSlots() uint32 {
	if x != nil && x.MaxActiveSlots != nil {
		return *x.MaxActiveSlots
	}
	return Default_PoolsConfig_MaxActiveSlots
}

func (x *PoolsConfig) GetMaxBaseDisksInflight() uint32 {
	if x != nil && x.MaxBaseDisksInflight != nil {
		return *x.MaxBaseDisksInflight
	}
	return Default_PoolsConfig_MaxBaseDisksInflight
}

func (x *PoolsConfig) GetMaxBaseDiskUnits() uint32 {
	if x != nil && x.MaxBaseDiskUnits != nil {
		return *x.MaxBaseDiskUnits
	}
	return Default_PoolsConfig_MaxBaseDiskUnits
}

func (x *PoolsConfig) GetTakeBaseDisksToScheduleParallelism() uint32 {
	if x != nil && x.TakeBaseDisksToScheduleParallelism != nil {
		return *x.TakeBaseDisksToScheduleParallelism
	}
	return Default_PoolsConfig_TakeBaseDisksToScheduleParallelism
}

func (x *PoolsConfig) GetScheduleBaseDisksTaskScheduleInterval() string {
	if x != nil && x.ScheduleBaseDisksTaskScheduleInterval != nil {
		return *x.ScheduleBaseDisksTaskScheduleInterval
	}
	return Default_PoolsConfig_ScheduleBaseDisksTaskScheduleInterval
}

func (x *PoolsConfig) GetDeleteBaseDisksTaskScheduleInterval() string {
	if x != nil && x.DeleteBaseDisksTaskScheduleInterval != nil {
		return *x.DeleteBaseDisksTaskScheduleInterval
	}
	return Default_PoolsConfig_DeleteBaseDisksTaskScheduleInterval
}

func (x *PoolsConfig) GetStorageFolder() string {
	if x != nil && x.StorageFolder != nil {
		return *x.StorageFolder
	}
	return Default_PoolsConfig_StorageFolder
}

func (x *PoolsConfig) GetCloudId() string {
	if x != nil && x.CloudId != nil {
		return *x.CloudId
	}
	return Default_PoolsConfig_CloudId
}

func (x *PoolsConfig) GetFolderId() string {
	if x != nil && x.FolderId != nil {
		return *x.FolderId
	}
	return Default_PoolsConfig_FolderId
}

func (x *PoolsConfig) GetDeleteBaseDisksLimit() uint32 {
	if x != nil && x.DeleteBaseDisksLimit != nil {
		return *x.DeleteBaseDisksLimit
	}
	return Default_PoolsConfig_DeleteBaseDisksLimit
}

func (x *PoolsConfig) GetDeletedBaseDiskExpirationTimeout() string {
	if x != nil && x.DeletedBaseDiskExpirationTimeout != nil {
		return *x.DeletedBaseDiskExpirationTimeout
	}
	return Default_PoolsConfig_DeletedBaseDiskExpirationTimeout
}

func (x *PoolsConfig) GetClearDeletedBaseDisksTaskScheduleInterval() string {
	if x != nil && x.ClearDeletedBaseDisksTaskScheduleInterval != nil {
		return *x.ClearDeletedBaseDisksTaskScheduleInterval
	}
	return Default_PoolsConfig_ClearDeletedBaseDisksTaskScheduleInterval
}

func (x *PoolsConfig) GetClearDeletedBaseDisksLimit() uint32 {
	if x != nil && x.ClearDeletedBaseDisksLimit != nil {
		return *x.ClearDeletedBaseDisksLimit
	}
	return Default_PoolsConfig_ClearDeletedBaseDisksLimit
}

func (x *PoolsConfig) GetReleasedSlotExpirationTimeout() string {
	if x != nil && x.ReleasedSlotExpirationTimeout != nil {
		return *x.ReleasedSlotExpirationTimeout
	}
	return Default_PoolsConfig_ReleasedSlotExpirationTimeout
}

func (x *PoolsConfig) GetClearReleasedSlotsTaskScheduleInterval() string {
	if x != nil && x.ClearReleasedSlotsTaskScheduleInterval != nil {
		return *x.ClearReleasedSlotsTaskScheduleInterval
	}
	return Default_PoolsConfig_ClearReleasedSlotsTaskScheduleInterval
}

func (x *PoolsConfig) GetClearReleasedSlotsLimit() uint32 {
	if x != nil && x.ClearReleasedSlotsLimit != nil {
		return *x.ClearReleasedSlotsLimit
	}
	return Default_PoolsConfig_ClearReleasedSlotsLimit
}

func (x *PoolsConfig) GetConvertToImageSizedBaseDiskThreshold() uint64 {
	if x != nil && x.ConvertToImageSizedBaseDiskThreshold != nil {
		return *x.ConvertToImageSizedBaseDiskThreshold
	}
	return Default_PoolsConfig_ConvertToImageSizedBaseDiskThreshold
}

func (x *PoolsConfig) GetConvertToDefaultSizedBaseDiskThreshold() uint64 {
	if x != nil && x.ConvertToDefaultSizedBaseDiskThreshold != nil {
		return *x.ConvertToDefaultSizedBaseDiskThreshold
	}
	return Default_PoolsConfig_ConvertToDefaultSizedBaseDiskThreshold
}

func (x *PoolsConfig) GetOptimizeBaseDisksTaskScheduleInterval() string {
	if x != nil && x.OptimizeBaseDisksTaskScheduleInterval != nil {
		return *x.OptimizeBaseDisksTaskScheduleInterval
	}
	return Default_PoolsConfig_OptimizeBaseDisksTaskScheduleInterval
}

func (x *PoolsConfig) GetMinOptimizedPoolAge() string {
	if x != nil && x.MinOptimizedPoolAge != nil {
		return *x.MinOptimizedPoolAge
	}
	return Default_PoolsConfig_MinOptimizedPoolAge
}

func (x *PoolsConfig) GetRegularBaseDiskOptimizationEnabled() bool {
	if x != nil && x.RegularBaseDiskOptimizationEnabled != nil {
		return *x.RegularBaseDiskOptimizationEnabled
	}
	return Default_PoolsConfig_RegularBaseDiskOptimizationEnabled
}

var File_cloud_disk_manager_internal_pkg_services_pools_config_config_proto protoreflect.FileDescriptor

var file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_rawDesc = []byte{
	0x0a, 0x42, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0xed, 0x0b, 0x0a, 0x0b,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x0e, 0x4d,
	0x61, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x03, 0x36, 0x34, 0x30, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x14, 0x4d, 0x61, 0x78, 0x42,
	0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x35, 0x52, 0x14, 0x4d, 0x61, 0x78, 0x42, 0x61,
	0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x2f, 0x0a, 0x10, 0x4d, 0x61, 0x78, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x03, 0x36, 0x34, 0x30, 0x52, 0x10,
	0x4d, 0x61, 0x78, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x12, 0x52, 0x0a, 0x22, 0x54, 0x61, 0x6b, 0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b,
	0x73, 0x54, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x02, 0x32, 0x30,
	0x52, 0x22, 0x54, 0x61, 0x6b, 0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x54,
	0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x69, 0x73, 0x6d, 0x12, 0x58, 0x0a, 0x25, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x3a, 0x02, 0x31, 0x6d, 0x52, 0x25, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x54,
	0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b,
	0x73, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x31, 0x6d, 0x52,
	0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x73,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x05, 0x70, 0x6f, 0x6f,
	0x6c, 0x73, 0x52, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x2f, 0x0a, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x3a, 0x15, 0x79, 0x63, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x2d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x3a, 0x15, 0x79, 0x63, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x2d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x08, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x03, 0x31, 0x30, 0x30, 0x52, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4f,
	0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73,
	0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03, 0x33, 0x30, 0x6d, 0x52, 0x20, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x60, 0x0a, 0x29, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42,
	0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x3a, 0x02, 0x31, 0x6d, 0x52, 0x29, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x44, 0x0a, 0x1a, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x04, 0x31, 0x30, 0x30, 0x30, 0x52, 0x1a, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73,
	0x6b, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x49, 0x0a, 0x1d, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03,
	0x33, 0x30, 0x6d, 0x52, 0x1d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x53, 0x6c, 0x6f,
	0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x5a, 0x0a, 0x26, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x3a, 0x02, 0x31, 0x6d, 0x52, 0x26, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3e,
	0x0a, 0x17, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x53,
	0x6c, 0x6f, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x04, 0x31, 0x30, 0x30, 0x30, 0x52, 0x17, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x57,
	0x0a, 0x24, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x03, 0x31, 0x32,
	0x38, 0x52, 0x24, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x5a, 0x0a, 0x26, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x64,
	0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x02, 0x33, 0x32, 0x52, 0x26, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x64, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x59, 0x0a, 0x25, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x3a, 0x03, 0x31, 0x35, 0x6d, 0x52, 0x25, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x35,
	0x0a, 0x13, 0x4d, 0x69, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6f,
	0x6f, 0x6c, 0x41, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03, 0x32, 0x34, 0x68,
	0x52, 0x13, 0x4d, 0x69, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6f,
	0x6f, 0x6c, 0x41, 0x67, 0x65, 0x12, 0x54, 0x0a, 0x22, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x22, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x53, 0x5a, 0x51, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6e, 0x62, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
}

var (
	file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_rawDescOnce sync.Once
	file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_rawDescData = file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_rawDesc
)

func file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_rawDescGZIP() []byte {
	file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_rawDescOnce.Do(func() {
		file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_rawDescData)
	})
	return file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_rawDescData
}

var file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_goTypes = []interface{}{
	(*PoolsConfig)(nil), // 0: pools.PoolsConfig
}
var file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_init() }
func file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_init() {
	if File_cloud_disk_manager_internal_pkg_services_pools_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_goTypes,
		DependencyIndexes: file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_depIdxs,
		MessageInfos:      file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_msgTypes,
	}.Build()
	File_cloud_disk_manager_internal_pkg_services_pools_config_config_proto = out.File
	file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_rawDesc = nil
	file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_goTypes = nil
	file_cloud_disk_manager_internal_pkg_services_pools_config_config_proto_depIdxs = nil
}
