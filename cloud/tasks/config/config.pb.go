// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/tasks/config/config.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TasksConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PollForTaskUpdatesPeriod            *string `protobuf:"bytes,1,opt,name=PollForTaskUpdatesPeriod,def=1s" json:"PollForTaskUpdatesPeriod,omitempty"`
	PollForTasksPeriodMin               *string `protobuf:"bytes,2,opt,name=PollForTasksPeriodMin,def=1s" json:"PollForTasksPeriodMin,omitempty"`
	PollForTasksPeriodMax               *string `protobuf:"bytes,3,opt,name=PollForTasksPeriodMax,def=10s" json:"PollForTasksPeriodMax,omitempty"`
	PollForStallingTasksPeriodMin       *string `protobuf:"bytes,4,opt,name=PollForStallingTasksPeriodMin,def=1s" json:"PollForStallingTasksPeriodMin,omitempty"`
	PollForStallingTasksPeriodMax       *string `protobuf:"bytes,5,opt,name=PollForStallingTasksPeriodMax,def=20s" json:"PollForStallingTasksPeriodMax,omitempty"`
	TaskPingPeriod                      *string `protobuf:"bytes,6,opt,name=TaskPingPeriod,def=2s" json:"TaskPingPeriod,omitempty"`
	TaskStallingTimeout                 *string `protobuf:"bytes,7,opt,name=TaskStallingTimeout,def=10s" json:"TaskStallingTimeout,omitempty"`
	TaskWaitingTimeout                  *string `protobuf:"bytes,8,opt,name=TaskWaitingTimeout,def=10s" json:"TaskWaitingTimeout,omitempty"`
	ScheduleRegularTasksPeriodMin       *string `protobuf:"bytes,9,opt,name=ScheduleRegularTasksPeriodMin,def=2s" json:"ScheduleRegularTasksPeriodMin,omitempty"`
	ScheduleRegularTasksPeriodMax       *string `protobuf:"bytes,10,opt,name=ScheduleRegularTasksPeriodMax,def=4s" json:"ScheduleRegularTasksPeriodMax,omitempty"`
	RunnersCount                        *uint64 `protobuf:"varint,11,opt,name=RunnersCount,def=200" json:"RunnersCount,omitempty"`
	StalkingRunnersCount                *uint64 `protobuf:"varint,12,opt,name=StalkingRunnersCount,def=200" json:"StalkingRunnersCount,omitempty"`
	StorageFolder                       *string `protobuf:"bytes,13,opt,name=StorageFolder,def=tasks" json:"StorageFolder,omitempty"`
	EndedTaskExpirationTimeout          *string `protobuf:"bytes,14,opt,name=EndedTaskExpirationTimeout,def=96h" json:"EndedTaskExpirationTimeout,omitempty"`
	ClearEndedTasksTaskScheduleInterval *string `protobuf:"bytes,15,opt,name=ClearEndedTasksTaskScheduleInterval,def=1m" json:"ClearEndedTasksTaskScheduleInterval,omitempty"`
	ClearEndedTasksLimit                *uint64 `protobuf:"varint,16,opt,name=ClearEndedTasksLimit,def=10000" json:"ClearEndedTasksLimit,omitempty"`
	LegacyStorageFolder                 *string `protobuf:"bytes,17,opt,name=LegacyStorageFolder" json:"LegacyStorageFolder,omitempty"`
	MaxRetriableErrorCount              *uint64 `protobuf:"varint,18,opt,name=MaxRetriableErrorCount,def=100" json:"MaxRetriableErrorCount,omitempty"`
	MaxPanicCount                       *uint64 `protobuf:"varint,19,opt,name=MaxPanicCount,def=10" json:"MaxPanicCount,omitempty"`
	HangingTaskTimeout                  *string `protobuf:"bytes,20,opt,name=HangingTaskTimeout,def=1h" json:"HangingTaskTimeout,omitempty"`
	// Exception task types for hanging task metric.
	ExceptHangingTaskTypes []string `protobuf:"bytes,21,rep,name=ExceptHangingTaskTypes" json:"ExceptHangingTaskTypes,omitempty"`
	UpdateTaskTimeout      *string  `protobuf:"bytes,22,opt,name=UpdateTaskTimeout,def=1m" json:"UpdateTaskTimeout,omitempty"`
	// Zonal tasks affinity: zonal tasks from these zones can be executed on
	// current node.
	ZoneIds          []string `protobuf:"bytes,23,rep,name=ZoneIds" json:"ZoneIds,omitempty"`
	HearbeatInterval *string  `protobuf:"bytes,24,opt,name=HearbeatInterval,def=30s" json:"HearbeatInterval,omitempty"`
	// The time window within which the node is considered alive.
	LivenessWindow *string `protobuf:"bytes,25,opt,name=LivenessWindow,def=30s" json:"LivenessWindow,omitempty"`
	// Feature flag for enabling node eviction policy based
	// on the health of the node and the number of running nodes.
	NodeEvictionEnabled                      *bool            `protobuf:"varint,26,opt,name=NodeEvictionEnabled,def=0" json:"NodeEvictionEnabled,omitempty"`
	InflightTaskPerNodeLimits                map[string]int64 `protobuf:"bytes,27,rep,name=InflightTaskPerNodeLimits" json:"InflightTaskPerNodeLimits,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // by task type
	CollectListerMetricsTaskScheduleInterval *string          `protobuf:"bytes,28,opt,name=CollectListerMetricsTaskScheduleInterval,def=10m" json:"CollectListerMetricsTaskScheduleInterval,omitempty"`
	ListerMetricsCollectionInterval          *string          `protobuf:"bytes,29,opt,name=ListerMetricsCollectionInterval,def=1m" json:"ListerMetricsCollectionInterval,omitempty"`
}

// Default values for TasksConfig fields.
const (
	Default_TasksConfig_PollForTaskUpdatesPeriod                 = string("1s")
	Default_TasksConfig_PollForTasksPeriodMin                    = string("1s")
	Default_TasksConfig_PollForTasksPeriodMax                    = string("10s")
	Default_TasksConfig_PollForStallingTasksPeriodMin            = string("1s")
	Default_TasksConfig_PollForStallingTasksPeriodMax            = string("20s")
	Default_TasksConfig_TaskPingPeriod                           = string("2s")
	Default_TasksConfig_TaskStallingTimeout                      = string("10s")
	Default_TasksConfig_TaskWaitingTimeout                       = string("10s")
	Default_TasksConfig_ScheduleRegularTasksPeriodMin            = string("2s")
	Default_TasksConfig_ScheduleRegularTasksPeriodMax            = string("4s")
	Default_TasksConfig_RunnersCount                             = uint64(200)
	Default_TasksConfig_StalkingRunnersCount                     = uint64(200)
	Default_TasksConfig_StorageFolder                            = string("tasks")
	Default_TasksConfig_EndedTaskExpirationTimeout               = string("96h")
	Default_TasksConfig_ClearEndedTasksTaskScheduleInterval      = string("1m")
	Default_TasksConfig_ClearEndedTasksLimit                     = uint64(10000)
	Default_TasksConfig_MaxRetriableErrorCount                   = uint64(100)
	Default_TasksConfig_MaxPanicCount                            = uint64(10)
	Default_TasksConfig_HangingTaskTimeout                       = string("1h")
	Default_TasksConfig_UpdateTaskTimeout                        = string("1m")
	Default_TasksConfig_HearbeatInterval                         = string("30s")
	Default_TasksConfig_LivenessWindow                           = string("30s")
	Default_TasksConfig_NodeEvictionEnabled                      = bool(false)
	Default_TasksConfig_CollectListerMetricsTaskScheduleInterval = string("10m")
	Default_TasksConfig_ListerMetricsCollectionInterval          = string("1m")
)

func (x *TasksConfig) Reset() {
	*x = TasksConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_tasks_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TasksConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TasksConfig) ProtoMessage() {}

func (x *TasksConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_tasks_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TasksConfig.ProtoReflect.Descriptor instead.
func (*TasksConfig) Descriptor() ([]byte, []int) {
	return file_cloud_tasks_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *TasksConfig) GetPollForTaskUpdatesPeriod() string {
	if x != nil && x.PollForTaskUpdatesPeriod != nil {
		return *x.PollForTaskUpdatesPeriod
	}
	return Default_TasksConfig_PollForTaskUpdatesPeriod
}

func (x *TasksConfig) GetPollForTasksPeriodMin() string {
	if x != nil && x.PollForTasksPeriodMin != nil {
		return *x.PollForTasksPeriodMin
	}
	return Default_TasksConfig_PollForTasksPeriodMin
}

func (x *TasksConfig) GetPollForTasksPeriodMax() string {
	if x != nil && x.PollForTasksPeriodMax != nil {
		return *x.PollForTasksPeriodMax
	}
	return Default_TasksConfig_PollForTasksPeriodMax
}

func (x *TasksConfig) GetPollForStallingTasksPeriodMin() string {
	if x != nil && x.PollForStallingTasksPeriodMin != nil {
		return *x.PollForStallingTasksPeriodMin
	}
	return Default_TasksConfig_PollForStallingTasksPeriodMin
}

func (x *TasksConfig) GetPollForStallingTasksPeriodMax() string {
	if x != nil && x.PollForStallingTasksPeriodMax != nil {
		return *x.PollForStallingTasksPeriodMax
	}
	return Default_TasksConfig_PollForStallingTasksPeriodMax
}

func (x *TasksConfig) GetTaskPingPeriod() string {
	if x != nil && x.TaskPingPeriod != nil {
		return *x.TaskPingPeriod
	}
	return Default_TasksConfig_TaskPingPeriod
}

func (x *TasksConfig) GetTaskStallingTimeout() string {
	if x != nil && x.TaskStallingTimeout != nil {
		return *x.TaskStallingTimeout
	}
	return Default_TasksConfig_TaskStallingTimeout
}

func (x *TasksConfig) GetTaskWaitingTimeout() string {
	if x != nil && x.TaskWaitingTimeout != nil {
		return *x.TaskWaitingTimeout
	}
	return Default_TasksConfig_TaskWaitingTimeout
}

func (x *TasksConfig) GetScheduleRegularTasksPeriodMin() string {
	if x != nil && x.ScheduleRegularTasksPeriodMin != nil {
		return *x.ScheduleRegularTasksPeriodMin
	}
	return Default_TasksConfig_ScheduleRegularTasksPeriodMin
}

func (x *TasksConfig) GetScheduleRegularTasksPeriodMax() string {
	if x != nil && x.ScheduleRegularTasksPeriodMax != nil {
		return *x.ScheduleRegularTasksPeriodMax
	}
	return Default_TasksConfig_ScheduleRegularTasksPeriodMax
}

func (x *TasksConfig) GetRunnersCount() uint64 {
	if x != nil && x.RunnersCount != nil {
		return *x.RunnersCount
	}
	return Default_TasksConfig_RunnersCount
}

func (x *TasksConfig) GetStalkingRunnersCount() uint64 {
	if x != nil && x.StalkingRunnersCount != nil {
		return *x.StalkingRunnersCount
	}
	return Default_TasksConfig_StalkingRunnersCount
}

func (x *TasksConfig) GetStorageFolder() string {
	if x != nil && x.StorageFolder != nil {
		return *x.StorageFolder
	}
	return Default_TasksConfig_StorageFolder
}

func (x *TasksConfig) GetEndedTaskExpirationTimeout() string {
	if x != nil && x.EndedTaskExpirationTimeout != nil {
		return *x.EndedTaskExpirationTimeout
	}
	return Default_TasksConfig_EndedTaskExpirationTimeout
}

func (x *TasksConfig) GetClearEndedTasksTaskScheduleInterval() string {
	if x != nil && x.ClearEndedTasksTaskScheduleInterval != nil {
		return *x.ClearEndedTasksTaskScheduleInterval
	}
	return Default_TasksConfig_ClearEndedTasksTaskScheduleInterval
}

func (x *TasksConfig) GetClearEndedTasksLimit() uint64 {
	if x != nil && x.ClearEndedTasksLimit != nil {
		return *x.ClearEndedTasksLimit
	}
	return Default_TasksConfig_ClearEndedTasksLimit
}

func (x *TasksConfig) GetLegacyStorageFolder() string {
	if x != nil && x.LegacyStorageFolder != nil {
		return *x.LegacyStorageFolder
	}
	return ""
}

func (x *TasksConfig) GetMaxRetriableErrorCount() uint64 {
	if x != nil && x.MaxRetriableErrorCount != nil {
		return *x.MaxRetriableErrorCount
	}
	return Default_TasksConfig_MaxRetriableErrorCount
}

func (x *TasksConfig) GetMaxPanicCount() uint64 {
	if x != nil && x.MaxPanicCount != nil {
		return *x.MaxPanicCount
	}
	return Default_TasksConfig_MaxPanicCount
}

func (x *TasksConfig) GetHangingTaskTimeout() string {
	if x != nil && x.HangingTaskTimeout != nil {
		return *x.HangingTaskTimeout
	}
	return Default_TasksConfig_HangingTaskTimeout
}

func (x *TasksConfig) GetExceptHangingTaskTypes() []string {
	if x != nil {
		return x.ExceptHangingTaskTypes
	}
	return nil
}

func (x *TasksConfig) GetUpdateTaskTimeout() string {
	if x != nil && x.UpdateTaskTimeout != nil {
		return *x.UpdateTaskTimeout
	}
	return Default_TasksConfig_UpdateTaskTimeout
}

func (x *TasksConfig) GetZoneIds() []string {
	if x != nil {
		return x.ZoneIds
	}
	return nil
}

func (x *TasksConfig) GetHearbeatInterval() string {
	if x != nil && x.HearbeatInterval != nil {
		return *x.HearbeatInterval
	}
	return Default_TasksConfig_HearbeatInterval
}

func (x *TasksConfig) GetLivenessWindow() string {
	if x != nil && x.LivenessWindow != nil {
		return *x.LivenessWindow
	}
	return Default_TasksConfig_LivenessWindow
}

func (x *TasksConfig) GetNodeEvictionEnabled() bool {
	if x != nil && x.NodeEvictionEnabled != nil {
		return *x.NodeEvictionEnabled
	}
	return Default_TasksConfig_NodeEvictionEnabled
}

func (x *TasksConfig) GetInflightTaskPerNodeLimits() map[string]int64 {
	if x != nil {
		return x.InflightTaskPerNodeLimits
	}
	return nil
}

func (x *TasksConfig) GetCollectListerMetricsTaskScheduleInterval() string {
	if x != nil && x.CollectListerMetricsTaskScheduleInterval != nil {
		return *x.CollectListerMetricsTaskScheduleInterval
	}
	return Default_TasksConfig_CollectListerMetricsTaskScheduleInterval
}

func (x *TasksConfig) GetListerMetricsCollectionInterval() string {
	if x != nil && x.ListerMetricsCollectionInterval != nil {
		return *x.ListerMetricsCollectionInterval
	}
	return Default_TasksConfig_ListerMetricsCollectionInterval
}

var File_cloud_tasks_config_config_proto protoreflect.FileDescriptor

var file_cloud_tasks_config_config_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x0e, 0x0a, 0x0b, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x18, 0x50, 0x6f, 0x6c, 0x6c,
	0x46, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x31, 0x73, 0x52, 0x18,
	0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x15, 0x50, 0x6f, 0x6c, 0x6c,
	0x46, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x31, 0x73, 0x52, 0x15, 0x50, 0x6f, 0x6c,
	0x6c, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d,
	0x69, 0x6e, 0x12, 0x39, 0x0a, 0x15, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x3a, 0x03, 0x31, 0x30, 0x73, 0x52, 0x15, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x48, 0x0a,
	0x1d, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x31, 0x73, 0x52, 0x1d, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x4d, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x1d, 0x50, 0x6f, 0x6c, 0x6c, 0x46,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03,
	0x32, 0x30, 0x73, 0x52, 0x1d, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d,
	0x61, 0x78, 0x12, 0x2a, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x32, 0x73, 0x52, 0x0e,
	0x54, 0x61, 0x73, 0x6b, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x35,
	0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03, 0x31, 0x30, 0x73,
	0x52, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x3a, 0x03, 0x31, 0x30, 0x73, 0x52, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x61, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x48, 0x0a, 0x1d, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x3a, 0x02, 0x32, 0x73, 0x52, 0x1d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x4d, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x1d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x4d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x34, 0x73, 0x52,
	0x1d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x27,
	0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x03, 0x32, 0x30, 0x30, 0x52, 0x0c, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x6c, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x03, 0x32, 0x30, 0x30, 0x52, 0x14, 0x53, 0x74, 0x61, 0x6c,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x0d,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x43, 0x0a,
	0x1a, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x3a, 0x03, 0x39, 0x36, 0x68, 0x52, 0x1a, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x54, 0x0a, 0x23, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x3a,
	0x02, 0x31, 0x6d, 0x52, 0x23, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x14, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x05, 0x31, 0x30, 0x30, 0x30, 0x30, 0x52, 0x14, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x16, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x03, 0x31, 0x30, 0x30, 0x52, 0x16, 0x4d, 0x61, 0x78, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x02, 0x31, 0x30, 0x52, 0x0d, 0x4d,
	0x61, 0x78, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x12,
	0x48, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x31, 0x68, 0x52, 0x12, 0x48, 0x61,
	0x6e, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x36, 0x0a, 0x16, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x48, 0x61, 0x6e, 0x67, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x16, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x48, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x3a, 0x02, 0x31, 0x6d, 0x52, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x5a, 0x6f,
	0x6e, 0x65, 0x49, 0x64, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x5a, 0x6f, 0x6e,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x62, 0x65, 0x61, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03,
	0x33, 0x30, 0x73, 0x52, 0x10, 0x48, 0x65, 0x61, 0x72, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x0e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03, 0x33,
	0x30, 0x73, 0x52, 0x0e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x12, 0x37, 0x0a, 0x13, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x19, 0x49,
	0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x19, 0x49, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x28,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03,
	0x31, 0x30, 0x6d, 0x52, 0x28, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4c, 0x0a,
	0x1f, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x31, 0x6d, 0x52, 0x1f, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x4c, 0x0a, 0x1e, 0x49,
	0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6e, 0x62, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
}

var (
	file_cloud_tasks_config_config_proto_rawDescOnce sync.Once
	file_cloud_tasks_config_config_proto_rawDescData = file_cloud_tasks_config_config_proto_rawDesc
)

func file_cloud_tasks_config_config_proto_rawDescGZIP() []byte {
	file_cloud_tasks_config_config_proto_rawDescOnce.Do(func() {
		file_cloud_tasks_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_tasks_config_config_proto_rawDescData)
	})
	return file_cloud_tasks_config_config_proto_rawDescData
}

var file_cloud_tasks_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_cloud_tasks_config_config_proto_goTypes = []interface{}{
	(*TasksConfig)(nil), // 0: tasks.TasksConfig
	nil,                 // 1: tasks.TasksConfig.InflightTaskPerNodeLimitsEntry
}
var file_cloud_tasks_config_config_proto_depIdxs = []int32{
	1, // 0: tasks.TasksConfig.InflightTaskPerNodeLimits:type_name -> tasks.TasksConfig.InflightTaskPerNodeLimitsEntry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_cloud_tasks_config_config_proto_init() }
func file_cloud_tasks_config_config_proto_init() {
	if File_cloud_tasks_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_tasks_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TasksConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_tasks_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_tasks_config_config_proto_goTypes,
		DependencyIndexes: file_cloud_tasks_config_config_proto_depIdxs,
		MessageInfos:      file_cloud_tasks_config_config_proto_msgTypes,
	}.Build()
	File_cloud_tasks_config_config_proto = out.File
	file_cloud_tasks_config_config_proto_rawDesc = nil
	file_cloud_tasks_config_config_proto_goTypes = nil
	file_cloud_tasks_config_config_proto_depIdxs = nil
}
