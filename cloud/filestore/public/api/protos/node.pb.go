// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/filestore/public/api/protos/node.proto

package protos

import (
	protos "github.com/ydb-platform/nbs/cloud/storage/core/protos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ENodeConstants int32

const (
	ENodeConstants_E_INVALID_NODE_ID ENodeConstants = 0
	ENodeConstants_E_INVALID_HANDLE  ENodeConstants = 0
	ENodeConstants_E_ROOT_NODE_ID    ENodeConstants = 1
)

// Enum value maps for ENodeConstants.
var (
	ENodeConstants_name = map[int32]string{
		0: "E_INVALID_NODE_ID",
		// Duplicate value: 0: "E_INVALID_HANDLE",
		1: "E_ROOT_NODE_ID",
	}
	ENodeConstants_value = map[string]int32{
		"E_INVALID_NODE_ID": 0,
		"E_INVALID_HANDLE":  0,
		"E_ROOT_NODE_ID":    1,
	}
)

func (x ENodeConstants) Enum() *ENodeConstants {
	p := new(ENodeConstants)
	*p = x
	return p
}

func (x ENodeConstants) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENodeConstants) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_filestore_public_api_protos_node_proto_enumTypes[0].Descriptor()
}

func (ENodeConstants) Type() protoreflect.EnumType {
	return &file_cloud_filestore_public_api_protos_node_proto_enumTypes[0]
}

func (x ENodeConstants) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENodeConstants.Descriptor instead.
func (ENodeConstants) EnumDescriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{0}
}

type ENodeType int32

const (
	ENodeType_E_INVALID_NODE   ENodeType = 0
	ENodeType_E_REGULAR_NODE   ENodeType = 1
	ENodeType_E_DIRECTORY_NODE ENodeType = 2
	ENodeType_E_LINK_NODE      ENodeType = 3
	ENodeType_E_SOCK_NODE      ENodeType = 4
)

// Enum value maps for ENodeType.
var (
	ENodeType_name = map[int32]string{
		0: "E_INVALID_NODE",
		1: "E_REGULAR_NODE",
		2: "E_DIRECTORY_NODE",
		3: "E_LINK_NODE",
		4: "E_SOCK_NODE",
	}
	ENodeType_value = map[string]int32{
		"E_INVALID_NODE":   0,
		"E_REGULAR_NODE":   1,
		"E_DIRECTORY_NODE": 2,
		"E_LINK_NODE":      3,
		"E_SOCK_NODE":      4,
	}
)

func (x ENodeType) Enum() *ENodeType {
	p := new(ENodeType)
	*p = x
	return p
}

func (x ENodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_filestore_public_api_protos_node_proto_enumTypes[1].Descriptor()
}

func (ENodeType) Type() protoreflect.EnumType {
	return &file_cloud_filestore_public_api_protos_node_proto_enumTypes[1]
}

func (x ENodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENodeType.Descriptor instead.
func (ENodeType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{1}
}

type TRenameNodeRequest_EFlags int32

const (
	TRenameNodeRequest_F_NONE      TRenameNodeRequest_EFlags = 0
	TRenameNodeRequest_F_EXCHANGE  TRenameNodeRequest_EFlags = 1
	TRenameNodeRequest_F_NOREPLACE TRenameNodeRequest_EFlags = 2
)

// Enum value maps for TRenameNodeRequest_EFlags.
var (
	TRenameNodeRequest_EFlags_name = map[int32]string{
		0: "F_NONE",
		1: "F_EXCHANGE",
		2: "F_NOREPLACE",
	}
	TRenameNodeRequest_EFlags_value = map[string]int32{
		"F_NONE":      0,
		"F_EXCHANGE":  1,
		"F_NOREPLACE": 2,
	}
)

func (x TRenameNodeRequest_EFlags) Enum() *TRenameNodeRequest_EFlags {
	p := new(TRenameNodeRequest_EFlags)
	*p = x
	return p
}

func (x TRenameNodeRequest_EFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRenameNodeRequest_EFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_filestore_public_api_protos_node_proto_enumTypes[2].Descriptor()
}

func (TRenameNodeRequest_EFlags) Type() protoreflect.EnumType {
	return &file_cloud_filestore_public_api_protos_node_proto_enumTypes[2]
}

func (x TRenameNodeRequest_EFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRenameNodeRequest_EFlags.Descriptor instead.
func (TRenameNodeRequest_EFlags) EnumDescriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{7, 0}
}

type TSetNodeAttrRequest_EFlags int32

const (
	TSetNodeAttrRequest_F_NONE           TSetNodeAttrRequest_EFlags = 0
	TSetNodeAttrRequest_F_SET_ATTR_MODE  TSetNodeAttrRequest_EFlags = 1
	TSetNodeAttrRequest_F_SET_ATTR_UID   TSetNodeAttrRequest_EFlags = 2
	TSetNodeAttrRequest_F_SET_ATTR_GID   TSetNodeAttrRequest_EFlags = 3
	TSetNodeAttrRequest_F_SET_ATTR_SIZE  TSetNodeAttrRequest_EFlags = 4
	TSetNodeAttrRequest_F_SET_ATTR_ATIME TSetNodeAttrRequest_EFlags = 5
	TSetNodeAttrRequest_F_SET_ATTR_MTIME TSetNodeAttrRequest_EFlags = 6
	TSetNodeAttrRequest_F_SET_ATTR_CTIME TSetNodeAttrRequest_EFlags = 7
)

// Enum value maps for TSetNodeAttrRequest_EFlags.
var (
	TSetNodeAttrRequest_EFlags_name = map[int32]string{
		0: "F_NONE",
		1: "F_SET_ATTR_MODE",
		2: "F_SET_ATTR_UID",
		3: "F_SET_ATTR_GID",
		4: "F_SET_ATTR_SIZE",
		5: "F_SET_ATTR_ATIME",
		6: "F_SET_ATTR_MTIME",
		7: "F_SET_ATTR_CTIME",
	}
	TSetNodeAttrRequest_EFlags_value = map[string]int32{
		"F_NONE":           0,
		"F_SET_ATTR_MODE":  1,
		"F_SET_ATTR_UID":   2,
		"F_SET_ATTR_GID":   3,
		"F_SET_ATTR_SIZE":  4,
		"F_SET_ATTR_ATIME": 5,
		"F_SET_ATTR_MTIME": 6,
		"F_SET_ATTR_CTIME": 7,
	}
)

func (x TSetNodeAttrRequest_EFlags) Enum() *TSetNodeAttrRequest_EFlags {
	p := new(TSetNodeAttrRequest_EFlags)
	*p = x
	return p
}

func (x TSetNodeAttrRequest_EFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TSetNodeAttrRequest_EFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_filestore_public_api_protos_node_proto_enumTypes[3].Descriptor()
}

func (TSetNodeAttrRequest_EFlags) Type() protoreflect.EnumType {
	return &file_cloud_filestore_public_api_protos_node_proto_enumTypes[3]
}

func (x TSetNodeAttrRequest_EFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TSetNodeAttrRequest_EFlags.Descriptor instead.
func (TSetNodeAttrRequest_EFlags) EnumDescriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{15, 0}
}

type TGetNodeAttrRequest_EFlags int32

const (
	TGetNodeAttrRequest_F_NONE TGetNodeAttrRequest_EFlags = 0
)

// Enum value maps for TGetNodeAttrRequest_EFlags.
var (
	TGetNodeAttrRequest_EFlags_name = map[int32]string{
		0: "F_NONE",
	}
	TGetNodeAttrRequest_EFlags_value = map[string]int32{
		"F_NONE": 0,
	}
)

func (x TGetNodeAttrRequest_EFlags) Enum() *TGetNodeAttrRequest_EFlags {
	p := new(TGetNodeAttrRequest_EFlags)
	*p = x
	return p
}

func (x TGetNodeAttrRequest_EFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TGetNodeAttrRequest_EFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_filestore_public_api_protos_node_proto_enumTypes[4].Descriptor()
}

func (TGetNodeAttrRequest_EFlags) Type() protoreflect.EnumType {
	return &file_cloud_filestore_public_api_protos_node_proto_enumTypes[4]
}

func (x TGetNodeAttrRequest_EFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TGetNodeAttrRequest_EFlags.Descriptor instead.
func (TGetNodeAttrRequest_EFlags) EnumDescriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{17, 0}
}

type TSetNodeXAttrRequest_EFlags int32

const (
	TSetNodeXAttrRequest_F_NONE    TSetNodeXAttrRequest_EFlags = 0
	TSetNodeXAttrRequest_F_CREATE  TSetNodeXAttrRequest_EFlags = 1
	TSetNodeXAttrRequest_F_REPLACE TSetNodeXAttrRequest_EFlags = 2
)

// Enum value maps for TSetNodeXAttrRequest_EFlags.
var (
	TSetNodeXAttrRequest_EFlags_name = map[int32]string{
		0: "F_NONE",
		1: "F_CREATE",
		2: "F_REPLACE",
	}
	TSetNodeXAttrRequest_EFlags_value = map[string]int32{
		"F_NONE":    0,
		"F_CREATE":  1,
		"F_REPLACE": 2,
	}
)

func (x TSetNodeXAttrRequest_EFlags) Enum() *TSetNodeXAttrRequest_EFlags {
	p := new(TSetNodeXAttrRequest_EFlags)
	*p = x
	return p
}

func (x TSetNodeXAttrRequest_EFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TSetNodeXAttrRequest_EFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_filestore_public_api_protos_node_proto_enumTypes[5].Descriptor()
}

func (TSetNodeXAttrRequest_EFlags) Type() protoreflect.EnumType {
	return &file_cloud_filestore_public_api_protos_node_proto_enumTypes[5]
}

func (x TSetNodeXAttrRequest_EFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TSetNodeXAttrRequest_EFlags.Descriptor instead.
func (TSetNodeXAttrRequest_EFlags) EnumDescriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{21, 0}
}

type TNodeAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node identifier.
	Id uint64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// Node type
	Type uint32 `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	// Permissions.
	Mode uint32 `protobuf:"varint,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
	// Owner & group.
	Uid uint32 `protobuf:"varint,4,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Gid uint32 `protobuf:"varint,5,opt,name=Gid,proto3" json:"Gid,omitempty"`
	// Last access/modification time.
	ATime uint64 `protobuf:"varint,6,opt,name=ATime,proto3" json:"ATime,omitempty"`
	MTime uint64 `protobuf:"varint,7,opt,name=MTime,proto3" json:"MTime,omitempty"`
	CTime uint64 `protobuf:"varint,8,opt,name=CTime,proto3" json:"CTime,omitempty"`
	// File size.
	Size uint64 `protobuf:"varint,9,opt,name=Size,proto3" json:"Size,omitempty"`
	// Number of persistent links
	Links uint32 `protobuf:"varint,10,opt,name=Links,proto3" json:"Links,omitempty"`
}

func (x *TNodeAttr) Reset() {
	*x = TNodeAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TNodeAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TNodeAttr) ProtoMessage() {}

func (x *TNodeAttr) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TNodeAttr.ProtoReflect.Descriptor instead.
func (*TNodeAttr) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{0}
}

func (x *TNodeAttr) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TNodeAttr) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TNodeAttr) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *TNodeAttr) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TNodeAttr) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *TNodeAttr) GetATime() uint64 {
	if x != nil {
		return x.ATime
	}
	return 0
}

func (x *TNodeAttr) GetMTime() uint64 {
	if x != nil {
		return x.MTime
	}
	return 0
}

func (x *TNodeAttr) GetCTime() uint64 {
	if x != nil {
		return x.CTime
	}
	return 0
}

func (x *TNodeAttr) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TNodeAttr) GetLinks() uint32 {
	if x != nil {
		return x.Links
	}
	return 0
}

type TResolvePathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Path.
	Path []byte `protobuf:"bytes,3,opt,name=Path,proto3" json:"Path,omitempty"`
}

func (x *TResolvePathRequest) Reset() {
	*x = TResolvePathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TResolvePathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TResolvePathRequest) ProtoMessage() {}

func (x *TResolvePathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TResolvePathRequest.ProtoReflect.Descriptor instead.
func (*TResolvePathRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{1}
}

func (x *TResolvePathRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TResolvePathRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TResolvePathRequest) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

type TResolvePathResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Nodes from root to path.
	NodeIds []uint64 `protobuf:"varint,2,rep,packed,name=NodeIds,proto3" json:"NodeIds,omitempty"`
	// Node attributes.
	Attr *TNodeAttr `protobuf:"bytes,3,opt,name=Attr,proto3" json:"Attr,omitempty"`
	// Optional response headers.
	Headers *TResponseHeaders `protobuf:"bytes,1000,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TResolvePathResponse) Reset() {
	*x = TResolvePathResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TResolvePathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TResolvePathResponse) ProtoMessage() {}

func (x *TResolvePathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TResolvePathResponse.ProtoReflect.Descriptor instead.
func (*TResolvePathResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{2}
}

func (x *TResolvePathResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TResolvePathResponse) GetNodeIds() []uint64 {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

func (x *TResolvePathResponse) GetAttr() *TNodeAttr {
	if x != nil {
		return x.Attr
	}
	return nil
}

func (x *TResolvePathResponse) GetHeaders() *TResponseHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TCreateNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Parent node.
	NodeId uint64 `protobuf:"varint,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// New node name.
	Name []byte `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	// Owner id of the node.
	Uid uint64 `protobuf:"varint,10,opt,name=Uid,proto3" json:"Uid,omitempty"`
	// Group id of the node.
	Gid uint64 `protobuf:"varint,11,opt,name=Gid,proto3" json:"Gid,omitempty"`
	// Types that are assignable to Params:
	//
	//	*TCreateNodeRequest_Directory
	//	*TCreateNodeRequest_File
	//	*TCreateNodeRequest_Link
	//	*TCreateNodeRequest_SymLink
	//	*TCreateNodeRequest_Socket
	Params isTCreateNodeRequest_Params `protobuf_oneof:"Params"`
}

func (x *TCreateNodeRequest) Reset() {
	*x = TCreateNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCreateNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCreateNodeRequest) ProtoMessage() {}

func (x *TCreateNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCreateNodeRequest.ProtoReflect.Descriptor instead.
func (*TCreateNodeRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{3}
}

func (x *TCreateNodeRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TCreateNodeRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TCreateNodeRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TCreateNodeRequest) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *TCreateNodeRequest) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TCreateNodeRequest) GetGid() uint64 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (m *TCreateNodeRequest) GetParams() isTCreateNodeRequest_Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (x *TCreateNodeRequest) GetDirectory() *TCreateNodeRequest_TDirectory {
	if x, ok := x.GetParams().(*TCreateNodeRequest_Directory); ok {
		return x.Directory
	}
	return nil
}

func (x *TCreateNodeRequest) GetFile() *TCreateNodeRequest_TFile {
	if x, ok := x.GetParams().(*TCreateNodeRequest_File); ok {
		return x.File
	}
	return nil
}

func (x *TCreateNodeRequest) GetLink() *TCreateNodeRequest_TLink {
	if x, ok := x.GetParams().(*TCreateNodeRequest_Link); ok {
		return x.Link
	}
	return nil
}

func (x *TCreateNodeRequest) GetSymLink() *TCreateNodeRequest_TSymLink {
	if x, ok := x.GetParams().(*TCreateNodeRequest_SymLink); ok {
		return x.SymLink
	}
	return nil
}

func (x *TCreateNodeRequest) GetSocket() *TCreateNodeRequest_TSocket {
	if x, ok := x.GetParams().(*TCreateNodeRequest_Socket); ok {
		return x.Socket
	}
	return nil
}

type isTCreateNodeRequest_Params interface {
	isTCreateNodeRequest_Params()
}

type TCreateNodeRequest_Directory struct {
	Directory *TCreateNodeRequest_TDirectory `protobuf:"bytes,5,opt,name=Directory,proto3,oneof"`
}

type TCreateNodeRequest_File struct {
	File *TCreateNodeRequest_TFile `protobuf:"bytes,6,opt,name=File,proto3,oneof"`
}

type TCreateNodeRequest_Link struct {
	Link *TCreateNodeRequest_TLink `protobuf:"bytes,7,opt,name=Link,proto3,oneof"`
}

type TCreateNodeRequest_SymLink struct {
	SymLink *TCreateNodeRequest_TSymLink `protobuf:"bytes,8,opt,name=SymLink,proto3,oneof"`
}

type TCreateNodeRequest_Socket struct {
	Socket *TCreateNodeRequest_TSocket `protobuf:"bytes,9,opt,name=Socket,proto3,oneof"`
}

func (*TCreateNodeRequest_Directory) isTCreateNodeRequest_Params() {}

func (*TCreateNodeRequest_File) isTCreateNodeRequest_Params() {}

func (*TCreateNodeRequest_Link) isTCreateNodeRequest_Params() {}

func (*TCreateNodeRequest_SymLink) isTCreateNodeRequest_Params() {}

func (*TCreateNodeRequest_Socket) isTCreateNodeRequest_Params() {}

type TCreateNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Node attributes.
	Node *TNodeAttr `protobuf:"bytes,2,opt,name=Node,proto3" json:"Node,omitempty"`
	// Optional response headers.
	Headers *TResponseHeaders `protobuf:"bytes,1000,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TCreateNodeResponse) Reset() {
	*x = TCreateNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCreateNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCreateNodeResponse) ProtoMessage() {}

func (x *TCreateNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCreateNodeResponse.ProtoReflect.Descriptor instead.
func (*TCreateNodeResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{4}
}

func (x *TCreateNodeResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TCreateNodeResponse) GetNode() *TNodeAttr {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *TCreateNodeResponse) GetHeaders() *TResponseHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TUnlinkNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Parent node.
	NodeId uint64 `protobuf:"varint,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// Reference to remove.
	Name []byte `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	// Unlink directory node if empty.
	UnlinkDirectory bool `protobuf:"varint,5,opt,name=UnlinkDirectory,proto3" json:"UnlinkDirectory,omitempty"`
}

func (x *TUnlinkNodeRequest) Reset() {
	*x = TUnlinkNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUnlinkNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUnlinkNodeRequest) ProtoMessage() {}

func (x *TUnlinkNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUnlinkNodeRequest.ProtoReflect.Descriptor instead.
func (*TUnlinkNodeRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{5}
}

func (x *TUnlinkNodeRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TUnlinkNodeRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TUnlinkNodeRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TUnlinkNodeRequest) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *TUnlinkNodeRequest) GetUnlinkDirectory() bool {
	if x != nil {
		return x.UnlinkDirectory
	}
	return false
}

type TUnlinkNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Optional response headers.
	Headers *TResponseHeaders `protobuf:"bytes,1000,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TUnlinkNodeResponse) Reset() {
	*x = TUnlinkNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TUnlinkNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TUnlinkNodeResponse) ProtoMessage() {}

func (x *TUnlinkNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TUnlinkNodeResponse.ProtoReflect.Descriptor instead.
func (*TUnlinkNodeResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{6}
}

func (x *TUnlinkNodeResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TUnlinkNodeResponse) GetHeaders() *TResponseHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TRenameNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Parent Node.
	NodeId uint64 `protobuf:"varint,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// Existing name.
	Name []byte `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	// New parent Node
	NewParentId uint64 `protobuf:"varint,5,opt,name=NewParentId,proto3" json:"NewParentId,omitempty"`
	// New node name.
	NewName []byte `protobuf:"bytes,6,opt,name=NewName,proto3" json:"NewName,omitempty"`
	// Optional linux specific flags.
	Flags uint32 `protobuf:"varint,7,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *TRenameNodeRequest) Reset() {
	*x = TRenameNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRenameNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRenameNodeRequest) ProtoMessage() {}

func (x *TRenameNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRenameNodeRequest.ProtoReflect.Descriptor instead.
func (*TRenameNodeRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{7}
}

func (x *TRenameNodeRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TRenameNodeRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TRenameNodeRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TRenameNodeRequest) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *TRenameNodeRequest) GetNewParentId() uint64 {
	if x != nil {
		return x.NewParentId
	}
	return 0
}

func (x *TRenameNodeRequest) GetNewName() []byte {
	if x != nil {
		return x.NewName
	}
	return nil
}

func (x *TRenameNodeRequest) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type TRenameNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Optional response headers.
	Headers *TResponseHeaders `protobuf:"bytes,1000,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TRenameNodeResponse) Reset() {
	*x = TRenameNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRenameNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRenameNodeResponse) ProtoMessage() {}

func (x *TRenameNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRenameNodeResponse.ProtoReflect.Descriptor instead.
func (*TRenameNodeResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{8}
}

func (x *TRenameNodeResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TRenameNodeResponse) GetHeaders() *TResponseHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TAccessNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Node.
	NodeId uint64 `protobuf:"varint,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// Permissions to check.
	Mask uint32 `protobuf:"varint,4,opt,name=Mask,proto3" json:"Mask,omitempty"`
}

func (x *TAccessNodeRequest) Reset() {
	*x = TAccessNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAccessNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAccessNodeRequest) ProtoMessage() {}

func (x *TAccessNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAccessNodeRequest.ProtoReflect.Descriptor instead.
func (*TAccessNodeRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{9}
}

func (x *TAccessNodeRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TAccessNodeRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TAccessNodeRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TAccessNodeRequest) GetMask() uint32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

type TAccessNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Optional response headers.
	Headers *TResponseHeaders `protobuf:"bytes,1000,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TAccessNodeResponse) Reset() {
	*x = TAccessNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAccessNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAccessNodeResponse) ProtoMessage() {}

func (x *TAccessNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAccessNodeResponse.ProtoReflect.Descriptor instead.
func (*TAccessNodeResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{10}
}

func (x *TAccessNodeResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TAccessNodeResponse) GetHeaders() *TResponseHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TListNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Node.
	NodeId uint64 `protobuf:"varint,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// Optional cookie passed by server to continue listing.
	Cookie []byte `protobuf:"bytes,4,opt,name=Cookie,proto3" json:"Cookie,omitempty"`
	// Optional limit for response bytes count.
	MaxBytes uint32 `protobuf:"varint,5,opt,name=MaxBytes,proto3" json:"MaxBytes,omitempty"`
}

func (x *TListNodesRequest) Reset() {
	*x = TListNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TListNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TListNodesRequest) ProtoMessage() {}

func (x *TListNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TListNodesRequest.ProtoReflect.Descriptor instead.
func (*TListNodesRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{11}
}

func (x *TListNodesRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TListNodesRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TListNodesRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TListNodesRequest) GetCookie() []byte {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *TListNodesRequest) GetMaxBytes() uint32 {
	if x != nil {
		return x.MaxBytes
	}
	return 0
}

type TListNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Node names.
	Names [][]byte `protobuf:"bytes,2,rep,name=Names,proto3" json:"Names,omitempty"`
	// Node attributes.
	Nodes []*TNodeAttr `protobuf:"bytes,3,rep,name=Nodes,proto3" json:"Nodes,omitempty"`
	// Cookie will be set for partial answer due to limitations.
	Cookie []byte `protobuf:"bytes,4,opt,name=Cookie,proto3" json:"Cookie,omitempty"`
	// Optional response headers.
	Headers *TResponseHeaders `protobuf:"bytes,1000,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TListNodesResponse) Reset() {
	*x = TListNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TListNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TListNodesResponse) ProtoMessage() {}

func (x *TListNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TListNodesResponse.ProtoReflect.Descriptor instead.
func (*TListNodesResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{12}
}

func (x *TListNodesResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TListNodesResponse) GetNames() [][]byte {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *TListNodesResponse) GetNodes() []*TNodeAttr {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *TListNodesResponse) GetCookie() []byte {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *TListNodesResponse) GetHeaders() *TResponseHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TReadLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Node.
	NodeId uint64 `protobuf:"varint,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
}

func (x *TReadLinkRequest) Reset() {
	*x = TReadLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReadLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReadLinkRequest) ProtoMessage() {}

func (x *TReadLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReadLinkRequest.ProtoReflect.Descriptor instead.
func (*TReadLinkRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{13}
}

func (x *TReadLinkRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TReadLinkRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TReadLinkRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type TReadLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Symlink contents.
	SymLink []byte `protobuf:"bytes,2,opt,name=SymLink,proto3" json:"SymLink,omitempty"`
	// Optional response headers.
	Headers *TResponseHeaders `protobuf:"bytes,1000,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TReadLinkResponse) Reset() {
	*x = TReadLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReadLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReadLinkResponse) ProtoMessage() {}

func (x *TReadLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReadLinkResponse.ProtoReflect.Descriptor instead.
func (*TReadLinkResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{14}
}

func (x *TReadLinkResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TReadLinkResponse) GetSymLink() []byte {
	if x != nil {
		return x.SymLink
	}
	return nil
}

func (x *TReadLinkResponse) GetHeaders() *TResponseHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TSetNodeAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Node.
	NodeId uint64 `protobuf:"varint,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// IO handle.
	Handle uint64 `protobuf:"varint,4,opt,name=Handle,proto3" json:"Handle,omitempty"`
	// Update.
	Update *TSetNodeAttrRequest_TUpdate `protobuf:"bytes,5,opt,name=Update,proto3" json:"Update,omitempty"`
	// Update flags.
	Flags uint32 `protobuf:"varint,6,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *TSetNodeAttrRequest) Reset() {
	*x = TSetNodeAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSetNodeAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSetNodeAttrRequest) ProtoMessage() {}

func (x *TSetNodeAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSetNodeAttrRequest.ProtoReflect.Descriptor instead.
func (*TSetNodeAttrRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{15}
}

func (x *TSetNodeAttrRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TSetNodeAttrRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TSetNodeAttrRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TSetNodeAttrRequest) GetHandle() uint64 {
	if x != nil {
		return x.Handle
	}
	return 0
}

func (x *TSetNodeAttrRequest) GetUpdate() *TSetNodeAttrRequest_TUpdate {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *TSetNodeAttrRequest) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type TSetNodeAttrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Node attributes.
	Node *TNodeAttr `protobuf:"bytes,2,opt,name=Node,proto3" json:"Node,omitempty"`
	// Optional response headers.
	Headers *TResponseHeaders `protobuf:"bytes,1000,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TSetNodeAttrResponse) Reset() {
	*x = TSetNodeAttrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSetNodeAttrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSetNodeAttrResponse) ProtoMessage() {}

func (x *TSetNodeAttrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSetNodeAttrResponse.ProtoReflect.Descriptor instead.
func (*TSetNodeAttrResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{16}
}

func (x *TSetNodeAttrResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TSetNodeAttrResponse) GetNode() *TNodeAttr {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *TSetNodeAttrResponse) GetHeaders() *TResponseHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TGetNodeAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Parent.
	NodeId uint64 `protobuf:"varint,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// Node.
	Name []byte `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	// IO handle.
	Handle uint64 `protobuf:"varint,5,opt,name=Handle,proto3" json:"Handle,omitempty"`
	// Specifies information to get.
	Flags uint32 `protobuf:"varint,6,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *TGetNodeAttrRequest) Reset() {
	*x = TGetNodeAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetNodeAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetNodeAttrRequest) ProtoMessage() {}

func (x *TGetNodeAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetNodeAttrRequest.ProtoReflect.Descriptor instead.
func (*TGetNodeAttrRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{17}
}

func (x *TGetNodeAttrRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TGetNodeAttrRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TGetNodeAttrRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TGetNodeAttrRequest) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *TGetNodeAttrRequest) GetHandle() uint64 {
	if x != nil {
		return x.Handle
	}
	return 0
}

func (x *TGetNodeAttrRequest) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type TGetNodeAttrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Node attributes.
	Node *TNodeAttr `protobuf:"bytes,2,opt,name=Node,proto3" json:"Node,omitempty"`
	// Optional response headers.
	Headers *TResponseHeaders `protobuf:"bytes,1000,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TGetNodeAttrResponse) Reset() {
	*x = TGetNodeAttrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetNodeAttrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetNodeAttrResponse) ProtoMessage() {}

func (x *TGetNodeAttrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetNodeAttrResponse.ProtoReflect.Descriptor instead.
func (*TGetNodeAttrResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{18}
}

func (x *TGetNodeAttrResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TGetNodeAttrResponse) GetNode() *TNodeAttr {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *TGetNodeAttrResponse) GetHeaders() *TResponseHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TGetNodeXAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Node.
	NodeId uint64 `protobuf:"varint,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// Attribute name.
	Name []byte `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *TGetNodeXAttrRequest) Reset() {
	*x = TGetNodeXAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetNodeXAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetNodeXAttrRequest) ProtoMessage() {}

func (x *TGetNodeXAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetNodeXAttrRequest.ProtoReflect.Descriptor instead.
func (*TGetNodeXAttrRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{19}
}

func (x *TGetNodeXAttrRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TGetNodeXAttrRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TGetNodeXAttrRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TGetNodeXAttrRequest) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

type TGetNodeXAttrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Attribute value.
	Value []byte `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	// Version of set value.
	Version uint64 `protobuf:"varint,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Optional response headers.
	Headers *TResponseHeaders `protobuf:"bytes,1000,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TGetNodeXAttrResponse) Reset() {
	*x = TGetNodeXAttrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetNodeXAttrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetNodeXAttrResponse) ProtoMessage() {}

func (x *TGetNodeXAttrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetNodeXAttrResponse.ProtoReflect.Descriptor instead.
func (*TGetNodeXAttrResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{20}
}

func (x *TGetNodeXAttrResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TGetNodeXAttrResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TGetNodeXAttrResponse) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TGetNodeXAttrResponse) GetHeaders() *TResponseHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TSetNodeXAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Node.
	NodeId uint64 `protobuf:"varint,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// Attribute name.
	Name []byte `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	// Attribute value.
	Value []byte `protobuf:"bytes,5,opt,name=Value,proto3" json:"Value,omitempty"`
	// Additional flags.
	Flags uint32 `protobuf:"varint,6,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *TSetNodeXAttrRequest) Reset() {
	*x = TSetNodeXAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSetNodeXAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSetNodeXAttrRequest) ProtoMessage() {}

func (x *TSetNodeXAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSetNodeXAttrRequest.ProtoReflect.Descriptor instead.
func (*TSetNodeXAttrRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{21}
}

func (x *TSetNodeXAttrRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TSetNodeXAttrRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TSetNodeXAttrRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TSetNodeXAttrRequest) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *TSetNodeXAttrRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TSetNodeXAttrRequest) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type TSetNodeXAttrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Version of set value.
	Version uint64 `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	// Optional response headers.
	Headers *TResponseHeaders `protobuf:"bytes,1000,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TSetNodeXAttrResponse) Reset() {
	*x = TSetNodeXAttrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSetNodeXAttrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSetNodeXAttrResponse) ProtoMessage() {}

func (x *TSetNodeXAttrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSetNodeXAttrResponse.ProtoReflect.Descriptor instead.
func (*TSetNodeXAttrResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{22}
}

func (x *TSetNodeXAttrResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TSetNodeXAttrResponse) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TSetNodeXAttrResponse) GetHeaders() *TResponseHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TListNodeXAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Node.
	NodeId uint64 `protobuf:"varint,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
}

func (x *TListNodeXAttrRequest) Reset() {
	*x = TListNodeXAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TListNodeXAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TListNodeXAttrRequest) ProtoMessage() {}

func (x *TListNodeXAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TListNodeXAttrRequest.ProtoReflect.Descriptor instead.
func (*TListNodeXAttrRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{23}
}

func (x *TListNodeXAttrRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TListNodeXAttrRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TListNodeXAttrRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type TListNodeXAttrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Attribute names.
	Names [][]byte `protobuf:"bytes,2,rep,name=Names,proto3" json:"Names,omitempty"`
	// Optional response headers.
	Headers *TResponseHeaders `protobuf:"bytes,1000,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TListNodeXAttrResponse) Reset() {
	*x = TListNodeXAttrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TListNodeXAttrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TListNodeXAttrResponse) ProtoMessage() {}

func (x *TListNodeXAttrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TListNodeXAttrResponse.ProtoReflect.Descriptor instead.
func (*TListNodeXAttrResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{24}
}

func (x *TListNodeXAttrResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TListNodeXAttrResponse) GetNames() [][]byte {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *TListNodeXAttrResponse) GetHeaders() *TResponseHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TRemoveNodeXAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Node.
	NodeId uint64 `protobuf:"varint,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// Attribute name.
	Name []byte `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *TRemoveNodeXAttrRequest) Reset() {
	*x = TRemoveNodeXAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRemoveNodeXAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRemoveNodeXAttrRequest) ProtoMessage() {}

func (x *TRemoveNodeXAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRemoveNodeXAttrRequest.ProtoReflect.Descriptor instead.
func (*TRemoveNodeXAttrRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{25}
}

func (x *TRemoveNodeXAttrRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TRemoveNodeXAttrRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TRemoveNodeXAttrRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TRemoveNodeXAttrRequest) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

type TRemoveNodeXAttrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Optional response headers.
	Headers *TResponseHeaders `protobuf:"bytes,1000,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TRemoveNodeXAttrResponse) Reset() {
	*x = TRemoveNodeXAttrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRemoveNodeXAttrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRemoveNodeXAttrResponse) ProtoMessage() {}

func (x *TRemoveNodeXAttrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRemoveNodeXAttrResponse.ProtoReflect.Descriptor instead.
func (*TRemoveNodeXAttrResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{26}
}

func (x *TRemoveNodeXAttrResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TRemoveNodeXAttrResponse) GetHeaders() *TResponseHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TCreateNodeRequest_TDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode uint32 `protobuf:"varint,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (x *TCreateNodeRequest_TDirectory) Reset() {
	*x = TCreateNodeRequest_TDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCreateNodeRequest_TDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCreateNodeRequest_TDirectory) ProtoMessage() {}

func (x *TCreateNodeRequest_TDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCreateNodeRequest_TDirectory.ProtoReflect.Descriptor instead.
func (*TCreateNodeRequest_TDirectory) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{3, 0}
}

func (x *TCreateNodeRequest_TDirectory) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type TCreateNodeRequest_TFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode uint32 `protobuf:"varint,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (x *TCreateNodeRequest_TFile) Reset() {
	*x = TCreateNodeRequest_TFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCreateNodeRequest_TFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCreateNodeRequest_TFile) ProtoMessage() {}

func (x *TCreateNodeRequest_TFile) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCreateNodeRequest_TFile.ProtoReflect.Descriptor instead.
func (*TCreateNodeRequest_TFile) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{3, 1}
}

func (x *TCreateNodeRequest_TFile) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type TCreateNodeRequest_TLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetNode uint64 `protobuf:"varint,1,opt,name=TargetNode,proto3" json:"TargetNode,omitempty"`
}

func (x *TCreateNodeRequest_TLink) Reset() {
	*x = TCreateNodeRequest_TLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCreateNodeRequest_TLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCreateNodeRequest_TLink) ProtoMessage() {}

func (x *TCreateNodeRequest_TLink) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCreateNodeRequest_TLink.ProtoReflect.Descriptor instead.
func (*TCreateNodeRequest_TLink) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{3, 2}
}

func (x *TCreateNodeRequest_TLink) GetTargetNode() uint64 {
	if x != nil {
		return x.TargetNode
	}
	return 0
}

type TCreateNodeRequest_TSymLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPath []byte `protobuf:"bytes,1,opt,name=TargetPath,proto3" json:"TargetPath,omitempty"`
}

func (x *TCreateNodeRequest_TSymLink) Reset() {
	*x = TCreateNodeRequest_TSymLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCreateNodeRequest_TSymLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCreateNodeRequest_TSymLink) ProtoMessage() {}

func (x *TCreateNodeRequest_TSymLink) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCreateNodeRequest_TSymLink.ProtoReflect.Descriptor instead.
func (*TCreateNodeRequest_TSymLink) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{3, 3}
}

func (x *TCreateNodeRequest_TSymLink) GetTargetPath() []byte {
	if x != nil {
		return x.TargetPath
	}
	return nil
}

type TCreateNodeRequest_TSocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode uint32 `protobuf:"varint,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (x *TCreateNodeRequest_TSocket) Reset() {
	*x = TCreateNodeRequest_TSocket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCreateNodeRequest_TSocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCreateNodeRequest_TSocket) ProtoMessage() {}

func (x *TCreateNodeRequest_TSocket) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCreateNodeRequest_TSocket.ProtoReflect.Descriptor instead.
func (*TCreateNodeRequest_TSocket) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{3, 4}
}

func (x *TCreateNodeRequest_TSocket) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type TSetNodeAttrRequest_TUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode  uint32 `protobuf:"varint,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Uid   uint32 `protobuf:"varint,2,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Gid   uint32 `protobuf:"varint,3,opt,name=Gid,proto3" json:"Gid,omitempty"`
	Size  uint64 `protobuf:"varint,4,opt,name=Size,proto3" json:"Size,omitempty"`
	ATime uint64 `protobuf:"varint,5,opt,name=ATime,proto3" json:"ATime,omitempty"`
	MTime uint64 `protobuf:"varint,6,opt,name=MTime,proto3" json:"MTime,omitempty"`
	CTime uint64 `protobuf:"varint,7,opt,name=CTime,proto3" json:"CTime,omitempty"`
}

func (x *TSetNodeAttrRequest_TUpdate) Reset() {
	*x = TSetNodeAttrRequest_TUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSetNodeAttrRequest_TUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSetNodeAttrRequest_TUpdate) ProtoMessage() {}

func (x *TSetNodeAttrRequest_TUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_node_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSetNodeAttrRequest_TUpdate.ProtoReflect.Descriptor instead.
func (*TSetNodeAttrRequest_TUpdate) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP(), []int{15, 0}
}

func (x *TSetNodeAttrRequest_TUpdate) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *TSetNodeAttrRequest_TUpdate) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TSetNodeAttrRequest_TUpdate) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *TSetNodeAttrRequest_TUpdate) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TSetNodeAttrRequest_TUpdate) GetATime() uint64 {
	if x != nil {
		return x.ATime
	}
	return 0
}

func (x *TSetNodeAttrRequest_TUpdate) GetMTime() uint64 {
	if x != nil {
		return x.MTime
	}
	return 0
}

func (x *TSetNodeAttrRequest_TUpdate) GetCTime() uint64 {
	if x != nil {
		return x.CTime
	}
	return 0
}

var File_cloud_filestore_public_api_protos_node_proto protoreflect.FileDescriptor

var file_cloud_filestore_public_api_protos_node_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd3, 0x01, 0x0a, 0x09, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x55, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x47, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x41, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x4d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x54, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x50, 0x61, 0x74, 0x68, 0x22, 0xdd, 0x01, 0x0a, 0x14, 0x54, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x41, 0x74, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x04, 0x41, 0x74, 0x74, 0x72, 0x12, 0x45, 0x0a,
	0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x22, 0x93, 0x06, 0x0a, 0x12, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x55, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x47,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x47, 0x69, 0x64, 0x12, 0x57, 0x0a,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x04, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x48, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x4c, 0x69,
	0x6e, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x51, 0x0a, 0x07, 0x53, 0x79,
	0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x53, 0x79, 0x6d, 0x4c, 0x69,
	0x6e, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x53, 0x79, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x4e, 0x0a,
	0x06, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x20, 0x0a,
	0x0a, 0x54, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x1a,
	0x1b, 0x0a, 0x05, 0x54, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0x27, 0x0a, 0x05,
	0x54, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x2a, 0x0a, 0x08, 0x54, 0x53, 0x79, 0x6d, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x1a, 0x1d, 0x0a, 0x07, 0x54, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x13, 0x54,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x37, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22,
	0xcc, 0x01, 0x0a, 0x12, 0x54, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x55,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x89,
	0x01, 0x0a, 0x13, 0x54, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0xe8,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0xab, 0x02, 0x0a, 0x12, 0x54,
	0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x4e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x22, 0x35, 0x0a, 0x06, 0x45, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x5f, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x5f, 0x4e, 0x4f, 0x52,
	0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x02, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x54, 0x52, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x45, 0x0a,
	0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x54, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x54, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x45,
	0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x11, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x4d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x4d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x12, 0x54, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x8c, 0x01,
	0x0a, 0x10, 0x54, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a,
	0x11, 0x54, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x79, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x53, 0x79, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x45, 0x0a, 0x07, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x22, 0xd1, 0x04, 0x0a, 0x13, 0x54, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x1a,
	0x97, 0x01, 0x0a, 0x07, 0x54, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x55, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x47, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x41, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x4d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4d, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x06, 0x45, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x46, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x55, 0x49, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x47, 0x49, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x46, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x49, 0x5a, 0x45,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x41, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x14,
	0x0a, 0x10, 0x46, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x07, 0x22, 0xc3, 0x01, 0x0a, 0x14, 0x54, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x04, 0x4e, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x04, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0xe8,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x13, 0x54,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x14,
	0x0a, 0x06, 0x45, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x22, 0xc3, 0x01, 0x0a, 0x14, 0x54, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x04, 0x4e, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x04, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0xe8,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x14, 0x54,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xbb, 0x01, 0x0a, 0x15, 0x54, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x58, 0x41,
	0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22,
	0x83, 0x02, 0x0a, 0x14, 0x54, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x58, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x22, 0x31, 0x0a, 0x06, 0x45, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x10, 0x02, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x54, 0x53, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x91, 0x01,
	0x0a, 0x15, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x58, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x22, 0xa2, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x58,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x45, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x17, 0x54, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x8e, 0x01, 0x0a, 0x18, 0x54, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x2a, 0x55, 0x0a, 0x0e, 0x45, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x49, 0x44, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0x6b, 0x0a, 0x09, 0x45, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x5f, 0x52,
	0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x44,
	0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x10, 0x04, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x6e, 0x62, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_filestore_public_api_protos_node_proto_rawDescOnce sync.Once
	file_cloud_filestore_public_api_protos_node_proto_rawDescData = file_cloud_filestore_public_api_protos_node_proto_rawDesc
)

func file_cloud_filestore_public_api_protos_node_proto_rawDescGZIP() []byte {
	file_cloud_filestore_public_api_protos_node_proto_rawDescOnce.Do(func() {
		file_cloud_filestore_public_api_protos_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_filestore_public_api_protos_node_proto_rawDescData)
	})
	return file_cloud_filestore_public_api_protos_node_proto_rawDescData
}

var file_cloud_filestore_public_api_protos_node_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_cloud_filestore_public_api_protos_node_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_cloud_filestore_public_api_protos_node_proto_goTypes = []interface{}{
	(ENodeConstants)(0),                   // 0: NCloud.NFileStore.NProto.ENodeConstants
	(ENodeType)(0),                        // 1: NCloud.NFileStore.NProto.ENodeType
	(TRenameNodeRequest_EFlags)(0),        // 2: NCloud.NFileStore.NProto.TRenameNodeRequest.EFlags
	(TSetNodeAttrRequest_EFlags)(0),       // 3: NCloud.NFileStore.NProto.TSetNodeAttrRequest.EFlags
	(TGetNodeAttrRequest_EFlags)(0),       // 4: NCloud.NFileStore.NProto.TGetNodeAttrRequest.EFlags
	(TSetNodeXAttrRequest_EFlags)(0),      // 5: NCloud.NFileStore.NProto.TSetNodeXAttrRequest.EFlags
	(*TNodeAttr)(nil),                     // 6: NCloud.NFileStore.NProto.TNodeAttr
	(*TResolvePathRequest)(nil),           // 7: NCloud.NFileStore.NProto.TResolvePathRequest
	(*TResolvePathResponse)(nil),          // 8: NCloud.NFileStore.NProto.TResolvePathResponse
	(*TCreateNodeRequest)(nil),            // 9: NCloud.NFileStore.NProto.TCreateNodeRequest
	(*TCreateNodeResponse)(nil),           // 10: NCloud.NFileStore.NProto.TCreateNodeResponse
	(*TUnlinkNodeRequest)(nil),            // 11: NCloud.NFileStore.NProto.TUnlinkNodeRequest
	(*TUnlinkNodeResponse)(nil),           // 12: NCloud.NFileStore.NProto.TUnlinkNodeResponse
	(*TRenameNodeRequest)(nil),            // 13: NCloud.NFileStore.NProto.TRenameNodeRequest
	(*TRenameNodeResponse)(nil),           // 14: NCloud.NFileStore.NProto.TRenameNodeResponse
	(*TAccessNodeRequest)(nil),            // 15: NCloud.NFileStore.NProto.TAccessNodeRequest
	(*TAccessNodeResponse)(nil),           // 16: NCloud.NFileStore.NProto.TAccessNodeResponse
	(*TListNodesRequest)(nil),             // 17: NCloud.NFileStore.NProto.TListNodesRequest
	(*TListNodesResponse)(nil),            // 18: NCloud.NFileStore.NProto.TListNodesResponse
	(*TReadLinkRequest)(nil),              // 19: NCloud.NFileStore.NProto.TReadLinkRequest
	(*TReadLinkResponse)(nil),             // 20: NCloud.NFileStore.NProto.TReadLinkResponse
	(*TSetNodeAttrRequest)(nil),           // 21: NCloud.NFileStore.NProto.TSetNodeAttrRequest
	(*TSetNodeAttrResponse)(nil),          // 22: NCloud.NFileStore.NProto.TSetNodeAttrResponse
	(*TGetNodeAttrRequest)(nil),           // 23: NCloud.NFileStore.NProto.TGetNodeAttrRequest
	(*TGetNodeAttrResponse)(nil),          // 24: NCloud.NFileStore.NProto.TGetNodeAttrResponse
	(*TGetNodeXAttrRequest)(nil),          // 25: NCloud.NFileStore.NProto.TGetNodeXAttrRequest
	(*TGetNodeXAttrResponse)(nil),         // 26: NCloud.NFileStore.NProto.TGetNodeXAttrResponse
	(*TSetNodeXAttrRequest)(nil),          // 27: NCloud.NFileStore.NProto.TSetNodeXAttrRequest
	(*TSetNodeXAttrResponse)(nil),         // 28: NCloud.NFileStore.NProto.TSetNodeXAttrResponse
	(*TListNodeXAttrRequest)(nil),         // 29: NCloud.NFileStore.NProto.TListNodeXAttrRequest
	(*TListNodeXAttrResponse)(nil),        // 30: NCloud.NFileStore.NProto.TListNodeXAttrResponse
	(*TRemoveNodeXAttrRequest)(nil),       // 31: NCloud.NFileStore.NProto.TRemoveNodeXAttrRequest
	(*TRemoveNodeXAttrResponse)(nil),      // 32: NCloud.NFileStore.NProto.TRemoveNodeXAttrResponse
	(*TCreateNodeRequest_TDirectory)(nil), // 33: NCloud.NFileStore.NProto.TCreateNodeRequest.TDirectory
	(*TCreateNodeRequest_TFile)(nil),      // 34: NCloud.NFileStore.NProto.TCreateNodeRequest.TFile
	(*TCreateNodeRequest_TLink)(nil),      // 35: NCloud.NFileStore.NProto.TCreateNodeRequest.TLink
	(*TCreateNodeRequest_TSymLink)(nil),   // 36: NCloud.NFileStore.NProto.TCreateNodeRequest.TSymLink
	(*TCreateNodeRequest_TSocket)(nil),    // 37: NCloud.NFileStore.NProto.TCreateNodeRequest.TSocket
	(*TSetNodeAttrRequest_TUpdate)(nil),   // 38: NCloud.NFileStore.NProto.TSetNodeAttrRequest.TUpdate
	(*THeaders)(nil),                      // 39: NCloud.NFileStore.NProto.THeaders
	(*protos.TError)(nil),                 // 40: NCloud.NProto.TError
	(*TResponseHeaders)(nil),              // 41: NCloud.NFileStore.NProto.TResponseHeaders
}
var file_cloud_filestore_public_api_protos_node_proto_depIdxs = []int32{
	39, // 0: NCloud.NFileStore.NProto.TResolvePathRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	40, // 1: NCloud.NFileStore.NProto.TResolvePathResponse.Error:type_name -> NCloud.NProto.TError
	6,  // 2: NCloud.NFileStore.NProto.TResolvePathResponse.Attr:type_name -> NCloud.NFileStore.NProto.TNodeAttr
	41, // 3: NCloud.NFileStore.NProto.TResolvePathResponse.Headers:type_name -> NCloud.NFileStore.NProto.TResponseHeaders
	39, // 4: NCloud.NFileStore.NProto.TCreateNodeRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	33, // 5: NCloud.NFileStore.NProto.TCreateNodeRequest.Directory:type_name -> NCloud.NFileStore.NProto.TCreateNodeRequest.TDirectory
	34, // 6: NCloud.NFileStore.NProto.TCreateNodeRequest.File:type_name -> NCloud.NFileStore.NProto.TCreateNodeRequest.TFile
	35, // 7: NCloud.NFileStore.NProto.TCreateNodeRequest.Link:type_name -> NCloud.NFileStore.NProto.TCreateNodeRequest.TLink
	36, // 8: NCloud.NFileStore.NProto.TCreateNodeRequest.SymLink:type_name -> NCloud.NFileStore.NProto.TCreateNodeRequest.TSymLink
	37, // 9: NCloud.NFileStore.NProto.TCreateNodeRequest.Socket:type_name -> NCloud.NFileStore.NProto.TCreateNodeRequest.TSocket
	40, // 10: NCloud.NFileStore.NProto.TCreateNodeResponse.Error:type_name -> NCloud.NProto.TError
	6,  // 11: NCloud.NFileStore.NProto.TCreateNodeResponse.Node:type_name -> NCloud.NFileStore.NProto.TNodeAttr
	41, // 12: NCloud.NFileStore.NProto.TCreateNodeResponse.Headers:type_name -> NCloud.NFileStore.NProto.TResponseHeaders
	39, // 13: NCloud.NFileStore.NProto.TUnlinkNodeRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	40, // 14: NCloud.NFileStore.NProto.TUnlinkNodeResponse.Error:type_name -> NCloud.NProto.TError
	41, // 15: NCloud.NFileStore.NProto.TUnlinkNodeResponse.Headers:type_name -> NCloud.NFileStore.NProto.TResponseHeaders
	39, // 16: NCloud.NFileStore.NProto.TRenameNodeRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	40, // 17: NCloud.NFileStore.NProto.TRenameNodeResponse.Error:type_name -> NCloud.NProto.TError
	41, // 18: NCloud.NFileStore.NProto.TRenameNodeResponse.Headers:type_name -> NCloud.NFileStore.NProto.TResponseHeaders
	39, // 19: NCloud.NFileStore.NProto.TAccessNodeRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	40, // 20: NCloud.NFileStore.NProto.TAccessNodeResponse.Error:type_name -> NCloud.NProto.TError
	41, // 21: NCloud.NFileStore.NProto.TAccessNodeResponse.Headers:type_name -> NCloud.NFileStore.NProto.TResponseHeaders
	39, // 22: NCloud.NFileStore.NProto.TListNodesRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	40, // 23: NCloud.NFileStore.NProto.TListNodesResponse.Error:type_name -> NCloud.NProto.TError
	6,  // 24: NCloud.NFileStore.NProto.TListNodesResponse.Nodes:type_name -> NCloud.NFileStore.NProto.TNodeAttr
	41, // 25: NCloud.NFileStore.NProto.TListNodesResponse.Headers:type_name -> NCloud.NFileStore.NProto.TResponseHeaders
	39, // 26: NCloud.NFileStore.NProto.TReadLinkRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	40, // 27: NCloud.NFileStore.NProto.TReadLinkResponse.Error:type_name -> NCloud.NProto.TError
	41, // 28: NCloud.NFileStore.NProto.TReadLinkResponse.Headers:type_name -> NCloud.NFileStore.NProto.TResponseHeaders
	39, // 29: NCloud.NFileStore.NProto.TSetNodeAttrRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	38, // 30: NCloud.NFileStore.NProto.TSetNodeAttrRequest.Update:type_name -> NCloud.NFileStore.NProto.TSetNodeAttrRequest.TUpdate
	40, // 31: NCloud.NFileStore.NProto.TSetNodeAttrResponse.Error:type_name -> NCloud.NProto.TError
	6,  // 32: NCloud.NFileStore.NProto.TSetNodeAttrResponse.Node:type_name -> NCloud.NFileStore.NProto.TNodeAttr
	41, // 33: NCloud.NFileStore.NProto.TSetNodeAttrResponse.Headers:type_name -> NCloud.NFileStore.NProto.TResponseHeaders
	39, // 34: NCloud.NFileStore.NProto.TGetNodeAttrRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	40, // 35: NCloud.NFileStore.NProto.TGetNodeAttrResponse.Error:type_name -> NCloud.NProto.TError
	6,  // 36: NCloud.NFileStore.NProto.TGetNodeAttrResponse.Node:type_name -> NCloud.NFileStore.NProto.TNodeAttr
	41, // 37: NCloud.NFileStore.NProto.TGetNodeAttrResponse.Headers:type_name -> NCloud.NFileStore.NProto.TResponseHeaders
	39, // 38: NCloud.NFileStore.NProto.TGetNodeXAttrRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	40, // 39: NCloud.NFileStore.NProto.TGetNodeXAttrResponse.Error:type_name -> NCloud.NProto.TError
	41, // 40: NCloud.NFileStore.NProto.TGetNodeXAttrResponse.Headers:type_name -> NCloud.NFileStore.NProto.TResponseHeaders
	39, // 41: NCloud.NFileStore.NProto.TSetNodeXAttrRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	40, // 42: NCloud.NFileStore.NProto.TSetNodeXAttrResponse.Error:type_name -> NCloud.NProto.TError
	41, // 43: NCloud.NFileStore.NProto.TSetNodeXAttrResponse.Headers:type_name -> NCloud.NFileStore.NProto.TResponseHeaders
	39, // 44: NCloud.NFileStore.NProto.TListNodeXAttrRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	40, // 45: NCloud.NFileStore.NProto.TListNodeXAttrResponse.Error:type_name -> NCloud.NProto.TError
	41, // 46: NCloud.NFileStore.NProto.TListNodeXAttrResponse.Headers:type_name -> NCloud.NFileStore.NProto.TResponseHeaders
	39, // 47: NCloud.NFileStore.NProto.TRemoveNodeXAttrRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	40, // 48: NCloud.NFileStore.NProto.TRemoveNodeXAttrResponse.Error:type_name -> NCloud.NProto.TError
	41, // 49: NCloud.NFileStore.NProto.TRemoveNodeXAttrResponse.Headers:type_name -> NCloud.NFileStore.NProto.TResponseHeaders
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_cloud_filestore_public_api_protos_node_proto_init() }
func file_cloud_filestore_public_api_protos_node_proto_init() {
	if File_cloud_filestore_public_api_protos_node_proto != nil {
		return
	}
	file_cloud_filestore_public_api_protos_headers_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TNodeAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TResolvePathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TResolvePathResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCreateNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCreateNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUnlinkNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TUnlinkNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TRenameNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TRenameNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAccessNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAccessNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TListNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TListNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReadLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReadLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSetNodeAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSetNodeAttrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetNodeAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetNodeAttrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetNodeXAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetNodeXAttrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSetNodeXAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSetNodeXAttrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TListNodeXAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TListNodeXAttrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TRemoveNodeXAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TRemoveNodeXAttrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCreateNodeRequest_TDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCreateNodeRequest_TFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCreateNodeRequest_TLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCreateNodeRequest_TSymLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCreateNodeRequest_TSocket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_node_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSetNodeAttrRequest_TUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cloud_filestore_public_api_protos_node_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*TCreateNodeRequest_Directory)(nil),
		(*TCreateNodeRequest_File)(nil),
		(*TCreateNodeRequest_Link)(nil),
		(*TCreateNodeRequest_SymLink)(nil),
		(*TCreateNodeRequest_Socket)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_filestore_public_api_protos_node_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_filestore_public_api_protos_node_proto_goTypes,
		DependencyIndexes: file_cloud_filestore_public_api_protos_node_proto_depIdxs,
		EnumInfos:         file_cloud_filestore_public_api_protos_node_proto_enumTypes,
		MessageInfos:      file_cloud_filestore_public_api_protos_node_proto_msgTypes,
	}.Build()
	File_cloud_filestore_public_api_protos_node_proto = out.File
	file_cloud_filestore_public_api_protos_node_proto_rawDesc = nil
	file_cloud_filestore_public_api_protos_node_proto_goTypes = nil
	file_cloud_filestore_public_api_protos_node_proto_depIdxs = nil
}
