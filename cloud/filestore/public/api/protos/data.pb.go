// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/filestore/public/api/protos/data.proto

package protos

import (
	protos "github.com/ydb-platform/nbs/cloud/storage/core/protos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TCreateHandleRequest_EFlags int32

const (
	TCreateHandleRequest_E_NONE      TCreateHandleRequest_EFlags = 0
	TCreateHandleRequest_E_READ      TCreateHandleRequest_EFlags = 1
	TCreateHandleRequest_E_WRITE     TCreateHandleRequest_EFlags = 2
	TCreateHandleRequest_E_CREATE    TCreateHandleRequest_EFlags = 3
	TCreateHandleRequest_E_EXCLUSIVE TCreateHandleRequest_EFlags = 4
	TCreateHandleRequest_E_APPEND    TCreateHandleRequest_EFlags = 5
	TCreateHandleRequest_E_TRUNCATE  TCreateHandleRequest_EFlags = 6
	TCreateHandleRequest_E_DIRECTORY TCreateHandleRequest_EFlags = 7
	TCreateHandleRequest_E_NOATIME   TCreateHandleRequest_EFlags = 8
	TCreateHandleRequest_E_NOFOLLOW  TCreateHandleRequest_EFlags = 9
	TCreateHandleRequest_E_NONBLOCK  TCreateHandleRequest_EFlags = 10
	TCreateHandleRequest_E_PATH      TCreateHandleRequest_EFlags = 11
)

// Enum value maps for TCreateHandleRequest_EFlags.
var (
	TCreateHandleRequest_EFlags_name = map[int32]string{
		0:  "E_NONE",
		1:  "E_READ",
		2:  "E_WRITE",
		3:  "E_CREATE",
		4:  "E_EXCLUSIVE",
		5:  "E_APPEND",
		6:  "E_TRUNCATE",
		7:  "E_DIRECTORY",
		8:  "E_NOATIME",
		9:  "E_NOFOLLOW",
		10: "E_NONBLOCK",
		11: "E_PATH",
	}
	TCreateHandleRequest_EFlags_value = map[string]int32{
		"E_NONE":      0,
		"E_READ":      1,
		"E_WRITE":     2,
		"E_CREATE":    3,
		"E_EXCLUSIVE": 4,
		"E_APPEND":    5,
		"E_TRUNCATE":  6,
		"E_DIRECTORY": 7,
		"E_NOATIME":   8,
		"E_NOFOLLOW":  9,
		"E_NONBLOCK":  10,
		"E_PATH":      11,
	}
)

func (x TCreateHandleRequest_EFlags) Enum() *TCreateHandleRequest_EFlags {
	p := new(TCreateHandleRequest_EFlags)
	*p = x
	return p
}

func (x TCreateHandleRequest_EFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TCreateHandleRequest_EFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_filestore_public_api_protos_data_proto_enumTypes[0].Descriptor()
}

func (TCreateHandleRequest_EFlags) Type() protoreflect.EnumType {
	return &file_cloud_filestore_public_api_protos_data_proto_enumTypes[0]
}

func (x TCreateHandleRequest_EFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TCreateHandleRequest_EFlags.Descriptor instead.
func (TCreateHandleRequest_EFlags) EnumDescriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_data_proto_rawDescGZIP(), []int{0, 0}
}

type TAllocateDataRequest_EFlags int32

const (
	TAllocateDataRequest_F_NONE           TAllocateDataRequest_EFlags = 0
	TAllocateDataRequest_F_KEEP_SIZE      TAllocateDataRequest_EFlags = 1
	TAllocateDataRequest_F_PUNCH_HOLE     TAllocateDataRequest_EFlags = 2
	TAllocateDataRequest_F_COLLAPSE_RANGE TAllocateDataRequest_EFlags = 3
	TAllocateDataRequest_F_ZERO_RANGE     TAllocateDataRequest_EFlags = 4
	TAllocateDataRequest_F_INSERT_RANGE   TAllocateDataRequest_EFlags = 5
	TAllocateDataRequest_F_UNSHARE_RANGE  TAllocateDataRequest_EFlags = 6
)

// Enum value maps for TAllocateDataRequest_EFlags.
var (
	TAllocateDataRequest_EFlags_name = map[int32]string{
		0: "F_NONE",
		1: "F_KEEP_SIZE",
		2: "F_PUNCH_HOLE",
		3: "F_COLLAPSE_RANGE",
		4: "F_ZERO_RANGE",
		5: "F_INSERT_RANGE",
		6: "F_UNSHARE_RANGE",
	}
	TAllocateDataRequest_EFlags_value = map[string]int32{
		"F_NONE":           0,
		"F_KEEP_SIZE":      1,
		"F_PUNCH_HOLE":     2,
		"F_COLLAPSE_RANGE": 3,
		"F_ZERO_RANGE":     4,
		"F_INSERT_RANGE":   5,
		"F_UNSHARE_RANGE":  6,
	}
)

func (x TAllocateDataRequest_EFlags) Enum() *TAllocateDataRequest_EFlags {
	p := new(TAllocateDataRequest_EFlags)
	*p = x
	return p
}

func (x TAllocateDataRequest_EFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TAllocateDataRequest_EFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_filestore_public_api_protos_data_proto_enumTypes[1].Descriptor()
}

func (TAllocateDataRequest_EFlags) Type() protoreflect.EnumType {
	return &file_cloud_filestore_public_api_protos_data_proto_enumTypes[1]
}

func (x TAllocateDataRequest_EFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TAllocateDataRequest_EFlags.Descriptor instead.
func (TAllocateDataRequest_EFlags) EnumDescriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_data_proto_rawDescGZIP(), []int{8, 0}
}

type TCreateHandleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Parent node.
	NodeId uint64 `protobuf:"varint,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// Node name
	Name []byte `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	// Flags.
	Flags uint32 `protobuf:"varint,5,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Create mode.
	Mode uint32 `protobuf:"varint,6,opt,name=Mode,proto3" json:"Mode,omitempty"`
	// Create owner
	Uid uint64 `protobuf:"varint,10,opt,name=Uid,proto3" json:"Uid,omitempty"`
	// Create group
	Gid uint64 `protobuf:"varint,11,opt,name=Gid,proto3" json:"Gid,omitempty"`
}

func (x *TCreateHandleRequest) Reset() {
	*x = TCreateHandleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCreateHandleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCreateHandleRequest) ProtoMessage() {}

func (x *TCreateHandleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCreateHandleRequest.ProtoReflect.Descriptor instead.
func (*TCreateHandleRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_data_proto_rawDescGZIP(), []int{0}
}

func (x *TCreateHandleRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TCreateHandleRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TCreateHandleRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TCreateHandleRequest) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *TCreateHandleRequest) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *TCreateHandleRequest) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *TCreateHandleRequest) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TCreateHandleRequest) GetGid() uint64 {
	if x != nil {
		return x.Gid
	}
	return 0
}

type TCreateHandleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// IO handle.
	Handle uint64 `protobuf:"varint,2,opt,name=Handle,proto3" json:"Handle,omitempty"`
	// Node Attr.
	NodeAttr *TNodeAttr `protobuf:"bytes,3,opt,name=NodeAttr,proto3" json:"NodeAttr,omitempty"`
	// Optional response headers.
	Headers *TResponseHeaders `protobuf:"bytes,1000,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TCreateHandleResponse) Reset() {
	*x = TCreateHandleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCreateHandleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCreateHandleResponse) ProtoMessage() {}

func (x *TCreateHandleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCreateHandleResponse.ProtoReflect.Descriptor instead.
func (*TCreateHandleResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_data_proto_rawDescGZIP(), []int{1}
}

func (x *TCreateHandleResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TCreateHandleResponse) GetHandle() uint64 {
	if x != nil {
		return x.Handle
	}
	return 0
}

func (x *TCreateHandleResponse) GetNodeAttr() *TNodeAttr {
	if x != nil {
		return x.NodeAttr
	}
	return nil
}

func (x *TCreateHandleResponse) GetHeaders() *TResponseHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TDestroyHandleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Node.
	NodeId uint64 `protobuf:"varint,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// IO handle.
	Handle uint64 `protobuf:"varint,4,opt,name=Handle,proto3" json:"Handle,omitempty"`
}

func (x *TDestroyHandleRequest) Reset() {
	*x = TDestroyHandleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDestroyHandleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDestroyHandleRequest) ProtoMessage() {}

func (x *TDestroyHandleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDestroyHandleRequest.ProtoReflect.Descriptor instead.
func (*TDestroyHandleRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_data_proto_rawDescGZIP(), []int{2}
}

func (x *TDestroyHandleRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TDestroyHandleRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TDestroyHandleRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TDestroyHandleRequest) GetHandle() uint64 {
	if x != nil {
		return x.Handle
	}
	return 0
}

type TDestroyHandleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Optional response headers.
	Headers *TResponseHeaders `protobuf:"bytes,1000,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TDestroyHandleResponse) Reset() {
	*x = TDestroyHandleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDestroyHandleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDestroyHandleResponse) ProtoMessage() {}

func (x *TDestroyHandleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDestroyHandleResponse.ProtoReflect.Descriptor instead.
func (*TDestroyHandleResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_data_proto_rawDescGZIP(), []int{3}
}

func (x *TDestroyHandleResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TDestroyHandleResponse) GetHeaders() *TResponseHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TReadDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Node.
	NodeId uint64 `protobuf:"varint,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// IO handle.
	Handle uint64 `protobuf:"varint,4,opt,name=Handle,proto3" json:"Handle,omitempty"`
	// Starting offset for read.
	Offset uint64 `protobuf:"varint,5,opt,name=Offset,proto3" json:"Offset,omitempty"`
	// Number of bytes to read.
	Length uint64 `protobuf:"varint,6,opt,name=Length,proto3" json:"Length,omitempty"`
}

func (x *TReadDataRequest) Reset() {
	*x = TReadDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReadDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReadDataRequest) ProtoMessage() {}

func (x *TReadDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReadDataRequest.ProtoReflect.Descriptor instead.
func (*TReadDataRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_data_proto_rawDescGZIP(), []int{4}
}

func (x *TReadDataRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TReadDataRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TReadDataRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TReadDataRequest) GetHandle() uint64 {
	if x != nil {
		return x.Handle
	}
	return 0
}

func (x *TReadDataRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TReadDataRequest) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

type TReadDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Buffer with bytes read.
	Buffer []byte `protobuf:"bytes,2,opt,name=Buffer,proto3" json:"Buffer,omitempty"`
	// Optional response headers.
	Headers *TResponseHeaders `protobuf:"bytes,1000,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TReadDataResponse) Reset() {
	*x = TReadDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TReadDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TReadDataResponse) ProtoMessage() {}

func (x *TReadDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TReadDataResponse.ProtoReflect.Descriptor instead.
func (*TReadDataResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_data_proto_rawDescGZIP(), []int{5}
}

func (x *TReadDataResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TReadDataResponse) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *TReadDataResponse) GetHeaders() *TResponseHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TWriteDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Node.
	NodeId uint64 `protobuf:"varint,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// IO handle.
	Handle uint64 `protobuf:"varint,4,opt,name=Handle,proto3" json:"Handle,omitempty"`
	// Starting offset for write.
	Offset uint64 `protobuf:"varint,5,opt,name=Offset,proto3" json:"Offset,omitempty"`
	// Buffer with bytes to write.
	Buffer []byte `protobuf:"bytes,6,opt,name=Buffer,proto3" json:"Buffer,omitempty"`
}

func (x *TWriteDataRequest) Reset() {
	*x = TWriteDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TWriteDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TWriteDataRequest) ProtoMessage() {}

func (x *TWriteDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TWriteDataRequest.ProtoReflect.Descriptor instead.
func (*TWriteDataRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_data_proto_rawDescGZIP(), []int{6}
}

func (x *TWriteDataRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TWriteDataRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TWriteDataRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TWriteDataRequest) GetHandle() uint64 {
	if x != nil {
		return x.Handle
	}
	return 0
}

func (x *TWriteDataRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TWriteDataRequest) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type TWriteDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Optional response headers.
	Headers *TResponseHeaders `protobuf:"bytes,1000,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TWriteDataResponse) Reset() {
	*x = TWriteDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TWriteDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TWriteDataResponse) ProtoMessage() {}

func (x *TWriteDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TWriteDataResponse.ProtoReflect.Descriptor instead.
func (*TWriteDataResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_data_proto_rawDescGZIP(), []int{7}
}

func (x *TWriteDataResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TWriteDataResponse) GetHeaders() *TResponseHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TAllocateDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Node.
	NodeId uint64 `protobuf:"varint,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// IO handle.
	Handle uint64 `protobuf:"varint,4,opt,name=Handle,proto3" json:"Handle,omitempty"`
	// Starting offset for write.
	Offset uint64 `protobuf:"varint,5,opt,name=Offset,proto3" json:"Offset,omitempty"`
	// Number of bytes to allocate.
	Length uint64 `protobuf:"varint,6,opt,name=Length,proto3" json:"Length,omitempty"`
	// Optional linux specific flags.
	Flags uint32 `protobuf:"varint,7,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *TAllocateDataRequest) Reset() {
	*x = TAllocateDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAllocateDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAllocateDataRequest) ProtoMessage() {}

func (x *TAllocateDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAllocateDataRequest.ProtoReflect.Descriptor instead.
func (*TAllocateDataRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_data_proto_rawDescGZIP(), []int{8}
}

func (x *TAllocateDataRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TAllocateDataRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TAllocateDataRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TAllocateDataRequest) GetHandle() uint64 {
	if x != nil {
		return x.Handle
	}
	return 0
}

func (x *TAllocateDataRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TAllocateDataRequest) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *TAllocateDataRequest) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type TAllocateDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Optional response headers.
	Headers *TResponseHeaders `protobuf:"bytes,1000,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TAllocateDataResponse) Reset() {
	*x = TAllocateDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAllocateDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAllocateDataResponse) ProtoMessage() {}

func (x *TAllocateDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAllocateDataResponse.ProtoReflect.Descriptor instead.
func (*TAllocateDataResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_data_proto_rawDescGZIP(), []int{9}
}

func (x *TAllocateDataResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TAllocateDataResponse) GetHeaders() *TResponseHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TTruncateDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Node.
	NodeId uint64 `protobuf:"varint,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// IO handle.
	Handle uint64 `protobuf:"varint,4,opt,name=Handle,proto3" json:"Handle,omitempty"`
	// Number of bytes to keep.
	Length uint64 `protobuf:"varint,6,opt,name=Length,proto3" json:"Length,omitempty"`
}

func (x *TTruncateDataRequest) Reset() {
	*x = TTruncateDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TTruncateDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTruncateDataRequest) ProtoMessage() {}

func (x *TTruncateDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTruncateDataRequest.ProtoReflect.Descriptor instead.
func (*TTruncateDataRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_data_proto_rawDescGZIP(), []int{10}
}

func (x *TTruncateDataRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TTruncateDataRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TTruncateDataRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TTruncateDataRequest) GetHandle() uint64 {
	if x != nil {
		return x.Handle
	}
	return 0
}

func (x *TTruncateDataRequest) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

type TTruncateDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// Optional response headers.
	Headers *TResponseHeaders `protobuf:"bytes,1000,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TTruncateDataResponse) Reset() {
	*x = TTruncateDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TTruncateDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTruncateDataResponse) ProtoMessage() {}

func (x *TTruncateDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTruncateDataResponse.ProtoReflect.Descriptor instead.
func (*TTruncateDataResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_data_proto_rawDescGZIP(), []int{11}
}

func (x *TTruncateDataResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TTruncateDataResponse) GetHeaders() *TResponseHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

var File_cloud_filestore_public_api_protos_data_proto protoreflect.FileDescriptor

var file_cloud_filestore_public_api_protos_data_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab,
	0x03, 0x0a, 0x14, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x55, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x47, 0x69, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x06, 0x45, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x0a,
	0x0a, 0x06, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x56, 0x45,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x05,
	0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x10, 0x06,
	0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10,
	0x07, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x5f, 0x4e, 0x4f, 0x41, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x08,
	0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x5f, 0x4e, 0x4f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x09,
	0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x0a,
	0x12, 0x0a, 0x0a, 0x06, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x0b, 0x22, 0xe4, 0x01, 0x0a,
	0x15, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x45, 0x0a, 0x07,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x15, 0x54, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22,
	0x8c, 0x01, 0x0a, 0x16, 0x54, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0xd4,
	0x01, 0x0a, 0x10, 0x54, 0x52, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x9f, 0x01, 0x0a, 0x11, 0x54, 0x52, 0x65, 0x61, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x45, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x11, 0x54, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22,
	0x88, 0x01, 0x0a, 0x12, 0x54, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0xe8,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0xf9, 0x02, 0x0a, 0x14, 0x54,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x06,
	0x45, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x53, 0x49, 0x5a,
	0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x5f, 0x50, 0x55, 0x4e, 0x43, 0x48, 0x5f, 0x48,
	0x4f, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x41,
	0x50, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x46,
	0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a,
	0x0e, 0x46, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x05, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x5f, 0x55, 0x4e, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x06, 0x22, 0x8b, 0x01, 0x0a, 0x15, 0x54, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x45, 0x0a,
	0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x14, 0x54, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x8b, 0x01, 0x0a, 0x15, 0x54, 0x54, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x45,
	0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x6e, 0x62, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_filestore_public_api_protos_data_proto_rawDescOnce sync.Once
	file_cloud_filestore_public_api_protos_data_proto_rawDescData = file_cloud_filestore_public_api_protos_data_proto_rawDesc
)

func file_cloud_filestore_public_api_protos_data_proto_rawDescGZIP() []byte {
	file_cloud_filestore_public_api_protos_data_proto_rawDescOnce.Do(func() {
		file_cloud_filestore_public_api_protos_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_filestore_public_api_protos_data_proto_rawDescData)
	})
	return file_cloud_filestore_public_api_protos_data_proto_rawDescData
}

var file_cloud_filestore_public_api_protos_data_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cloud_filestore_public_api_protos_data_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_cloud_filestore_public_api_protos_data_proto_goTypes = []interface{}{
	(TCreateHandleRequest_EFlags)(0), // 0: NCloud.NFileStore.NProto.TCreateHandleRequest.EFlags
	(TAllocateDataRequest_EFlags)(0), // 1: NCloud.NFileStore.NProto.TAllocateDataRequest.EFlags
	(*TCreateHandleRequest)(nil),     // 2: NCloud.NFileStore.NProto.TCreateHandleRequest
	(*TCreateHandleResponse)(nil),    // 3: NCloud.NFileStore.NProto.TCreateHandleResponse
	(*TDestroyHandleRequest)(nil),    // 4: NCloud.NFileStore.NProto.TDestroyHandleRequest
	(*TDestroyHandleResponse)(nil),   // 5: NCloud.NFileStore.NProto.TDestroyHandleResponse
	(*TReadDataRequest)(nil),         // 6: NCloud.NFileStore.NProto.TReadDataRequest
	(*TReadDataResponse)(nil),        // 7: NCloud.NFileStore.NProto.TReadDataResponse
	(*TWriteDataRequest)(nil),        // 8: NCloud.NFileStore.NProto.TWriteDataRequest
	(*TWriteDataResponse)(nil),       // 9: NCloud.NFileStore.NProto.TWriteDataResponse
	(*TAllocateDataRequest)(nil),     // 10: NCloud.NFileStore.NProto.TAllocateDataRequest
	(*TAllocateDataResponse)(nil),    // 11: NCloud.NFileStore.NProto.TAllocateDataResponse
	(*TTruncateDataRequest)(nil),     // 12: NCloud.NFileStore.NProto.TTruncateDataRequest
	(*TTruncateDataResponse)(nil),    // 13: NCloud.NFileStore.NProto.TTruncateDataResponse
	(*THeaders)(nil),                 // 14: NCloud.NFileStore.NProto.THeaders
	(*protos.TError)(nil),            // 15: NCloud.NProto.TError
	(*TNodeAttr)(nil),                // 16: NCloud.NFileStore.NProto.TNodeAttr
	(*TResponseHeaders)(nil),         // 17: NCloud.NFileStore.NProto.TResponseHeaders
}
var file_cloud_filestore_public_api_protos_data_proto_depIdxs = []int32{
	14, // 0: NCloud.NFileStore.NProto.TCreateHandleRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	15, // 1: NCloud.NFileStore.NProto.TCreateHandleResponse.Error:type_name -> NCloud.NProto.TError
	16, // 2: NCloud.NFileStore.NProto.TCreateHandleResponse.NodeAttr:type_name -> NCloud.NFileStore.NProto.TNodeAttr
	17, // 3: NCloud.NFileStore.NProto.TCreateHandleResponse.Headers:type_name -> NCloud.NFileStore.NProto.TResponseHeaders
	14, // 4: NCloud.NFileStore.NProto.TDestroyHandleRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	15, // 5: NCloud.NFileStore.NProto.TDestroyHandleResponse.Error:type_name -> NCloud.NProto.TError
	17, // 6: NCloud.NFileStore.NProto.TDestroyHandleResponse.Headers:type_name -> NCloud.NFileStore.NProto.TResponseHeaders
	14, // 7: NCloud.NFileStore.NProto.TReadDataRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	15, // 8: NCloud.NFileStore.NProto.TReadDataResponse.Error:type_name -> NCloud.NProto.TError
	17, // 9: NCloud.NFileStore.NProto.TReadDataResponse.Headers:type_name -> NCloud.NFileStore.NProto.TResponseHeaders
	14, // 10: NCloud.NFileStore.NProto.TWriteDataRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	15, // 11: NCloud.NFileStore.NProto.TWriteDataResponse.Error:type_name -> NCloud.NProto.TError
	17, // 12: NCloud.NFileStore.NProto.TWriteDataResponse.Headers:type_name -> NCloud.NFileStore.NProto.TResponseHeaders
	14, // 13: NCloud.NFileStore.NProto.TAllocateDataRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	15, // 14: NCloud.NFileStore.NProto.TAllocateDataResponse.Error:type_name -> NCloud.NProto.TError
	17, // 15: NCloud.NFileStore.NProto.TAllocateDataResponse.Headers:type_name -> NCloud.NFileStore.NProto.TResponseHeaders
	14, // 16: NCloud.NFileStore.NProto.TTruncateDataRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	15, // 17: NCloud.NFileStore.NProto.TTruncateDataResponse.Error:type_name -> NCloud.NProto.TError
	17, // 18: NCloud.NFileStore.NProto.TTruncateDataResponse.Headers:type_name -> NCloud.NFileStore.NProto.TResponseHeaders
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_cloud_filestore_public_api_protos_data_proto_init() }
func file_cloud_filestore_public_api_protos_data_proto_init() {
	if File_cloud_filestore_public_api_protos_data_proto != nil {
		return
	}
	file_cloud_filestore_public_api_protos_headers_proto_init()
	file_cloud_filestore_public_api_protos_node_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloud_filestore_public_api_protos_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCreateHandleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCreateHandleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDestroyHandleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDestroyHandleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReadDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TReadDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TWriteDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TWriteDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAllocateDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAllocateDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TTruncateDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TTruncateDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_filestore_public_api_protos_data_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_filestore_public_api_protos_data_proto_goTypes,
		DependencyIndexes: file_cloud_filestore_public_api_protos_data_proto_depIdxs,
		EnumInfos:         file_cloud_filestore_public_api_protos_data_proto_enumTypes,
		MessageInfos:      file_cloud_filestore_public_api_protos_data_proto_msgTypes,
	}.Build()
	File_cloud_filestore_public_api_protos_data_proto = out.File
	file_cloud_filestore_public_api_protos_data_proto_rawDesc = nil
	file_cloud_filestore_public_api_protos_data_proto_goTypes = nil
	file_cloud_filestore_public_api_protos_data_proto_depIdxs = nil
}
