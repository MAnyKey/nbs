// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/filestore/public/api/protos/const.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EFilestoreStatus int32

const (
	// according to rfc1813#section-2.6
	EFilestoreStatus_E_FS_IO          EFilestoreStatus = 0
	EFilestoreStatus_E_FS_PERM        EFilestoreStatus = 1
	EFilestoreStatus_E_FS_NOENT       EFilestoreStatus = 2
	EFilestoreStatus_E_FS_NXIO        EFilestoreStatus = 3
	EFilestoreStatus_E_FS_ACCESS      EFilestoreStatus = 4
	EFilestoreStatus_E_FS_EXIST       EFilestoreStatus = 5
	EFilestoreStatus_E_FS_XDEV        EFilestoreStatus = 6
	EFilestoreStatus_E_FS_NODEV       EFilestoreStatus = 7
	EFilestoreStatus_E_FS_NOTDIR      EFilestoreStatus = 8
	EFilestoreStatus_E_FS_ISDIR       EFilestoreStatus = 9
	EFilestoreStatus_E_FS_INVAL       EFilestoreStatus = 10
	EFilestoreStatus_E_FS_FBIG        EFilestoreStatus = 11
	EFilestoreStatus_E_FS_NOSPC       EFilestoreStatus = 12
	EFilestoreStatus_E_FS_ROFS        EFilestoreStatus = 13
	EFilestoreStatus_E_FS_MLINK       EFilestoreStatus = 14
	EFilestoreStatus_E_FS_NAMETOOLONG EFilestoreStatus = 15
	EFilestoreStatus_E_FS_NOTEMPTY    EFilestoreStatus = 16
	EFilestoreStatus_E_FS_DQUOT       EFilestoreStatus = 17
	EFilestoreStatus_E_FS_STALE       EFilestoreStatus = 18
	EFilestoreStatus_E_FS_REMOTE      EFilestoreStatus = 19
	EFilestoreStatus_E_FS_BADHANDLE   EFilestoreStatus = 20
	EFilestoreStatus_E_FS_NOTSUPP     EFilestoreStatus = 21
	// rfc8276#section-8.3
	EFilestoreStatus_E_FS_NOXATTR   EFilestoreStatus = 22
	EFilestoreStatus_E_FS_XATTR2BIG EFilestoreStatus = 23
	// system errors
	EFilestoreStatus_E_FS_WOULDBLOCK EFilestoreStatus = 30
	EFilestoreStatus_E_FS_NOLCK      EFilestoreStatus = 31
	EFilestoreStatus_E_FS_RANGE      EFilestoreStatus = 32
	// extra errors
	EFilestoreStatus_E_FS_INVALID_SESSION EFilestoreStatus = 100
	EFilestoreStatus_E_FS_OUT_OF_SPACE    EFilestoreStatus = 101
	EFilestoreStatus_E_FS_THROTTLED       EFilestoreStatus = 102
)

// Enum value maps for EFilestoreStatus.
var (
	EFilestoreStatus_name = map[int32]string{
		0:   "E_FS_IO",
		1:   "E_FS_PERM",
		2:   "E_FS_NOENT",
		3:   "E_FS_NXIO",
		4:   "E_FS_ACCESS",
		5:   "E_FS_EXIST",
		6:   "E_FS_XDEV",
		7:   "E_FS_NODEV",
		8:   "E_FS_NOTDIR",
		9:   "E_FS_ISDIR",
		10:  "E_FS_INVAL",
		11:  "E_FS_FBIG",
		12:  "E_FS_NOSPC",
		13:  "E_FS_ROFS",
		14:  "E_FS_MLINK",
		15:  "E_FS_NAMETOOLONG",
		16:  "E_FS_NOTEMPTY",
		17:  "E_FS_DQUOT",
		18:  "E_FS_STALE",
		19:  "E_FS_REMOTE",
		20:  "E_FS_BADHANDLE",
		21:  "E_FS_NOTSUPP",
		22:  "E_FS_NOXATTR",
		23:  "E_FS_XATTR2BIG",
		30:  "E_FS_WOULDBLOCK",
		31:  "E_FS_NOLCK",
		32:  "E_FS_RANGE",
		100: "E_FS_INVALID_SESSION",
		101: "E_FS_OUT_OF_SPACE",
		102: "E_FS_THROTTLED",
	}
	EFilestoreStatus_value = map[string]int32{
		"E_FS_IO":              0,
		"E_FS_PERM":            1,
		"E_FS_NOENT":           2,
		"E_FS_NXIO":            3,
		"E_FS_ACCESS":          4,
		"E_FS_EXIST":           5,
		"E_FS_XDEV":            6,
		"E_FS_NODEV":           7,
		"E_FS_NOTDIR":          8,
		"E_FS_ISDIR":           9,
		"E_FS_INVAL":           10,
		"E_FS_FBIG":            11,
		"E_FS_NOSPC":           12,
		"E_FS_ROFS":            13,
		"E_FS_MLINK":           14,
		"E_FS_NAMETOOLONG":     15,
		"E_FS_NOTEMPTY":        16,
		"E_FS_DQUOT":           17,
		"E_FS_STALE":           18,
		"E_FS_REMOTE":          19,
		"E_FS_BADHANDLE":       20,
		"E_FS_NOTSUPP":         21,
		"E_FS_NOXATTR":         22,
		"E_FS_XATTR2BIG":       23,
		"E_FS_WOULDBLOCK":      30,
		"E_FS_NOLCK":           31,
		"E_FS_RANGE":           32,
		"E_FS_INVALID_SESSION": 100,
		"E_FS_OUT_OF_SPACE":    101,
		"E_FS_THROTTLED":       102,
	}
)

func (x EFilestoreStatus) Enum() *EFilestoreStatus {
	p := new(EFilestoreStatus)
	*p = x
	return p
}

func (x EFilestoreStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFilestoreStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_filestore_public_api_protos_const_proto_enumTypes[0].Descriptor()
}

func (EFilestoreStatus) Type() protoreflect.EnumType {
	return &file_cloud_filestore_public_api_protos_const_proto_enumTypes[0]
}

func (x EFilestoreStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EFilestoreStatus.Descriptor instead.
func (EFilestoreStatus) EnumDescriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_const_proto_rawDescGZIP(), []int{0}
}

type EFilestoreLimits int32

const (
	// Due to proto3 should start from 0.
	EFilestoreLimits_E_FS_LIMITS_START EFilestoreLimits = 0
	// Maximum number of links to a signle file.
	EFilestoreLimits_E_FS_LIMITS_LINK EFilestoreLimits = 65536
	// Maximum length of a name not including.
	EFilestoreLimits_E_FS_LIMITS_NAME EFilestoreLimits = 255
	// Maximum length of extended attribute name.
	EFilestoreLimits_E_FS_LIMITS_XATTR_NAME EFilestoreLimits = 255
	// Maximum length of a path not including.
	EFilestoreLimits_E_FS_LIMITS_PATH EFilestoreLimits = 4095
	// Maximum length of contents of a symlink.
	EFilestoreLimits_E_FS_LIMITS_SYMLINK EFilestoreLimits = 4095
	// Maximum length of extended attribute value.
	EFilestoreLimits_E_FS_LIMITS_XATTR_VALUE EFilestoreLimits = 65536
	// Until NBS-2979 it's limited to 300GB
	EFilestoreLimits_E_FS_LIMITS_FILEBLOCKS EFilestoreLimits = 78643200
	// Maximum number of inodes.
	EFilestoreLimits_E_FS_LIMITS_INODES EFilestoreLimits = -2 // 0xFFFFFFFE
)

// Enum value maps for EFilestoreLimits.
var (
	EFilestoreLimits_name = map[int32]string{
		0:     "E_FS_LIMITS_START",
		65536: "E_FS_LIMITS_LINK",
		255:   "E_FS_LIMITS_NAME",
		// Duplicate value: 255: "E_FS_LIMITS_XATTR_NAME",
		4095: "E_FS_LIMITS_PATH",
		// Duplicate value: 4095: "E_FS_LIMITS_SYMLINK",
		// Duplicate value: 65536: "E_FS_LIMITS_XATTR_VALUE",
		78643200: "E_FS_LIMITS_FILEBLOCKS",
		-2:       "E_FS_LIMITS_INODES",
	}
	EFilestoreLimits_value = map[string]int32{
		"E_FS_LIMITS_START":       0,
		"E_FS_LIMITS_LINK":        65536,
		"E_FS_LIMITS_NAME":        255,
		"E_FS_LIMITS_XATTR_NAME":  255,
		"E_FS_LIMITS_PATH":        4095,
		"E_FS_LIMITS_SYMLINK":     4095,
		"E_FS_LIMITS_XATTR_VALUE": 65536,
		"E_FS_LIMITS_FILEBLOCKS":  78643200,
		"E_FS_LIMITS_INODES":      -2,
	}
)

func (x EFilestoreLimits) Enum() *EFilestoreLimits {
	p := new(EFilestoreLimits)
	*p = x
	return p
}

func (x EFilestoreLimits) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFilestoreLimits) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_filestore_public_api_protos_const_proto_enumTypes[1].Descriptor()
}

func (EFilestoreLimits) Type() protoreflect.EnumType {
	return &file_cloud_filestore_public_api_protos_const_proto_enumTypes[1]
}

func (x EFilestoreLimits) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EFilestoreLimits.Descriptor instead.
func (EFilestoreLimits) EnumDescriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_const_proto_rawDescGZIP(), []int{1}
}

var File_cloud_filestore_public_api_protos_const_proto protoreflect.FileDescriptor

var file_cloud_filestore_public_api_protos_const_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x18, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0x9c, 0x04, 0x0a, 0x10, 0x45, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x49, 0x4f, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x5f, 0x46, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x5f,
	0x46, 0x53, 0x5f, 0x4e, 0x4f, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x5f,
	0x46, 0x53, 0x5f, 0x4e, 0x58, 0x49, 0x4f, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x5f, 0x46,
	0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x5f,
	0x46, 0x53, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x5f,
	0x46, 0x53, 0x5f, 0x58, 0x44, 0x45, 0x56, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x5f, 0x46,
	0x53, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x56, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x5f, 0x46,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x44, 0x49, 0x52, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x5f,
	0x46, 0x53, 0x5f, 0x49, 0x53, 0x44, 0x49, 0x52, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x5f,
	0x46, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x5f,
	0x46, 0x53, 0x5f, 0x46, 0x42, 0x49, 0x47, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x5f, 0x46,
	0x53, 0x5f, 0x4e, 0x4f, 0x53, 0x50, 0x43, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x5f, 0x46,
	0x53, 0x5f, 0x52, 0x4f, 0x46, 0x53, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x5f, 0x46, 0x53,
	0x5f, 0x4d, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x5f, 0x46, 0x53,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x54, 0x4f, 0x4f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x0f, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10,
	0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x44, 0x51, 0x55, 0x4f, 0x54, 0x10,
	0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x10,
	0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x10, 0x13, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x42, 0x41, 0x44, 0x48, 0x41,
	0x4e, 0x44, 0x4c, 0x45, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x53, 0x55, 0x50, 0x50, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x5f, 0x46, 0x53,
	0x5f, 0x4e, 0x4f, 0x58, 0x41, 0x54, 0x54, 0x52, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x5f,
	0x46, 0x53, 0x5f, 0x58, 0x41, 0x54, 0x54, 0x52, 0x32, 0x42, 0x49, 0x47, 0x10, 0x17, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x57, 0x4f, 0x55, 0x4c, 0x44, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x1e, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x4e, 0x4f, 0x4c, 0x43,
	0x4b, 0x10, 0x1f, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x52, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x20, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x64, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x10, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x54, 0x48, 0x52,
	0x4f, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x10, 0x66, 0x2a, 0x89, 0x02, 0x0a, 0x10, 0x45, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x10, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x53, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x80, 0x80, 0x04, 0x12, 0x15, 0x0a, 0x10,
	0x45, 0x5f, 0x46, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0xff, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x53, 0x5f, 0x58, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xff, 0x01,
	0x12, 0x15, 0x0a, 0x10, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x5f,
	0x50, 0x41, 0x54, 0x48, 0x10, 0xff, 0x1f, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x5f, 0x46, 0x53, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x5f, 0x53, 0x59, 0x4d, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0xff,
	0x1f, 0x12, 0x1d, 0x0a, 0x17, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53,
	0x5f, 0x58, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x80, 0x80, 0x04,
	0x12, 0x1d, 0x0a, 0x16, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x10, 0x80, 0x80, 0xc0, 0x25, 0x12,
	0x1f, 0x0a, 0x12, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x5f, 0x49,
	0x4e, 0x4f, 0x44, 0x45, 0x53, 0x10, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x1a, 0x02, 0x10, 0x01, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x6e, 0x62, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_filestore_public_api_protos_const_proto_rawDescOnce sync.Once
	file_cloud_filestore_public_api_protos_const_proto_rawDescData = file_cloud_filestore_public_api_protos_const_proto_rawDesc
)

func file_cloud_filestore_public_api_protos_const_proto_rawDescGZIP() []byte {
	file_cloud_filestore_public_api_protos_const_proto_rawDescOnce.Do(func() {
		file_cloud_filestore_public_api_protos_const_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_filestore_public_api_protos_const_proto_rawDescData)
	})
	return file_cloud_filestore_public_api_protos_const_proto_rawDescData
}

var file_cloud_filestore_public_api_protos_const_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cloud_filestore_public_api_protos_const_proto_goTypes = []interface{}{
	(EFilestoreStatus)(0), // 0: NCloud.NFileStore.NProto.EFilestoreStatus
	(EFilestoreLimits)(0), // 1: NCloud.NFileStore.NProto.EFilestoreLimits
}
var file_cloud_filestore_public_api_protos_const_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cloud_filestore_public_api_protos_const_proto_init() }
func file_cloud_filestore_public_api_protos_const_proto_init() {
	if File_cloud_filestore_public_api_protos_const_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_filestore_public_api_protos_const_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_filestore_public_api_protos_const_proto_goTypes,
		DependencyIndexes: file_cloud_filestore_public_api_protos_const_proto_depIdxs,
		EnumInfos:         file_cloud_filestore_public_api_protos_const_proto_enumTypes,
	}.Build()
	File_cloud_filestore_public_api_protos_const_proto = out.File
	file_cloud_filestore_public_api_protos_const_proto_rawDesc = nil
	file_cloud_filestore_public_api_protos_const_proto_goTypes = nil
	file_cloud_filestore_public_api_protos_const_proto_depIdxs = nil
}
