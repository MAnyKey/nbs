// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/filestore/public/api/protos/fs.proto

package protos

import (
	protos "github.com/ydb-platform/nbs/cloud/storage/core/protos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TFileStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileSystemId     string `protobuf:"bytes,1,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	ProjectId        string `protobuf:"bytes,2,opt,name=ProjectId,proto3" json:"ProjectId,omitempty"`
	FolderId         string `protobuf:"bytes,3,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	CloudId          string `protobuf:"bytes,4,opt,name=CloudId,proto3" json:"CloudId,omitempty"`
	BlockSize        uint32 `protobuf:"varint,5,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	BlocksCount      uint64 `protobuf:"varint,6,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
	ConfigVersion    uint32 `protobuf:"varint,7,opt,name=ConfigVersion,proto3" json:"ConfigVersion,omitempty"`
	NodesCount       uint64 `protobuf:"varint,8,opt,name=NodesCount,proto3" json:"NodesCount,omitempty"`
	StorageMediaKind uint64 `protobuf:"varint,9,opt,name=StorageMediaKind,proto3" json:"StorageMediaKind,omitempty"`
	// Performance profile, used for throttling.
	PerformanceProfile *TFileStorePerformanceProfile `protobuf:"bytes,10,opt,name=PerformanceProfile,proto3" json:"PerformanceProfile,omitempty"`
}

func (x *TFileStore) Reset() {
	*x = TFileStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFileStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFileStore) ProtoMessage() {}

func (x *TFileStore) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFileStore.ProtoReflect.Descriptor instead.
func (*TFileStore) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{0}
}

func (x *TFileStore) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TFileStore) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *TFileStore) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *TFileStore) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *TFileStore) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TFileStore) GetBlocksCount() uint64 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *TFileStore) GetConfigVersion() uint32 {
	if x != nil {
		return x.ConfigVersion
	}
	return 0
}

func (x *TFileStore) GetNodesCount() uint64 {
	if x != nil {
		return x.NodesCount
	}
	return 0
}

func (x *TFileStore) GetStorageMediaKind() uint64 {
	if x != nil {
		return x.StorageMediaKind
	}
	return 0
}

func (x *TFileStore) GetPerformanceProfile() *TFileStorePerformanceProfile {
	if x != nil {
		return x.PerformanceProfile
	}
	return nil
}

type TFileStorePerformanceProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Iops.
	MaxReadIops  uint32 `protobuf:"varint,1,opt,name=MaxReadIops,proto3" json:"MaxReadIops,omitempty"`
	MaxWriteIops uint32 `protobuf:"varint,2,opt,name=MaxWriteIops,proto3" json:"MaxWriteIops,omitempty"`
	// Bytes per sec.
	MaxReadBandwidth  uint32 `protobuf:"varint,3,opt,name=MaxReadBandwidth,proto3" json:"MaxReadBandwidth,omitempty"`
	MaxWriteBandwidth uint32 `protobuf:"varint,4,opt,name=MaxWriteBandwidth,proto3" json:"MaxWriteBandwidth,omitempty"`
	// Max sum of all postponed requests weights (in bytes).
	MaxPostponedWeight uint32 `protobuf:"varint,5,opt,name=MaxPostponedWeight,proto3" json:"MaxPostponedWeight,omitempty"`
	// Max sum of delays for all postponed requests in buffer (in ms).
	MaxPostponedTime uint32 `protobuf:"varint,6,opt,name=MaxPostponedTime,proto3" json:"MaxPostponedTime,omitempty"`
	// Max count of postponed requests in buffer (not used now).
	MaxPostponedCount uint32 `protobuf:"varint,7,opt,name=MaxPostponedCount,proto3" json:"MaxPostponedCount,omitempty"`
	// Max time for working on boosted speed (in ms).
	BoostTime uint32 `protobuf:"varint,8,opt,name=BoostTime,proto3" json:"BoostTime,omitempty"`
	// Time for working on standard speed after which boost time completely
	// refills (in ms).
	BoostRefillTime uint32 `protobuf:"varint,9,opt,name=BoostRefillTime,proto3" json:"BoostRefillTime,omitempty"`
	// Max percent of boost budget which can be spent for single request.
	BoostPercentage uint32 `protobuf:"varint,10,opt,name=BoostPercentage,proto3" json:"BoostPercentage,omitempty"`
	// Max percent of burst rate which can be spent for single request.
	BurstPercentage uint32 `protobuf:"varint,11,opt,name=BurstPercentage,proto3" json:"BurstPercentage,omitempty"`
	// Max multiplier for write requests (used for backpressure).
	MaxWriteCostMultiplier float64 `protobuf:"fixed64,12,opt,name=MaxWriteCostMultiplier,proto3" json:"MaxWriteCostMultiplier,omitempty"`
	// Default request weight (used for requests without payload).
	DefaultPostponedRequestWeight uint32 `protobuf:"varint,13,opt,name=DefaultPostponedRequestWeight,proto3" json:"DefaultPostponedRequestWeight,omitempty"`
	// Throttling enabled.
	ThrottlingEnabled bool `protobuf:"varint,14,opt,name=ThrottlingEnabled,proto3" json:"ThrottlingEnabled,omitempty"`
}

func (x *TFileStorePerformanceProfile) Reset() {
	*x = TFileStorePerformanceProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFileStorePerformanceProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFileStorePerformanceProfile) ProtoMessage() {}

func (x *TFileStorePerformanceProfile) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFileStorePerformanceProfile.ProtoReflect.Descriptor instead.
func (*TFileStorePerformanceProfile) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{1}
}

func (x *TFileStorePerformanceProfile) GetMaxReadIops() uint32 {
	if x != nil {
		return x.MaxReadIops
	}
	return 0
}

func (x *TFileStorePerformanceProfile) GetMaxWriteIops() uint32 {
	if x != nil {
		return x.MaxWriteIops
	}
	return 0
}

func (x *TFileStorePerformanceProfile) GetMaxReadBandwidth() uint32 {
	if x != nil {
		return x.MaxReadBandwidth
	}
	return 0
}

func (x *TFileStorePerformanceProfile) GetMaxWriteBandwidth() uint32 {
	if x != nil {
		return x.MaxWriteBandwidth
	}
	return 0
}

func (x *TFileStorePerformanceProfile) GetMaxPostponedWeight() uint32 {
	if x != nil {
		return x.MaxPostponedWeight
	}
	return 0
}

func (x *TFileStorePerformanceProfile) GetMaxPostponedTime() uint32 {
	if x != nil {
		return x.MaxPostponedTime
	}
	return 0
}

func (x *TFileStorePerformanceProfile) GetMaxPostponedCount() uint32 {
	if x != nil {
		return x.MaxPostponedCount
	}
	return 0
}

func (x *TFileStorePerformanceProfile) GetBoostTime() uint32 {
	if x != nil {
		return x.BoostTime
	}
	return 0
}

func (x *TFileStorePerformanceProfile) GetBoostRefillTime() uint32 {
	if x != nil {
		return x.BoostRefillTime
	}
	return 0
}

func (x *TFileStorePerformanceProfile) GetBoostPercentage() uint32 {
	if x != nil {
		return x.BoostPercentage
	}
	return 0
}

func (x *TFileStorePerformanceProfile) GetBurstPercentage() uint32 {
	if x != nil {
		return x.BurstPercentage
	}
	return 0
}

func (x *TFileStorePerformanceProfile) GetMaxWriteCostMultiplier() float64 {
	if x != nil {
		return x.MaxWriteCostMultiplier
	}
	return 0
}

func (x *TFileStorePerformanceProfile) GetDefaultPostponedRequestWeight() uint32 {
	if x != nil {
		return x.DefaultPostponedRequestWeight
	}
	return 0
}

func (x *TFileStorePerformanceProfile) GetThrottlingEnabled() bool {
	if x != nil {
		return x.ThrottlingEnabled
	}
	return false
}

type TFileStoreModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum addressable block size (smallest unit of I/O operations).
	BlockSize uint32 `protobuf:"varint,1,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	// Maximum number of blocks stored in filestore.
	BlocksCount uint64 `protobuf:"varint,2,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
	// Number of user channels to store blobs.
	ChannelsCount uint32 `protobuf:"varint,3,opt,name=ChannelsCount,proto3" json:"ChannelsCount,omitempty"`
	// Storage media to use.
	StorageMediaKind protos.EStorageMediaKind `protobuf:"varint,4,opt,name=StorageMediaKind,proto3,enum=NCloud.NProto.EStorageMediaKind" json:"StorageMediaKind,omitempty"`
	// Performance profile, used for throttling.
	PerformanceProfile *TFileStorePerformanceProfile `protobuf:"bytes,5,opt,name=PerformanceProfile,proto3" json:"PerformanceProfile,omitempty"`
}

func (x *TFileStoreModel) Reset() {
	*x = TFileStoreModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFileStoreModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFileStoreModel) ProtoMessage() {}

func (x *TFileStoreModel) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFileStoreModel.ProtoReflect.Descriptor instead.
func (*TFileStoreModel) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{2}
}

func (x *TFileStoreModel) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TFileStoreModel) GetBlocksCount() uint64 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *TFileStoreModel) GetChannelsCount() uint32 {
	if x != nil {
		return x.ChannelsCount
	}
	return 0
}

func (x *TFileStoreModel) GetStorageMediaKind() protos.EStorageMediaKind {
	if x != nil {
		return x.StorageMediaKind
	}
	return protos.EStorageMediaKind(0)
}

func (x *TFileStoreModel) GetPerformanceProfile() *TFileStorePerformanceProfile {
	if x != nil {
		return x.PerformanceProfile
	}
	return nil
}

type TFileStoreStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsedNodesCount  uint64 `protobuf:"varint,1,opt,name=UsedNodesCount,proto3" json:"UsedNodesCount,omitempty"`
	UsedBlocksCount uint64 `protobuf:"varint,2,opt,name=UsedBlocksCount,proto3" json:"UsedBlocksCount,omitempty"`
}

func (x *TFileStoreStats) Reset() {
	*x = TFileStoreStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFileStoreStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFileStoreStats) ProtoMessage() {}

func (x *TFileStoreStats) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFileStoreStats.ProtoReflect.Descriptor instead.
func (*TFileStoreStats) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{3}
}

func (x *TFileStoreStats) GetUsedNodesCount() uint64 {
	if x != nil {
		return x.UsedNodesCount
	}
	return 0
}

func (x *TFileStoreStats) GetUsedBlocksCount() uint64 {
	if x != nil {
		return x.UsedBlocksCount
	}
	return 0
}

type TCreateFileStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// File system identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	ProjectId    string `protobuf:"bytes,3,opt,name=ProjectId,proto3" json:"ProjectId,omitempty"`
	FolderId     string `protobuf:"bytes,4,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	CloudId      string `protobuf:"bytes,5,opt,name=CloudId,proto3" json:"CloudId,omitempty"`
	BlockSize    uint32 `protobuf:"varint,6,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	BlocksCount  uint64 `protobuf:"varint,7,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
	// Storage media to use.
	StorageMediaKind protos.EStorageMediaKind `protobuf:"varint,8,opt,name=StorageMediaKind,proto3,enum=NCloud.NProto.EStorageMediaKind" json:"StorageMediaKind,omitempty"`
	// File system performance profile.
	PerformanceProfile *TFileStorePerformanceProfile `protobuf:"bytes,9,opt,name=PerformanceProfile,proto3" json:"PerformanceProfile,omitempty"`
}

func (x *TCreateFileStoreRequest) Reset() {
	*x = TCreateFileStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCreateFileStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCreateFileStoreRequest) ProtoMessage() {}

func (x *TCreateFileStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCreateFileStoreRequest.ProtoReflect.Descriptor instead.
func (*TCreateFileStoreRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{4}
}

func (x *TCreateFileStoreRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TCreateFileStoreRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TCreateFileStoreRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *TCreateFileStoreRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *TCreateFileStoreRequest) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *TCreateFileStoreRequest) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TCreateFileStoreRequest) GetBlocksCount() uint64 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *TCreateFileStoreRequest) GetStorageMediaKind() protos.EStorageMediaKind {
	if x != nil {
		return x.StorageMediaKind
	}
	return protos.EStorageMediaKind(0)
}

func (x *TCreateFileStoreRequest) GetPerformanceProfile() *TFileStorePerformanceProfile {
	if x != nil {
		return x.PerformanceProfile
	}
	return nil
}

type TCreateFileStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// FileStore information.
	FileStore *TFileStore `protobuf:"bytes,2,opt,name=FileStore,proto3" json:"FileStore,omitempty"`
}

func (x *TCreateFileStoreResponse) Reset() {
	*x = TCreateFileStoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCreateFileStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCreateFileStoreResponse) ProtoMessage() {}

func (x *TCreateFileStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCreateFileStoreResponse.ProtoReflect.Descriptor instead.
func (*TCreateFileStoreResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{5}
}

func (x *TCreateFileStoreResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TCreateFileStoreResponse) GetFileStore() *TFileStore {
	if x != nil {
		return x.FileStore
	}
	return nil
}

type TDestroyFileStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
}

func (x *TDestroyFileStoreRequest) Reset() {
	*x = TDestroyFileStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDestroyFileStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDestroyFileStoreRequest) ProtoMessage() {}

func (x *TDestroyFileStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDestroyFileStoreRequest.ProtoReflect.Descriptor instead.
func (*TDestroyFileStoreRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{6}
}

func (x *TDestroyFileStoreRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TDestroyFileStoreRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

type TDestroyFileStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TDestroyFileStoreResponse) Reset() {
	*x = TDestroyFileStoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDestroyFileStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDestroyFileStoreResponse) ProtoMessage() {}

func (x *TDestroyFileStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDestroyFileStoreResponse.ProtoReflect.Descriptor instead.
func (*TDestroyFileStoreResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{7}
}

func (x *TDestroyFileStoreResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TAlterFileStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Filestore to change.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Owner information.
	ProjectId string `protobuf:"bytes,3,opt,name=ProjectId,proto3" json:"ProjectId,omitempty"`
	// User folder Id, used for billing.
	FolderId string `protobuf:"bytes,4,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	// Cloud Id, used for billing.
	CloudId string `protobuf:"bytes,5,opt,name=CloudId,proto3" json:"CloudId,omitempty"`
	// Filesotre configuration version alter applies to.
	ConfigVersion uint32 `protobuf:"varint,6,opt,name=ConfigVersion,proto3" json:"ConfigVersion,omitempty"`
}

func (x *TAlterFileStoreRequest) Reset() {
	*x = TAlterFileStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAlterFileStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAlterFileStoreRequest) ProtoMessage() {}

func (x *TAlterFileStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAlterFileStoreRequest.ProtoReflect.Descriptor instead.
func (*TAlterFileStoreRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{8}
}

func (x *TAlterFileStoreRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TAlterFileStoreRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TAlterFileStoreRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *TAlterFileStoreRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *TAlterFileStoreRequest) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *TAlterFileStoreRequest) GetConfigVersion() uint32 {
	if x != nil {
		return x.ConfigVersion
	}
	return 0
}

type TAlterFileStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TAlterFileStoreResponse) Reset() {
	*x = TAlterFileStoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAlterFileStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAlterFileStoreResponse) ProtoMessage() {}

func (x *TAlterFileStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAlterFileStoreResponse.ProtoReflect.Descriptor instead.
func (*TAlterFileStoreResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{9}
}

func (x *TAlterFileStoreResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TResizeFileStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Filestore to change.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
	// Increased filestore size.
	BlocksCount uint64 `protobuf:"varint,3,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
	// Filesotre configuration version resize applies to.
	ConfigVersion uint32 `protobuf:"varint,4,opt,name=ConfigVersion,proto3" json:"ConfigVersion,omitempty"`
	// File system performance profile.
	PerformanceProfile *TFileStorePerformanceProfile `protobuf:"bytes,5,opt,name=PerformanceProfile,proto3" json:"PerformanceProfile,omitempty"`
}

func (x *TResizeFileStoreRequest) Reset() {
	*x = TResizeFileStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TResizeFileStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TResizeFileStoreRequest) ProtoMessage() {}

func (x *TResizeFileStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TResizeFileStoreRequest.ProtoReflect.Descriptor instead.
func (*TResizeFileStoreRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{10}
}

func (x *TResizeFileStoreRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TResizeFileStoreRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

func (x *TResizeFileStoreRequest) GetBlocksCount() uint64 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *TResizeFileStoreRequest) GetConfigVersion() uint32 {
	if x != nil {
		return x.ConfigVersion
	}
	return 0
}

func (x *TResizeFileStoreRequest) GetPerformanceProfile() *TFileStorePerformanceProfile {
	if x != nil {
		return x.PerformanceProfile
	}
	return nil
}

type TResizeFileStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *TResizeFileStoreResponse) Reset() {
	*x = TResizeFileStoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TResizeFileStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TResizeFileStoreResponse) ProtoMessage() {}

func (x *TResizeFileStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TResizeFileStoreResponse.ProtoReflect.Descriptor instead.
func (*TResizeFileStoreResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{11}
}

func (x *TResizeFileStoreResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TGetFileStoreInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
}

func (x *TGetFileStoreInfoRequest) Reset() {
	*x = TGetFileStoreInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetFileStoreInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetFileStoreInfoRequest) ProtoMessage() {}

func (x *TGetFileStoreInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetFileStoreInfoRequest.ProtoReflect.Descriptor instead.
func (*TGetFileStoreInfoRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{12}
}

func (x *TGetFileStoreInfoRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TGetFileStoreInfoRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

type TGetFileStoreInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// FileStore information.
	FileStore *TFileStore `protobuf:"bytes,2,opt,name=FileStore,proto3" json:"FileStore,omitempty"`
}

func (x *TGetFileStoreInfoResponse) Reset() {
	*x = TGetFileStoreInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGetFileStoreInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGetFileStoreInfoResponse) ProtoMessage() {}

func (x *TGetFileStoreInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGetFileStoreInfoResponse.ProtoReflect.Descriptor instead.
func (*TGetFileStoreInfoResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{13}
}

func (x *TGetFileStoreInfoResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TGetFileStoreInfoResponse) GetFileStore() *TFileStore {
	if x != nil {
		return x.FileStore
	}
	return nil
}

type TListFileStoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
}

func (x *TListFileStoresRequest) Reset() {
	*x = TListFileStoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TListFileStoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TListFileStoresRequest) ProtoMessage() {}

func (x *TListFileStoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TListFileStoresRequest.ProtoReflect.Descriptor instead.
func (*TListFileStoresRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{14}
}

func (x *TListFileStoresRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TListFileStoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// List of stores names.
	FileStores []string `protobuf:"bytes,2,rep,name=FileStores,proto3" json:"FileStores,omitempty"`
}

func (x *TListFileStoresResponse) Reset() {
	*x = TListFileStoresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TListFileStoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TListFileStoresResponse) ProtoMessage() {}

func (x *TListFileStoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TListFileStoresResponse.ProtoReflect.Descriptor instead.
func (*TListFileStoresResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{15}
}

func (x *TListFileStoresResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TListFileStoresResponse) GetFileStores() []string {
	if x != nil {
		return x.FileStores
	}
	return nil
}

type TDescribeFileStoreModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// Minimum addressable block size (smallest unit of I/O operations).
	BlockSize uint32 `protobuf:"varint,2,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	// Maximum number of blocks stored in filestore.
	BlocksCount uint64 `protobuf:"varint,3,opt,name=BlocksCount,proto3" json:"BlocksCount,omitempty"`
	// Storage media to use.
	StorageMediaKind protos.EStorageMediaKind `protobuf:"varint,4,opt,name=StorageMediaKind,proto3,enum=NCloud.NProto.EStorageMediaKind" json:"StorageMediaKind,omitempty"`
}

func (x *TDescribeFileStoreModelRequest) Reset() {
	*x = TDescribeFileStoreModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDescribeFileStoreModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDescribeFileStoreModelRequest) ProtoMessage() {}

func (x *TDescribeFileStoreModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDescribeFileStoreModelRequest.ProtoReflect.Descriptor instead.
func (*TDescribeFileStoreModelRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{16}
}

func (x *TDescribeFileStoreModelRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TDescribeFileStoreModelRequest) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *TDescribeFileStoreModelRequest) GetBlocksCount() uint64 {
	if x != nil {
		return x.BlocksCount
	}
	return 0
}

func (x *TDescribeFileStoreModelRequest) GetStorageMediaKind() protos.EStorageMediaKind {
	if x != nil {
		return x.StorageMediaKind
	}
	return protos.EStorageMediaKind(0)
}

type TDescribeFileStoreModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// FileStore model information.
	FileStoreModel *TFileStoreModel `protobuf:"bytes,2,opt,name=FileStoreModel,proto3" json:"FileStoreModel,omitempty"`
}

func (x *TDescribeFileStoreModelResponse) Reset() {
	*x = TDescribeFileStoreModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDescribeFileStoreModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDescribeFileStoreModelResponse) ProtoMessage() {}

func (x *TDescribeFileStoreModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDescribeFileStoreModelResponse.ProtoReflect.Descriptor instead.
func (*TDescribeFileStoreModelResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{17}
}

func (x *TDescribeFileStoreModelResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TDescribeFileStoreModelResponse) GetFileStoreModel() *TFileStoreModel {
	if x != nil {
		return x.FileStoreModel
	}
	return nil
}

type TStatFileStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional request headers.
	Headers *THeaders `protobuf:"bytes,1,opt,name=Headers,proto3" json:"Headers,omitempty"`
	// FileSystem identifier.
	FileSystemId string `protobuf:"bytes,2,opt,name=FileSystemId,proto3" json:"FileSystemId,omitempty"`
}

func (x *TStatFileStoreRequest) Reset() {
	*x = TStatFileStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TStatFileStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TStatFileStoreRequest) ProtoMessage() {}

func (x *TStatFileStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TStatFileStoreRequest.ProtoReflect.Descriptor instead.
func (*TStatFileStoreRequest) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{18}
}

func (x *TStatFileStoreRequest) GetHeaders() *THeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TStatFileStoreRequest) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

type TStatFileStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional error, set only if error happened.
	Error *protos.TError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	// FileStore information.
	FileStore *TFileStore `protobuf:"bytes,2,opt,name=FileStore,proto3" json:"FileStore,omitempty"`
	// FileStore statistics.
	Stats *TFileStoreStats `protobuf:"bytes,3,opt,name=Stats,proto3" json:"Stats,omitempty"`
}

func (x *TStatFileStoreResponse) Reset() {
	*x = TStatFileStoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TStatFileStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TStatFileStoreResponse) ProtoMessage() {}

func (x *TStatFileStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_public_api_protos_fs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TStatFileStoreResponse.ProtoReflect.Descriptor instead.
func (*TStatFileStoreResponse) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP(), []int{19}
}

func (x *TStatFileStoreResponse) GetError() *protos.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TStatFileStoreResponse) GetFileStore() *TFileStore {
	if x != nil {
		return x.FileStore
	}
	return nil
}

func (x *TStatFileStoreResponse) GetStats() *TFileStoreStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

var File_cloud_filestore_public_api_protos_fs_proto protoreflect.FileDescriptor

var file_cloud_filestore_public_api_protos_fs_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x03, 0x0a, 0x0a, 0x54, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x66,
	0x0a, 0x12, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x12, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x90, 0x05, 0x0a, 0x1c, 0x54, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x52, 0x65,
	0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x61,
	0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x78,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x78, 0x50, 0x6f,
	0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65,
	0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x78, 0x50, 0x6f,
	0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f,
	0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x4d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x6f, 0x6f,
	0x73, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x75, 0x72, 0x73, 0x74, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x42, 0x75,
	0x72, 0x73, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a,
	0x16, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x4d,
	0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x54,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xad, 0x02, 0x0a, 0x0f, 0x54, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x66, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x12, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x63, 0x0a, 0x0f, 0x54, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x55, 0x73, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x55,
	0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc5,
	0x03, 0x0a, 0x17, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x4c, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4b, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x10, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x66,
	0x0a, 0x12, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x12, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x18, 0x54, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x42, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x22, 0x7c, 0x0a, 0x18, 0x54, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x22, 0x48, 0x0a, 0x19, 0x54, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf4, 0x01, 0x0a,
	0x16, 0x54, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x17, 0x54, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xab, 0x02, 0x0a, 0x17,
	0x54, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x66, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x12, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x47, 0x0a, 0x18, 0x54, 0x52, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x7c, 0x0a, 0x18, 0x54, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x22, 0x8c, 0x01, 0x0a, 0x19, 0x54, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x09, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22,
	0x56, 0x0a, 0x16, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x66, 0x0a, 0x17, 0x54, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x22,
	0xec, 0x01, 0x0a, 0x1e, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x4c, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x10, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0xa1,
	0x01, 0x0a, 0x1f, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x51, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x22, 0x79, 0x0a, 0x15, 0x54, 0x53, 0x74, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xca, 0x01,
	0x0a, 0x16, 0x54, 0x53, 0x74, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x09,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6e, 0x62, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_cloud_filestore_public_api_protos_fs_proto_rawDescOnce sync.Once
	file_cloud_filestore_public_api_protos_fs_proto_rawDescData = file_cloud_filestore_public_api_protos_fs_proto_rawDesc
)

func file_cloud_filestore_public_api_protos_fs_proto_rawDescGZIP() []byte {
	file_cloud_filestore_public_api_protos_fs_proto_rawDescOnce.Do(func() {
		file_cloud_filestore_public_api_protos_fs_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_filestore_public_api_protos_fs_proto_rawDescData)
	})
	return file_cloud_filestore_public_api_protos_fs_proto_rawDescData
}

var file_cloud_filestore_public_api_protos_fs_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_cloud_filestore_public_api_protos_fs_proto_goTypes = []interface{}{
	(*TFileStore)(nil),                      // 0: NCloud.NFileStore.NProto.TFileStore
	(*TFileStorePerformanceProfile)(nil),    // 1: NCloud.NFileStore.NProto.TFileStorePerformanceProfile
	(*TFileStoreModel)(nil),                 // 2: NCloud.NFileStore.NProto.TFileStoreModel
	(*TFileStoreStats)(nil),                 // 3: NCloud.NFileStore.NProto.TFileStoreStats
	(*TCreateFileStoreRequest)(nil),         // 4: NCloud.NFileStore.NProto.TCreateFileStoreRequest
	(*TCreateFileStoreResponse)(nil),        // 5: NCloud.NFileStore.NProto.TCreateFileStoreResponse
	(*TDestroyFileStoreRequest)(nil),        // 6: NCloud.NFileStore.NProto.TDestroyFileStoreRequest
	(*TDestroyFileStoreResponse)(nil),       // 7: NCloud.NFileStore.NProto.TDestroyFileStoreResponse
	(*TAlterFileStoreRequest)(nil),          // 8: NCloud.NFileStore.NProto.TAlterFileStoreRequest
	(*TAlterFileStoreResponse)(nil),         // 9: NCloud.NFileStore.NProto.TAlterFileStoreResponse
	(*TResizeFileStoreRequest)(nil),         // 10: NCloud.NFileStore.NProto.TResizeFileStoreRequest
	(*TResizeFileStoreResponse)(nil),        // 11: NCloud.NFileStore.NProto.TResizeFileStoreResponse
	(*TGetFileStoreInfoRequest)(nil),        // 12: NCloud.NFileStore.NProto.TGetFileStoreInfoRequest
	(*TGetFileStoreInfoResponse)(nil),       // 13: NCloud.NFileStore.NProto.TGetFileStoreInfoResponse
	(*TListFileStoresRequest)(nil),          // 14: NCloud.NFileStore.NProto.TListFileStoresRequest
	(*TListFileStoresResponse)(nil),         // 15: NCloud.NFileStore.NProto.TListFileStoresResponse
	(*TDescribeFileStoreModelRequest)(nil),  // 16: NCloud.NFileStore.NProto.TDescribeFileStoreModelRequest
	(*TDescribeFileStoreModelResponse)(nil), // 17: NCloud.NFileStore.NProto.TDescribeFileStoreModelResponse
	(*TStatFileStoreRequest)(nil),           // 18: NCloud.NFileStore.NProto.TStatFileStoreRequest
	(*TStatFileStoreResponse)(nil),          // 19: NCloud.NFileStore.NProto.TStatFileStoreResponse
	(protos.EStorageMediaKind)(0),           // 20: NCloud.NProto.EStorageMediaKind
	(*THeaders)(nil),                        // 21: NCloud.NFileStore.NProto.THeaders
	(*protos.TError)(nil),                   // 22: NCloud.NProto.TError
}
var file_cloud_filestore_public_api_protos_fs_proto_depIdxs = []int32{
	1,  // 0: NCloud.NFileStore.NProto.TFileStore.PerformanceProfile:type_name -> NCloud.NFileStore.NProto.TFileStorePerformanceProfile
	20, // 1: NCloud.NFileStore.NProto.TFileStoreModel.StorageMediaKind:type_name -> NCloud.NProto.EStorageMediaKind
	1,  // 2: NCloud.NFileStore.NProto.TFileStoreModel.PerformanceProfile:type_name -> NCloud.NFileStore.NProto.TFileStorePerformanceProfile
	21, // 3: NCloud.NFileStore.NProto.TCreateFileStoreRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	20, // 4: NCloud.NFileStore.NProto.TCreateFileStoreRequest.StorageMediaKind:type_name -> NCloud.NProto.EStorageMediaKind
	1,  // 5: NCloud.NFileStore.NProto.TCreateFileStoreRequest.PerformanceProfile:type_name -> NCloud.NFileStore.NProto.TFileStorePerformanceProfile
	22, // 6: NCloud.NFileStore.NProto.TCreateFileStoreResponse.Error:type_name -> NCloud.NProto.TError
	0,  // 7: NCloud.NFileStore.NProto.TCreateFileStoreResponse.FileStore:type_name -> NCloud.NFileStore.NProto.TFileStore
	21, // 8: NCloud.NFileStore.NProto.TDestroyFileStoreRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	22, // 9: NCloud.NFileStore.NProto.TDestroyFileStoreResponse.Error:type_name -> NCloud.NProto.TError
	21, // 10: NCloud.NFileStore.NProto.TAlterFileStoreRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	22, // 11: NCloud.NFileStore.NProto.TAlterFileStoreResponse.Error:type_name -> NCloud.NProto.TError
	21, // 12: NCloud.NFileStore.NProto.TResizeFileStoreRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	1,  // 13: NCloud.NFileStore.NProto.TResizeFileStoreRequest.PerformanceProfile:type_name -> NCloud.NFileStore.NProto.TFileStorePerformanceProfile
	22, // 14: NCloud.NFileStore.NProto.TResizeFileStoreResponse.Error:type_name -> NCloud.NProto.TError
	21, // 15: NCloud.NFileStore.NProto.TGetFileStoreInfoRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	22, // 16: NCloud.NFileStore.NProto.TGetFileStoreInfoResponse.Error:type_name -> NCloud.NProto.TError
	0,  // 17: NCloud.NFileStore.NProto.TGetFileStoreInfoResponse.FileStore:type_name -> NCloud.NFileStore.NProto.TFileStore
	21, // 18: NCloud.NFileStore.NProto.TListFileStoresRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	22, // 19: NCloud.NFileStore.NProto.TListFileStoresResponse.Error:type_name -> NCloud.NProto.TError
	21, // 20: NCloud.NFileStore.NProto.TDescribeFileStoreModelRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	20, // 21: NCloud.NFileStore.NProto.TDescribeFileStoreModelRequest.StorageMediaKind:type_name -> NCloud.NProto.EStorageMediaKind
	22, // 22: NCloud.NFileStore.NProto.TDescribeFileStoreModelResponse.Error:type_name -> NCloud.NProto.TError
	2,  // 23: NCloud.NFileStore.NProto.TDescribeFileStoreModelResponse.FileStoreModel:type_name -> NCloud.NFileStore.NProto.TFileStoreModel
	21, // 24: NCloud.NFileStore.NProto.TStatFileStoreRequest.Headers:type_name -> NCloud.NFileStore.NProto.THeaders
	22, // 25: NCloud.NFileStore.NProto.TStatFileStoreResponse.Error:type_name -> NCloud.NProto.TError
	0,  // 26: NCloud.NFileStore.NProto.TStatFileStoreResponse.FileStore:type_name -> NCloud.NFileStore.NProto.TFileStore
	3,  // 27: NCloud.NFileStore.NProto.TStatFileStoreResponse.Stats:type_name -> NCloud.NFileStore.NProto.TFileStoreStats
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_cloud_filestore_public_api_protos_fs_proto_init() }
func file_cloud_filestore_public_api_protos_fs_proto_init() {
	if File_cloud_filestore_public_api_protos_fs_proto != nil {
		return
	}
	file_cloud_filestore_public_api_protos_headers_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFileStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFileStorePerformanceProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFileStoreModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFileStoreStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCreateFileStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCreateFileStoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDestroyFileStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDestroyFileStoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAlterFileStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAlterFileStoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TResizeFileStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TResizeFileStoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetFileStoreInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TGetFileStoreInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TListFileStoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TListFileStoresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDescribeFileStoreModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDescribeFileStoreModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TStatFileStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_filestore_public_api_protos_fs_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TStatFileStoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_filestore_public_api_protos_fs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_filestore_public_api_protos_fs_proto_goTypes,
		DependencyIndexes: file_cloud_filestore_public_api_protos_fs_proto_depIdxs,
		MessageInfos:      file_cloud_filestore_public_api_protos_fs_proto_msgTypes,
	}.Build()
	File_cloud_filestore_public_api_protos_fs_proto = out.File
	file_cloud_filestore_public_api_protos_fs_proto_rawDesc = nil
	file_cloud_filestore_public_api_protos_fs_proto_goTypes = nil
	file_cloud_filestore_public_api_protos_fs_proto_depIdxs = nil
}
