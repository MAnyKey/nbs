// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/filestore/public/api/grpc/service.proto

package grpc

import (
	context "context"
	protos "github.com/ydb-platform/nbs/cloud/filestore/public/api/protos"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_cloud_filestore_public_api_grpc_service_proto protoreflect.FileDescriptor

var file_cloud_filestore_public_api_grpc_service_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x18, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x32, 0xf6, 0x34, 0x0a, 0x11, 0x54, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x04, 0x50, 0x69,
	0x6e, 0x67, 0x12, 0x26, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x3a, 0x01, 0x2a, 0x22, 0x05,
	0x2f, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x8f, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x31, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x32, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a,
	0x22, 0x0b, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x66, 0x73, 0x12, 0x94, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x32, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x73, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x8a, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66,
	0x73, 0x12, 0x8b, 0x01, 0x0a, 0x0e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0e, 0x3a, 0x01, 0x2a, 0x22, 0x09, 0x2f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x73, 0x12,
	0x8f, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x31, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x66,
	0x73, 0x12, 0xac, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x38, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x66, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x87, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x2f, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53,
	0x74, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x53, 0x74, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a,
	0x22, 0x08, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x66, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x0e, 0x41,
	0x64, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x41, 0x64, 0x64, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f,
	0x61, 0x64, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x9f, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x9f, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61,
	0x64, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0xa3, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22,
	0x15, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x92, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x8a, 0x01,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x86, 0x01, 0x0a, 0x0b, 0x50,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x9a, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x9b, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x83,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x32, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x9a, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x9e, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x33, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f,
	0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x2d, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0x82, 0x01, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a,
	0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x82, 0x01, 0x0a, 0x0a, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x2c, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x55, 0x6e, 0x6c, 0x69,
	0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x72,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01,
	0x2a, 0x22, 0x0c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x7a, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2a, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22,
	0x0a, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x7e, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x0b,
	0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x2d, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x12, 0x87, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x2d, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22,
	0x0e, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x12,
	0x8b, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x58, 0x41, 0x74, 0x74, 0x72,
	0x12, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x73,
	0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x78, 0x61, 0x74, 0x74, 0x72, 0x12, 0x8b, 0x01,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x58, 0x41, 0x74, 0x74, 0x72, 0x12, 0x2e,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x67, 0x65, 0x74,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x78, 0x61, 0x74, 0x74, 0x72, 0x12, 0x8f, 0x01, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x58, 0x41, 0x74, 0x74, 0x72, 0x12, 0x2f, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x78, 0x61, 0x74, 0x74, 0x72, 0x12, 0x97, 0x01,
	0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x58, 0x41, 0x74, 0x74,
	0x72, 0x12, 0x31, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x58, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x78, 0x61, 0x74, 0x74, 0x72, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2f, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x7a, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2a, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65,
	0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x61, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x7e, 0x0a, 0x09, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e,
	0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x86,
	0x01, 0x0a, 0x0b, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x2d,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x41, 0x63, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x61, 0x63, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x86, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x2d, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01,
	0x2a, 0x22, 0x0d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x7a, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x2a, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x54, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x54, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a,
	0x22, 0x0a, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x8e, 0x01, 0x0a,
	0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xc0, 0x05,
	0x0a, 0x17, 0x54, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x4e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x53,
	0x74, 0x6f, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x4e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x4b, 0x69, 0x63,
	0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4b, 0x69, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4b, 0x69, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e,
	0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x10,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x3a, 0x01, 0x2a, 0x22, 0x05, 0x2f, 0x70, 0x69, 0x6e, 0x67,
	0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79,
	0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6e, 0x62, 0x73, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_cloud_filestore_public_api_grpc_service_proto_goTypes = []interface{}{
	(*protos.TPingRequest)(nil),                    // 0: NCloud.NFileStore.NProto.TPingRequest
	(*protos.TCreateFileStoreRequest)(nil),         // 1: NCloud.NFileStore.NProto.TCreateFileStoreRequest
	(*protos.TDestroyFileStoreRequest)(nil),        // 2: NCloud.NFileStore.NProto.TDestroyFileStoreRequest
	(*protos.TGetFileStoreInfoRequest)(nil),        // 3: NCloud.NFileStore.NProto.TGetFileStoreInfoRequest
	(*protos.TListFileStoresRequest)(nil),          // 4: NCloud.NFileStore.NProto.TListFileStoresRequest
	(*protos.TAlterFileStoreRequest)(nil),          // 5: NCloud.NFileStore.NProto.TAlterFileStoreRequest
	(*protos.TResizeFileStoreRequest)(nil),         // 6: NCloud.NFileStore.NProto.TResizeFileStoreRequest
	(*protos.TDescribeFileStoreModelRequest)(nil),  // 7: NCloud.NFileStore.NProto.TDescribeFileStoreModelRequest
	(*protos.TStatFileStoreRequest)(nil),           // 8: NCloud.NFileStore.NProto.TStatFileStoreRequest
	(*protos.TAddClusterNodeRequest)(nil),          // 9: NCloud.NFileStore.NProto.TAddClusterNodeRequest
	(*protos.TRemoveClusterNodeRequest)(nil),       // 10: NCloud.NFileStore.NProto.TRemoveClusterNodeRequest
	(*protos.TListClusterNodesRequest)(nil),        // 11: NCloud.NFileStore.NProto.TListClusterNodesRequest
	(*protos.TAddClusterClientsRequest)(nil),       // 12: NCloud.NFileStore.NProto.TAddClusterClientsRequest
	(*protos.TRemoveClusterClientsRequest)(nil),    // 13: NCloud.NFileStore.NProto.TRemoveClusterClientsRequest
	(*protos.TListClusterClientsRequest)(nil),      // 14: NCloud.NFileStore.NProto.TListClusterClientsRequest
	(*protos.TUpdateClusterRequest)(nil),           // 15: NCloud.NFileStore.NProto.TUpdateClusterRequest
	(*protos.TCreateSessionRequest)(nil),           // 16: NCloud.NFileStore.NProto.TCreateSessionRequest
	(*protos.TDestroySessionRequest)(nil),          // 17: NCloud.NFileStore.NProto.TDestroySessionRequest
	(*protos.TResetSessionRequest)(nil),            // 18: NCloud.NFileStore.NProto.TResetSessionRequest
	(*protos.TPingSessionRequest)(nil),             // 19: NCloud.NFileStore.NProto.TPingSessionRequest
	(*protos.TSubscribeSessionRequest)(nil),        // 20: NCloud.NFileStore.NProto.TSubscribeSessionRequest
	(*protos.TGetSessionEventsRequest)(nil),        // 21: NCloud.NFileStore.NProto.TGetSessionEventsRequest
	(*protos.TCreateCheckpointRequest)(nil),        // 22: NCloud.NFileStore.NProto.TCreateCheckpointRequest
	(*protos.TDestroyCheckpointRequest)(nil),       // 23: NCloud.NFileStore.NProto.TDestroyCheckpointRequest
	(*protos.TResolvePathRequest)(nil),             // 24: NCloud.NFileStore.NProto.TResolvePathRequest
	(*protos.TCreateNodeRequest)(nil),              // 25: NCloud.NFileStore.NProto.TCreateNodeRequest
	(*protos.TUnlinkNodeRequest)(nil),              // 26: NCloud.NFileStore.NProto.TUnlinkNodeRequest
	(*protos.TRenameNodeRequest)(nil),              // 27: NCloud.NFileStore.NProto.TRenameNodeRequest
	(*protos.TAccessNodeRequest)(nil),              // 28: NCloud.NFileStore.NProto.TAccessNodeRequest
	(*protos.TReadLinkRequest)(nil),                // 29: NCloud.NFileStore.NProto.TReadLinkRequest
	(*protos.TListNodesRequest)(nil),               // 30: NCloud.NFileStore.NProto.TListNodesRequest
	(*protos.TSetNodeAttrRequest)(nil),             // 31: NCloud.NFileStore.NProto.TSetNodeAttrRequest
	(*protos.TGetNodeAttrRequest)(nil),             // 32: NCloud.NFileStore.NProto.TGetNodeAttrRequest
	(*protos.TSetNodeXAttrRequest)(nil),            // 33: NCloud.NFileStore.NProto.TSetNodeXAttrRequest
	(*protos.TGetNodeXAttrRequest)(nil),            // 34: NCloud.NFileStore.NProto.TGetNodeXAttrRequest
	(*protos.TListNodeXAttrRequest)(nil),           // 35: NCloud.NFileStore.NProto.TListNodeXAttrRequest
	(*protos.TRemoveNodeXAttrRequest)(nil),         // 36: NCloud.NFileStore.NProto.TRemoveNodeXAttrRequest
	(*protos.TCreateHandleRequest)(nil),            // 37: NCloud.NFileStore.NProto.TCreateHandleRequest
	(*protos.TDestroyHandleRequest)(nil),           // 38: NCloud.NFileStore.NProto.TDestroyHandleRequest
	(*protos.TReadDataRequest)(nil),                // 39: NCloud.NFileStore.NProto.TReadDataRequest
	(*protos.TWriteDataRequest)(nil),               // 40: NCloud.NFileStore.NProto.TWriteDataRequest
	(*protos.TAllocateDataRequest)(nil),            // 41: NCloud.NFileStore.NProto.TAllocateDataRequest
	(*protos.TAcquireLockRequest)(nil),             // 42: NCloud.NFileStore.NProto.TAcquireLockRequest
	(*protos.TReleaseLockRequest)(nil),             // 43: NCloud.NFileStore.NProto.TReleaseLockRequest
	(*protos.TTestLockRequest)(nil),                // 44: NCloud.NFileStore.NProto.TTestLockRequest
	(*protos.TExecuteActionRequest)(nil),           // 45: NCloud.NFileStore.NProto.TExecuteActionRequest
	(*protos.TStartEndpointRequest)(nil),           // 46: NCloud.NFileStore.NProto.TStartEndpointRequest
	(*protos.TStopEndpointRequest)(nil),            // 47: NCloud.NFileStore.NProto.TStopEndpointRequest
	(*protos.TListEndpointsRequest)(nil),           // 48: NCloud.NFileStore.NProto.TListEndpointsRequest
	(*protos.TKickEndpointRequest)(nil),            // 49: NCloud.NFileStore.NProto.TKickEndpointRequest
	(*protos.TPingResponse)(nil),                   // 50: NCloud.NFileStore.NProto.TPingResponse
	(*protos.TCreateFileStoreResponse)(nil),        // 51: NCloud.NFileStore.NProto.TCreateFileStoreResponse
	(*protos.TDestroyFileStoreResponse)(nil),       // 52: NCloud.NFileStore.NProto.TDestroyFileStoreResponse
	(*protos.TGetFileStoreInfoResponse)(nil),       // 53: NCloud.NFileStore.NProto.TGetFileStoreInfoResponse
	(*protos.TListFileStoresResponse)(nil),         // 54: NCloud.NFileStore.NProto.TListFileStoresResponse
	(*protos.TAlterFileStoreResponse)(nil),         // 55: NCloud.NFileStore.NProto.TAlterFileStoreResponse
	(*protos.TResizeFileStoreResponse)(nil),        // 56: NCloud.NFileStore.NProto.TResizeFileStoreResponse
	(*protos.TDescribeFileStoreModelResponse)(nil), // 57: NCloud.NFileStore.NProto.TDescribeFileStoreModelResponse
	(*protos.TStatFileStoreResponse)(nil),          // 58: NCloud.NFileStore.NProto.TStatFileStoreResponse
	(*protos.TAddClusterNodeResponse)(nil),         // 59: NCloud.NFileStore.NProto.TAddClusterNodeResponse
	(*protos.TRemoveClusterNodeResponse)(nil),      // 60: NCloud.NFileStore.NProto.TRemoveClusterNodeResponse
	(*protos.TListClusterNodesResponse)(nil),       // 61: NCloud.NFileStore.NProto.TListClusterNodesResponse
	(*protos.TAddClusterClientsResponse)(nil),      // 62: NCloud.NFileStore.NProto.TAddClusterClientsResponse
	(*protos.TRemoveClusterClientsResponse)(nil),   // 63: NCloud.NFileStore.NProto.TRemoveClusterClientsResponse
	(*protos.TListClusterClientsResponse)(nil),     // 64: NCloud.NFileStore.NProto.TListClusterClientsResponse
	(*protos.TUpdateClusterResponse)(nil),          // 65: NCloud.NFileStore.NProto.TUpdateClusterResponse
	(*protos.TCreateSessionResponse)(nil),          // 66: NCloud.NFileStore.NProto.TCreateSessionResponse
	(*protos.TDestroySessionResponse)(nil),         // 67: NCloud.NFileStore.NProto.TDestroySessionResponse
	(*protos.TResetSessionResponse)(nil),           // 68: NCloud.NFileStore.NProto.TResetSessionResponse
	(*protos.TPingSessionResponse)(nil),            // 69: NCloud.NFileStore.NProto.TPingSessionResponse
	(*protos.TSubscribeSessionResponse)(nil),       // 70: NCloud.NFileStore.NProto.TSubscribeSessionResponse
	(*protos.TGetSessionEventsResponse)(nil),       // 71: NCloud.NFileStore.NProto.TGetSessionEventsResponse
	(*protos.TCreateCheckpointResponse)(nil),       // 72: NCloud.NFileStore.NProto.TCreateCheckpointResponse
	(*protos.TDestroyCheckpointResponse)(nil),      // 73: NCloud.NFileStore.NProto.TDestroyCheckpointResponse
	(*protos.TResolvePathResponse)(nil),            // 74: NCloud.NFileStore.NProto.TResolvePathResponse
	(*protos.TCreateNodeResponse)(nil),             // 75: NCloud.NFileStore.NProto.TCreateNodeResponse
	(*protos.TUnlinkNodeResponse)(nil),             // 76: NCloud.NFileStore.NProto.TUnlinkNodeResponse
	(*protos.TRenameNodeResponse)(nil),             // 77: NCloud.NFileStore.NProto.TRenameNodeResponse
	(*protos.TAccessNodeResponse)(nil),             // 78: NCloud.NFileStore.NProto.TAccessNodeResponse
	(*protos.TReadLinkResponse)(nil),               // 79: NCloud.NFileStore.NProto.TReadLinkResponse
	(*protos.TListNodesResponse)(nil),              // 80: NCloud.NFileStore.NProto.TListNodesResponse
	(*protos.TSetNodeAttrResponse)(nil),            // 81: NCloud.NFileStore.NProto.TSetNodeAttrResponse
	(*protos.TGetNodeAttrResponse)(nil),            // 82: NCloud.NFileStore.NProto.TGetNodeAttrResponse
	(*protos.TSetNodeXAttrResponse)(nil),           // 83: NCloud.NFileStore.NProto.TSetNodeXAttrResponse
	(*protos.TGetNodeXAttrResponse)(nil),           // 84: NCloud.NFileStore.NProto.TGetNodeXAttrResponse
	(*protos.TListNodeXAttrResponse)(nil),          // 85: NCloud.NFileStore.NProto.TListNodeXAttrResponse
	(*protos.TRemoveNodeXAttrResponse)(nil),        // 86: NCloud.NFileStore.NProto.TRemoveNodeXAttrResponse
	(*protos.TCreateHandleResponse)(nil),           // 87: NCloud.NFileStore.NProto.TCreateHandleResponse
	(*protos.TDestroyHandleResponse)(nil),          // 88: NCloud.NFileStore.NProto.TDestroyHandleResponse
	(*protos.TReadDataResponse)(nil),               // 89: NCloud.NFileStore.NProto.TReadDataResponse
	(*protos.TWriteDataResponse)(nil),              // 90: NCloud.NFileStore.NProto.TWriteDataResponse
	(*protos.TAllocateDataResponse)(nil),           // 91: NCloud.NFileStore.NProto.TAllocateDataResponse
	(*protos.TAcquireLockResponse)(nil),            // 92: NCloud.NFileStore.NProto.TAcquireLockResponse
	(*protos.TReleaseLockResponse)(nil),            // 93: NCloud.NFileStore.NProto.TReleaseLockResponse
	(*protos.TTestLockResponse)(nil),               // 94: NCloud.NFileStore.NProto.TTestLockResponse
	(*protos.TExecuteActionResponse)(nil),          // 95: NCloud.NFileStore.NProto.TExecuteActionResponse
	(*protos.TStartEndpointResponse)(nil),          // 96: NCloud.NFileStore.NProto.TStartEndpointResponse
	(*protos.TStopEndpointResponse)(nil),           // 97: NCloud.NFileStore.NProto.TStopEndpointResponse
	(*protos.TListEndpointsResponse)(nil),          // 98: NCloud.NFileStore.NProto.TListEndpointsResponse
	(*protos.TKickEndpointResponse)(nil),           // 99: NCloud.NFileStore.NProto.TKickEndpointResponse
}
var file_cloud_filestore_public_api_grpc_service_proto_depIdxs = []int32{
	0,  // 0: NCloud.NFileStore.NProto.TFileStoreService.Ping:input_type -> NCloud.NFileStore.NProto.TPingRequest
	1,  // 1: NCloud.NFileStore.NProto.TFileStoreService.CreateFileStore:input_type -> NCloud.NFileStore.NProto.TCreateFileStoreRequest
	2,  // 2: NCloud.NFileStore.NProto.TFileStoreService.DestroyFileStore:input_type -> NCloud.NFileStore.NProto.TDestroyFileStoreRequest
	3,  // 3: NCloud.NFileStore.NProto.TFileStoreService.GetFileStoreInfo:input_type -> NCloud.NFileStore.NProto.TGetFileStoreInfoRequest
	4,  // 4: NCloud.NFileStore.NProto.TFileStoreService.ListFileStores:input_type -> NCloud.NFileStore.NProto.TListFileStoresRequest
	5,  // 5: NCloud.NFileStore.NProto.TFileStoreService.AlterFileStore:input_type -> NCloud.NFileStore.NProto.TAlterFileStoreRequest
	6,  // 6: NCloud.NFileStore.NProto.TFileStoreService.ResizeFileStore:input_type -> NCloud.NFileStore.NProto.TResizeFileStoreRequest
	7,  // 7: NCloud.NFileStore.NProto.TFileStoreService.DescribeFileStoreModel:input_type -> NCloud.NFileStore.NProto.TDescribeFileStoreModelRequest
	8,  // 8: NCloud.NFileStore.NProto.TFileStoreService.StatFileStore:input_type -> NCloud.NFileStore.NProto.TStatFileStoreRequest
	9,  // 9: NCloud.NFileStore.NProto.TFileStoreService.AddClusterNode:input_type -> NCloud.NFileStore.NProto.TAddClusterNodeRequest
	10, // 10: NCloud.NFileStore.NProto.TFileStoreService.RemoveClusterNode:input_type -> NCloud.NFileStore.NProto.TRemoveClusterNodeRequest
	11, // 11: NCloud.NFileStore.NProto.TFileStoreService.ListClusterNodes:input_type -> NCloud.NFileStore.NProto.TListClusterNodesRequest
	12, // 12: NCloud.NFileStore.NProto.TFileStoreService.AddClusterClients:input_type -> NCloud.NFileStore.NProto.TAddClusterClientsRequest
	13, // 13: NCloud.NFileStore.NProto.TFileStoreService.RemoveClusterClients:input_type -> NCloud.NFileStore.NProto.TRemoveClusterClientsRequest
	14, // 14: NCloud.NFileStore.NProto.TFileStoreService.ListClusterClients:input_type -> NCloud.NFileStore.NProto.TListClusterClientsRequest
	15, // 15: NCloud.NFileStore.NProto.TFileStoreService.UpdateCluster:input_type -> NCloud.NFileStore.NProto.TUpdateClusterRequest
	16, // 16: NCloud.NFileStore.NProto.TFileStoreService.CreateSession:input_type -> NCloud.NFileStore.NProto.TCreateSessionRequest
	17, // 17: NCloud.NFileStore.NProto.TFileStoreService.DestroySession:input_type -> NCloud.NFileStore.NProto.TDestroySessionRequest
	18, // 18: NCloud.NFileStore.NProto.TFileStoreService.ResetSession:input_type -> NCloud.NFileStore.NProto.TResetSessionRequest
	19, // 19: NCloud.NFileStore.NProto.TFileStoreService.PingSession:input_type -> NCloud.NFileStore.NProto.TPingSessionRequest
	20, // 20: NCloud.NFileStore.NProto.TFileStoreService.SubscribeSession:input_type -> NCloud.NFileStore.NProto.TSubscribeSessionRequest
	21, // 21: NCloud.NFileStore.NProto.TFileStoreService.GetSessionEvents:input_type -> NCloud.NFileStore.NProto.TGetSessionEventsRequest
	21, // 22: NCloud.NFileStore.NProto.TFileStoreService.GetSessionEventsStream:input_type -> NCloud.NFileStore.NProto.TGetSessionEventsRequest
	22, // 23: NCloud.NFileStore.NProto.TFileStoreService.CreateCheckpoint:input_type -> NCloud.NFileStore.NProto.TCreateCheckpointRequest
	23, // 24: NCloud.NFileStore.NProto.TFileStoreService.DestroyCheckpoint:input_type -> NCloud.NFileStore.NProto.TDestroyCheckpointRequest
	24, // 25: NCloud.NFileStore.NProto.TFileStoreService.ResolvePath:input_type -> NCloud.NFileStore.NProto.TResolvePathRequest
	25, // 26: NCloud.NFileStore.NProto.TFileStoreService.CreateNode:input_type -> NCloud.NFileStore.NProto.TCreateNodeRequest
	26, // 27: NCloud.NFileStore.NProto.TFileStoreService.UnlinkNode:input_type -> NCloud.NFileStore.NProto.TUnlinkNodeRequest
	27, // 28: NCloud.NFileStore.NProto.TFileStoreService.RenameNode:input_type -> NCloud.NFileStore.NProto.TRenameNodeRequest
	28, // 29: NCloud.NFileStore.NProto.TFileStoreService.AccessNode:input_type -> NCloud.NFileStore.NProto.TAccessNodeRequest
	29, // 30: NCloud.NFileStore.NProto.TFileStoreService.ReadLink:input_type -> NCloud.NFileStore.NProto.TReadLinkRequest
	30, // 31: NCloud.NFileStore.NProto.TFileStoreService.ListNodes:input_type -> NCloud.NFileStore.NProto.TListNodesRequest
	31, // 32: NCloud.NFileStore.NProto.TFileStoreService.SetNodeAttr:input_type -> NCloud.NFileStore.NProto.TSetNodeAttrRequest
	32, // 33: NCloud.NFileStore.NProto.TFileStoreService.GetNodeAttr:input_type -> NCloud.NFileStore.NProto.TGetNodeAttrRequest
	33, // 34: NCloud.NFileStore.NProto.TFileStoreService.SetNodeXAttr:input_type -> NCloud.NFileStore.NProto.TSetNodeXAttrRequest
	34, // 35: NCloud.NFileStore.NProto.TFileStoreService.GetNodeXAttr:input_type -> NCloud.NFileStore.NProto.TGetNodeXAttrRequest
	35, // 36: NCloud.NFileStore.NProto.TFileStoreService.ListNodeXAttr:input_type -> NCloud.NFileStore.NProto.TListNodeXAttrRequest
	36, // 37: NCloud.NFileStore.NProto.TFileStoreService.RemoveNodeXAttr:input_type -> NCloud.NFileStore.NProto.TRemoveNodeXAttrRequest
	37, // 38: NCloud.NFileStore.NProto.TFileStoreService.CreateHandle:input_type -> NCloud.NFileStore.NProto.TCreateHandleRequest
	38, // 39: NCloud.NFileStore.NProto.TFileStoreService.DestroyHandle:input_type -> NCloud.NFileStore.NProto.TDestroyHandleRequest
	39, // 40: NCloud.NFileStore.NProto.TFileStoreService.ReadData:input_type -> NCloud.NFileStore.NProto.TReadDataRequest
	40, // 41: NCloud.NFileStore.NProto.TFileStoreService.WriteData:input_type -> NCloud.NFileStore.NProto.TWriteDataRequest
	41, // 42: NCloud.NFileStore.NProto.TFileStoreService.AllocateData:input_type -> NCloud.NFileStore.NProto.TAllocateDataRequest
	42, // 43: NCloud.NFileStore.NProto.TFileStoreService.AcquireLock:input_type -> NCloud.NFileStore.NProto.TAcquireLockRequest
	43, // 44: NCloud.NFileStore.NProto.TFileStoreService.ReleaseLock:input_type -> NCloud.NFileStore.NProto.TReleaseLockRequest
	44, // 45: NCloud.NFileStore.NProto.TFileStoreService.TestLock:input_type -> NCloud.NFileStore.NProto.TTestLockRequest
	45, // 46: NCloud.NFileStore.NProto.TFileStoreService.ExecuteAction:input_type -> NCloud.NFileStore.NProto.TExecuteActionRequest
	46, // 47: NCloud.NFileStore.NProto.TEndpointManagerService.StartEndpoint:input_type -> NCloud.NFileStore.NProto.TStartEndpointRequest
	47, // 48: NCloud.NFileStore.NProto.TEndpointManagerService.StopEndpoint:input_type -> NCloud.NFileStore.NProto.TStopEndpointRequest
	48, // 49: NCloud.NFileStore.NProto.TEndpointManagerService.ListEndpoints:input_type -> NCloud.NFileStore.NProto.TListEndpointsRequest
	49, // 50: NCloud.NFileStore.NProto.TEndpointManagerService.KickEndpoint:input_type -> NCloud.NFileStore.NProto.TKickEndpointRequest
	0,  // 51: NCloud.NFileStore.NProto.TEndpointManagerService.Ping:input_type -> NCloud.NFileStore.NProto.TPingRequest
	50, // 52: NCloud.NFileStore.NProto.TFileStoreService.Ping:output_type -> NCloud.NFileStore.NProto.TPingResponse
	51, // 53: NCloud.NFileStore.NProto.TFileStoreService.CreateFileStore:output_type -> NCloud.NFileStore.NProto.TCreateFileStoreResponse
	52, // 54: NCloud.NFileStore.NProto.TFileStoreService.DestroyFileStore:output_type -> NCloud.NFileStore.NProto.TDestroyFileStoreResponse
	53, // 55: NCloud.NFileStore.NProto.TFileStoreService.GetFileStoreInfo:output_type -> NCloud.NFileStore.NProto.TGetFileStoreInfoResponse
	54, // 56: NCloud.NFileStore.NProto.TFileStoreService.ListFileStores:output_type -> NCloud.NFileStore.NProto.TListFileStoresResponse
	55, // 57: NCloud.NFileStore.NProto.TFileStoreService.AlterFileStore:output_type -> NCloud.NFileStore.NProto.TAlterFileStoreResponse
	56, // 58: NCloud.NFileStore.NProto.TFileStoreService.ResizeFileStore:output_type -> NCloud.NFileStore.NProto.TResizeFileStoreResponse
	57, // 59: NCloud.NFileStore.NProto.TFileStoreService.DescribeFileStoreModel:output_type -> NCloud.NFileStore.NProto.TDescribeFileStoreModelResponse
	58, // 60: NCloud.NFileStore.NProto.TFileStoreService.StatFileStore:output_type -> NCloud.NFileStore.NProto.TStatFileStoreResponse
	59, // 61: NCloud.NFileStore.NProto.TFileStoreService.AddClusterNode:output_type -> NCloud.NFileStore.NProto.TAddClusterNodeResponse
	60, // 62: NCloud.NFileStore.NProto.TFileStoreService.RemoveClusterNode:output_type -> NCloud.NFileStore.NProto.TRemoveClusterNodeResponse
	61, // 63: NCloud.NFileStore.NProto.TFileStoreService.ListClusterNodes:output_type -> NCloud.NFileStore.NProto.TListClusterNodesResponse
	62, // 64: NCloud.NFileStore.NProto.TFileStoreService.AddClusterClients:output_type -> NCloud.NFileStore.NProto.TAddClusterClientsResponse
	63, // 65: NCloud.NFileStore.NProto.TFileStoreService.RemoveClusterClients:output_type -> NCloud.NFileStore.NProto.TRemoveClusterClientsResponse
	64, // 66: NCloud.NFileStore.NProto.TFileStoreService.ListClusterClients:output_type -> NCloud.NFileStore.NProto.TListClusterClientsResponse
	65, // 67: NCloud.NFileStore.NProto.TFileStoreService.UpdateCluster:output_type -> NCloud.NFileStore.NProto.TUpdateClusterResponse
	66, // 68: NCloud.NFileStore.NProto.TFileStoreService.CreateSession:output_type -> NCloud.NFileStore.NProto.TCreateSessionResponse
	67, // 69: NCloud.NFileStore.NProto.TFileStoreService.DestroySession:output_type -> NCloud.NFileStore.NProto.TDestroySessionResponse
	68, // 70: NCloud.NFileStore.NProto.TFileStoreService.ResetSession:output_type -> NCloud.NFileStore.NProto.TResetSessionResponse
	69, // 71: NCloud.NFileStore.NProto.TFileStoreService.PingSession:output_type -> NCloud.NFileStore.NProto.TPingSessionResponse
	70, // 72: NCloud.NFileStore.NProto.TFileStoreService.SubscribeSession:output_type -> NCloud.NFileStore.NProto.TSubscribeSessionResponse
	71, // 73: NCloud.NFileStore.NProto.TFileStoreService.GetSessionEvents:output_type -> NCloud.NFileStore.NProto.TGetSessionEventsResponse
	71, // 74: NCloud.NFileStore.NProto.TFileStoreService.GetSessionEventsStream:output_type -> NCloud.NFileStore.NProto.TGetSessionEventsResponse
	72, // 75: NCloud.NFileStore.NProto.TFileStoreService.CreateCheckpoint:output_type -> NCloud.NFileStore.NProto.TCreateCheckpointResponse
	73, // 76: NCloud.NFileStore.NProto.TFileStoreService.DestroyCheckpoint:output_type -> NCloud.NFileStore.NProto.TDestroyCheckpointResponse
	74, // 77: NCloud.NFileStore.NProto.TFileStoreService.ResolvePath:output_type -> NCloud.NFileStore.NProto.TResolvePathResponse
	75, // 78: NCloud.NFileStore.NProto.TFileStoreService.CreateNode:output_type -> NCloud.NFileStore.NProto.TCreateNodeResponse
	76, // 79: NCloud.NFileStore.NProto.TFileStoreService.UnlinkNode:output_type -> NCloud.NFileStore.NProto.TUnlinkNodeResponse
	77, // 80: NCloud.NFileStore.NProto.TFileStoreService.RenameNode:output_type -> NCloud.NFileStore.NProto.TRenameNodeResponse
	78, // 81: NCloud.NFileStore.NProto.TFileStoreService.AccessNode:output_type -> NCloud.NFileStore.NProto.TAccessNodeResponse
	79, // 82: NCloud.NFileStore.NProto.TFileStoreService.ReadLink:output_type -> NCloud.NFileStore.NProto.TReadLinkResponse
	80, // 83: NCloud.NFileStore.NProto.TFileStoreService.ListNodes:output_type -> NCloud.NFileStore.NProto.TListNodesResponse
	81, // 84: NCloud.NFileStore.NProto.TFileStoreService.SetNodeAttr:output_type -> NCloud.NFileStore.NProto.TSetNodeAttrResponse
	82, // 85: NCloud.NFileStore.NProto.TFileStoreService.GetNodeAttr:output_type -> NCloud.NFileStore.NProto.TGetNodeAttrResponse
	83, // 86: NCloud.NFileStore.NProto.TFileStoreService.SetNodeXAttr:output_type -> NCloud.NFileStore.NProto.TSetNodeXAttrResponse
	84, // 87: NCloud.NFileStore.NProto.TFileStoreService.GetNodeXAttr:output_type -> NCloud.NFileStore.NProto.TGetNodeXAttrResponse
	85, // 88: NCloud.NFileStore.NProto.TFileStoreService.ListNodeXAttr:output_type -> NCloud.NFileStore.NProto.TListNodeXAttrResponse
	86, // 89: NCloud.NFileStore.NProto.TFileStoreService.RemoveNodeXAttr:output_type -> NCloud.NFileStore.NProto.TRemoveNodeXAttrResponse
	87, // 90: NCloud.NFileStore.NProto.TFileStoreService.CreateHandle:output_type -> NCloud.NFileStore.NProto.TCreateHandleResponse
	88, // 91: NCloud.NFileStore.NProto.TFileStoreService.DestroyHandle:output_type -> NCloud.NFileStore.NProto.TDestroyHandleResponse
	89, // 92: NCloud.NFileStore.NProto.TFileStoreService.ReadData:output_type -> NCloud.NFileStore.NProto.TReadDataResponse
	90, // 93: NCloud.NFileStore.NProto.TFileStoreService.WriteData:output_type -> NCloud.NFileStore.NProto.TWriteDataResponse
	91, // 94: NCloud.NFileStore.NProto.TFileStoreService.AllocateData:output_type -> NCloud.NFileStore.NProto.TAllocateDataResponse
	92, // 95: NCloud.NFileStore.NProto.TFileStoreService.AcquireLock:output_type -> NCloud.NFileStore.NProto.TAcquireLockResponse
	93, // 96: NCloud.NFileStore.NProto.TFileStoreService.ReleaseLock:output_type -> NCloud.NFileStore.NProto.TReleaseLockResponse
	94, // 97: NCloud.NFileStore.NProto.TFileStoreService.TestLock:output_type -> NCloud.NFileStore.NProto.TTestLockResponse
	95, // 98: NCloud.NFileStore.NProto.TFileStoreService.ExecuteAction:output_type -> NCloud.NFileStore.NProto.TExecuteActionResponse
	96, // 99: NCloud.NFileStore.NProto.TEndpointManagerService.StartEndpoint:output_type -> NCloud.NFileStore.NProto.TStartEndpointResponse
	97, // 100: NCloud.NFileStore.NProto.TEndpointManagerService.StopEndpoint:output_type -> NCloud.NFileStore.NProto.TStopEndpointResponse
	98, // 101: NCloud.NFileStore.NProto.TEndpointManagerService.ListEndpoints:output_type -> NCloud.NFileStore.NProto.TListEndpointsResponse
	99, // 102: NCloud.NFileStore.NProto.TEndpointManagerService.KickEndpoint:output_type -> NCloud.NFileStore.NProto.TKickEndpointResponse
	50, // 103: NCloud.NFileStore.NProto.TEndpointManagerService.Ping:output_type -> NCloud.NFileStore.NProto.TPingResponse
	52, // [52:104] is the sub-list for method output_type
	0,  // [0:52] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_cloud_filestore_public_api_grpc_service_proto_init() }
func file_cloud_filestore_public_api_grpc_service_proto_init() {
	if File_cloud_filestore_public_api_grpc_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_filestore_public_api_grpc_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_cloud_filestore_public_api_grpc_service_proto_goTypes,
		DependencyIndexes: file_cloud_filestore_public_api_grpc_service_proto_depIdxs,
	}.Build()
	File_cloud_filestore_public_api_grpc_service_proto = out.File
	file_cloud_filestore_public_api_grpc_service_proto_rawDesc = nil
	file_cloud_filestore_public_api_grpc_service_proto_goTypes = nil
	file_cloud_filestore_public_api_grpc_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TFileStoreServiceClient is the client API for TFileStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TFileStoreServiceClient interface {
	Ping(ctx context.Context, in *protos.TPingRequest, opts ...grpc.CallOption) (*protos.TPingResponse, error)
	CreateFileStore(ctx context.Context, in *protos.TCreateFileStoreRequest, opts ...grpc.CallOption) (*protos.TCreateFileStoreResponse, error)
	DestroyFileStore(ctx context.Context, in *protos.TDestroyFileStoreRequest, opts ...grpc.CallOption) (*protos.TDestroyFileStoreResponse, error)
	GetFileStoreInfo(ctx context.Context, in *protos.TGetFileStoreInfoRequest, opts ...grpc.CallOption) (*protos.TGetFileStoreInfoResponse, error)
	ListFileStores(ctx context.Context, in *protos.TListFileStoresRequest, opts ...grpc.CallOption) (*protos.TListFileStoresResponse, error)
	AlterFileStore(ctx context.Context, in *protos.TAlterFileStoreRequest, opts ...grpc.CallOption) (*protos.TAlterFileStoreResponse, error)
	ResizeFileStore(ctx context.Context, in *protos.TResizeFileStoreRequest, opts ...grpc.CallOption) (*protos.TResizeFileStoreResponse, error)
	DescribeFileStoreModel(ctx context.Context, in *protos.TDescribeFileStoreModelRequest, opts ...grpc.CallOption) (*protos.TDescribeFileStoreModelResponse, error)
	StatFileStore(ctx context.Context, in *protos.TStatFileStoreRequest, opts ...grpc.CallOption) (*protos.TStatFileStoreResponse, error)
	AddClusterNode(ctx context.Context, in *protos.TAddClusterNodeRequest, opts ...grpc.CallOption) (*protos.TAddClusterNodeResponse, error)
	RemoveClusterNode(ctx context.Context, in *protos.TRemoveClusterNodeRequest, opts ...grpc.CallOption) (*protos.TRemoveClusterNodeResponse, error)
	ListClusterNodes(ctx context.Context, in *protos.TListClusterNodesRequest, opts ...grpc.CallOption) (*protos.TListClusterNodesResponse, error)
	AddClusterClients(ctx context.Context, in *protos.TAddClusterClientsRequest, opts ...grpc.CallOption) (*protos.TAddClusterClientsResponse, error)
	RemoveClusterClients(ctx context.Context, in *protos.TRemoveClusterClientsRequest, opts ...grpc.CallOption) (*protos.TRemoveClusterClientsResponse, error)
	ListClusterClients(ctx context.Context, in *protos.TListClusterClientsRequest, opts ...grpc.CallOption) (*protos.TListClusterClientsResponse, error)
	UpdateCluster(ctx context.Context, in *protos.TUpdateClusterRequest, opts ...grpc.CallOption) (*protos.TUpdateClusterResponse, error)
	CreateSession(ctx context.Context, in *protos.TCreateSessionRequest, opts ...grpc.CallOption) (*protos.TCreateSessionResponse, error)
	DestroySession(ctx context.Context, in *protos.TDestroySessionRequest, opts ...grpc.CallOption) (*protos.TDestroySessionResponse, error)
	ResetSession(ctx context.Context, in *protos.TResetSessionRequest, opts ...grpc.CallOption) (*protos.TResetSessionResponse, error)
	PingSession(ctx context.Context, in *protos.TPingSessionRequest, opts ...grpc.CallOption) (*protos.TPingSessionResponse, error)
	SubscribeSession(ctx context.Context, in *protos.TSubscribeSessionRequest, opts ...grpc.CallOption) (*protos.TSubscribeSessionResponse, error)
	GetSessionEvents(ctx context.Context, in *protos.TGetSessionEventsRequest, opts ...grpc.CallOption) (*protos.TGetSessionEventsResponse, error)
	GetSessionEventsStream(ctx context.Context, in *protos.TGetSessionEventsRequest, opts ...grpc.CallOption) (TFileStoreService_GetSessionEventsStreamClient, error)
	CreateCheckpoint(ctx context.Context, in *protos.TCreateCheckpointRequest, opts ...grpc.CallOption) (*protos.TCreateCheckpointResponse, error)
	DestroyCheckpoint(ctx context.Context, in *protos.TDestroyCheckpointRequest, opts ...grpc.CallOption) (*protos.TDestroyCheckpointResponse, error)
	ResolvePath(ctx context.Context, in *protos.TResolvePathRequest, opts ...grpc.CallOption) (*protos.TResolvePathResponse, error)
	CreateNode(ctx context.Context, in *protos.TCreateNodeRequest, opts ...grpc.CallOption) (*protos.TCreateNodeResponse, error)
	UnlinkNode(ctx context.Context, in *protos.TUnlinkNodeRequest, opts ...grpc.CallOption) (*protos.TUnlinkNodeResponse, error)
	RenameNode(ctx context.Context, in *protos.TRenameNodeRequest, opts ...grpc.CallOption) (*protos.TRenameNodeResponse, error)
	AccessNode(ctx context.Context, in *protos.TAccessNodeRequest, opts ...grpc.CallOption) (*protos.TAccessNodeResponse, error)
	ReadLink(ctx context.Context, in *protos.TReadLinkRequest, opts ...grpc.CallOption) (*protos.TReadLinkResponse, error)
	ListNodes(ctx context.Context, in *protos.TListNodesRequest, opts ...grpc.CallOption) (*protos.TListNodesResponse, error)
	SetNodeAttr(ctx context.Context, in *protos.TSetNodeAttrRequest, opts ...grpc.CallOption) (*protos.TSetNodeAttrResponse, error)
	GetNodeAttr(ctx context.Context, in *protos.TGetNodeAttrRequest, opts ...grpc.CallOption) (*protos.TGetNodeAttrResponse, error)
	SetNodeXAttr(ctx context.Context, in *protos.TSetNodeXAttrRequest, opts ...grpc.CallOption) (*protos.TSetNodeXAttrResponse, error)
	GetNodeXAttr(ctx context.Context, in *protos.TGetNodeXAttrRequest, opts ...grpc.CallOption) (*protos.TGetNodeXAttrResponse, error)
	ListNodeXAttr(ctx context.Context, in *protos.TListNodeXAttrRequest, opts ...grpc.CallOption) (*protos.TListNodeXAttrResponse, error)
	RemoveNodeXAttr(ctx context.Context, in *protos.TRemoveNodeXAttrRequest, opts ...grpc.CallOption) (*protos.TRemoveNodeXAttrResponse, error)
	CreateHandle(ctx context.Context, in *protos.TCreateHandleRequest, opts ...grpc.CallOption) (*protos.TCreateHandleResponse, error)
	DestroyHandle(ctx context.Context, in *protos.TDestroyHandleRequest, opts ...grpc.CallOption) (*protos.TDestroyHandleResponse, error)
	ReadData(ctx context.Context, in *protos.TReadDataRequest, opts ...grpc.CallOption) (*protos.TReadDataResponse, error)
	WriteData(ctx context.Context, in *protos.TWriteDataRequest, opts ...grpc.CallOption) (*protos.TWriteDataResponse, error)
	AllocateData(ctx context.Context, in *protos.TAllocateDataRequest, opts ...grpc.CallOption) (*protos.TAllocateDataResponse, error)
	AcquireLock(ctx context.Context, in *protos.TAcquireLockRequest, opts ...grpc.CallOption) (*protos.TAcquireLockResponse, error)
	ReleaseLock(ctx context.Context, in *protos.TReleaseLockRequest, opts ...grpc.CallOption) (*protos.TReleaseLockResponse, error)
	TestLock(ctx context.Context, in *protos.TTestLockRequest, opts ...grpc.CallOption) (*protos.TTestLockResponse, error)
	ExecuteAction(ctx context.Context, in *protos.TExecuteActionRequest, opts ...grpc.CallOption) (*protos.TExecuteActionResponse, error)
}

type tFileStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTFileStoreServiceClient(cc grpc.ClientConnInterface) TFileStoreServiceClient {
	return &tFileStoreServiceClient{cc}
}

func (c *tFileStoreServiceClient) Ping(ctx context.Context, in *protos.TPingRequest, opts ...grpc.CallOption) (*protos.TPingResponse, error) {
	out := new(protos.TPingResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) CreateFileStore(ctx context.Context, in *protos.TCreateFileStoreRequest, opts ...grpc.CallOption) (*protos.TCreateFileStoreResponse, error) {
	out := new(protos.TCreateFileStoreResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/CreateFileStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) DestroyFileStore(ctx context.Context, in *protos.TDestroyFileStoreRequest, opts ...grpc.CallOption) (*protos.TDestroyFileStoreResponse, error) {
	out := new(protos.TDestroyFileStoreResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/DestroyFileStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) GetFileStoreInfo(ctx context.Context, in *protos.TGetFileStoreInfoRequest, opts ...grpc.CallOption) (*protos.TGetFileStoreInfoResponse, error) {
	out := new(protos.TGetFileStoreInfoResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/GetFileStoreInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) ListFileStores(ctx context.Context, in *protos.TListFileStoresRequest, opts ...grpc.CallOption) (*protos.TListFileStoresResponse, error) {
	out := new(protos.TListFileStoresResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/ListFileStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) AlterFileStore(ctx context.Context, in *protos.TAlterFileStoreRequest, opts ...grpc.CallOption) (*protos.TAlterFileStoreResponse, error) {
	out := new(protos.TAlterFileStoreResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/AlterFileStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) ResizeFileStore(ctx context.Context, in *protos.TResizeFileStoreRequest, opts ...grpc.CallOption) (*protos.TResizeFileStoreResponse, error) {
	out := new(protos.TResizeFileStoreResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/ResizeFileStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) DescribeFileStoreModel(ctx context.Context, in *protos.TDescribeFileStoreModelRequest, opts ...grpc.CallOption) (*protos.TDescribeFileStoreModelResponse, error) {
	out := new(protos.TDescribeFileStoreModelResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/DescribeFileStoreModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) StatFileStore(ctx context.Context, in *protos.TStatFileStoreRequest, opts ...grpc.CallOption) (*protos.TStatFileStoreResponse, error) {
	out := new(protos.TStatFileStoreResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/StatFileStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) AddClusterNode(ctx context.Context, in *protos.TAddClusterNodeRequest, opts ...grpc.CallOption) (*protos.TAddClusterNodeResponse, error) {
	out := new(protos.TAddClusterNodeResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/AddClusterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) RemoveClusterNode(ctx context.Context, in *protos.TRemoveClusterNodeRequest, opts ...grpc.CallOption) (*protos.TRemoveClusterNodeResponse, error) {
	out := new(protos.TRemoveClusterNodeResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/RemoveClusterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) ListClusterNodes(ctx context.Context, in *protos.TListClusterNodesRequest, opts ...grpc.CallOption) (*protos.TListClusterNodesResponse, error) {
	out := new(protos.TListClusterNodesResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/ListClusterNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) AddClusterClients(ctx context.Context, in *protos.TAddClusterClientsRequest, opts ...grpc.CallOption) (*protos.TAddClusterClientsResponse, error) {
	out := new(protos.TAddClusterClientsResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/AddClusterClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) RemoveClusterClients(ctx context.Context, in *protos.TRemoveClusterClientsRequest, opts ...grpc.CallOption) (*protos.TRemoveClusterClientsResponse, error) {
	out := new(protos.TRemoveClusterClientsResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/RemoveClusterClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) ListClusterClients(ctx context.Context, in *protos.TListClusterClientsRequest, opts ...grpc.CallOption) (*protos.TListClusterClientsResponse, error) {
	out := new(protos.TListClusterClientsResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/ListClusterClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) UpdateCluster(ctx context.Context, in *protos.TUpdateClusterRequest, opts ...grpc.CallOption) (*protos.TUpdateClusterResponse, error) {
	out := new(protos.TUpdateClusterResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/UpdateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) CreateSession(ctx context.Context, in *protos.TCreateSessionRequest, opts ...grpc.CallOption) (*protos.TCreateSessionResponse, error) {
	out := new(protos.TCreateSessionResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) DestroySession(ctx context.Context, in *protos.TDestroySessionRequest, opts ...grpc.CallOption) (*protos.TDestroySessionResponse, error) {
	out := new(protos.TDestroySessionResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/DestroySession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) ResetSession(ctx context.Context, in *protos.TResetSessionRequest, opts ...grpc.CallOption) (*protos.TResetSessionResponse, error) {
	out := new(protos.TResetSessionResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/ResetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) PingSession(ctx context.Context, in *protos.TPingSessionRequest, opts ...grpc.CallOption) (*protos.TPingSessionResponse, error) {
	out := new(protos.TPingSessionResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/PingSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) SubscribeSession(ctx context.Context, in *protos.TSubscribeSessionRequest, opts ...grpc.CallOption) (*protos.TSubscribeSessionResponse, error) {
	out := new(protos.TSubscribeSessionResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/SubscribeSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) GetSessionEvents(ctx context.Context, in *protos.TGetSessionEventsRequest, opts ...grpc.CallOption) (*protos.TGetSessionEventsResponse, error) {
	out := new(protos.TGetSessionEventsResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/GetSessionEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) GetSessionEventsStream(ctx context.Context, in *protos.TGetSessionEventsRequest, opts ...grpc.CallOption) (TFileStoreService_GetSessionEventsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TFileStoreService_serviceDesc.Streams[0], "/NCloud.NFileStore.NProto.TFileStoreService/GetSessionEventsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &tFileStoreServiceGetSessionEventsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TFileStoreService_GetSessionEventsStreamClient interface {
	Recv() (*protos.TGetSessionEventsResponse, error)
	grpc.ClientStream
}

type tFileStoreServiceGetSessionEventsStreamClient struct {
	grpc.ClientStream
}

func (x *tFileStoreServiceGetSessionEventsStreamClient) Recv() (*protos.TGetSessionEventsResponse, error) {
	m := new(protos.TGetSessionEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tFileStoreServiceClient) CreateCheckpoint(ctx context.Context, in *protos.TCreateCheckpointRequest, opts ...grpc.CallOption) (*protos.TCreateCheckpointResponse, error) {
	out := new(protos.TCreateCheckpointResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/CreateCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) DestroyCheckpoint(ctx context.Context, in *protos.TDestroyCheckpointRequest, opts ...grpc.CallOption) (*protos.TDestroyCheckpointResponse, error) {
	out := new(protos.TDestroyCheckpointResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/DestroyCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) ResolvePath(ctx context.Context, in *protos.TResolvePathRequest, opts ...grpc.CallOption) (*protos.TResolvePathResponse, error) {
	out := new(protos.TResolvePathResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/ResolvePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) CreateNode(ctx context.Context, in *protos.TCreateNodeRequest, opts ...grpc.CallOption) (*protos.TCreateNodeResponse, error) {
	out := new(protos.TCreateNodeResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/CreateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) UnlinkNode(ctx context.Context, in *protos.TUnlinkNodeRequest, opts ...grpc.CallOption) (*protos.TUnlinkNodeResponse, error) {
	out := new(protos.TUnlinkNodeResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/UnlinkNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) RenameNode(ctx context.Context, in *protos.TRenameNodeRequest, opts ...grpc.CallOption) (*protos.TRenameNodeResponse, error) {
	out := new(protos.TRenameNodeResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/RenameNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) AccessNode(ctx context.Context, in *protos.TAccessNodeRequest, opts ...grpc.CallOption) (*protos.TAccessNodeResponse, error) {
	out := new(protos.TAccessNodeResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/AccessNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) ReadLink(ctx context.Context, in *protos.TReadLinkRequest, opts ...grpc.CallOption) (*protos.TReadLinkResponse, error) {
	out := new(protos.TReadLinkResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/ReadLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) ListNodes(ctx context.Context, in *protos.TListNodesRequest, opts ...grpc.CallOption) (*protos.TListNodesResponse, error) {
	out := new(protos.TListNodesResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) SetNodeAttr(ctx context.Context, in *protos.TSetNodeAttrRequest, opts ...grpc.CallOption) (*protos.TSetNodeAttrResponse, error) {
	out := new(protos.TSetNodeAttrResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/SetNodeAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) GetNodeAttr(ctx context.Context, in *protos.TGetNodeAttrRequest, opts ...grpc.CallOption) (*protos.TGetNodeAttrResponse, error) {
	out := new(protos.TGetNodeAttrResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/GetNodeAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) SetNodeXAttr(ctx context.Context, in *protos.TSetNodeXAttrRequest, opts ...grpc.CallOption) (*protos.TSetNodeXAttrResponse, error) {
	out := new(protos.TSetNodeXAttrResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/SetNodeXAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) GetNodeXAttr(ctx context.Context, in *protos.TGetNodeXAttrRequest, opts ...grpc.CallOption) (*protos.TGetNodeXAttrResponse, error) {
	out := new(protos.TGetNodeXAttrResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/GetNodeXAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) ListNodeXAttr(ctx context.Context, in *protos.TListNodeXAttrRequest, opts ...grpc.CallOption) (*protos.TListNodeXAttrResponse, error) {
	out := new(protos.TListNodeXAttrResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/ListNodeXAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) RemoveNodeXAttr(ctx context.Context, in *protos.TRemoveNodeXAttrRequest, opts ...grpc.CallOption) (*protos.TRemoveNodeXAttrResponse, error) {
	out := new(protos.TRemoveNodeXAttrResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/RemoveNodeXAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) CreateHandle(ctx context.Context, in *protos.TCreateHandleRequest, opts ...grpc.CallOption) (*protos.TCreateHandleResponse, error) {
	out := new(protos.TCreateHandleResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/CreateHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) DestroyHandle(ctx context.Context, in *protos.TDestroyHandleRequest, opts ...grpc.CallOption) (*protos.TDestroyHandleResponse, error) {
	out := new(protos.TDestroyHandleResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/DestroyHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) ReadData(ctx context.Context, in *protos.TReadDataRequest, opts ...grpc.CallOption) (*protos.TReadDataResponse, error) {
	out := new(protos.TReadDataResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/ReadData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) WriteData(ctx context.Context, in *protos.TWriteDataRequest, opts ...grpc.CallOption) (*protos.TWriteDataResponse, error) {
	out := new(protos.TWriteDataResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/WriteData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) AllocateData(ctx context.Context, in *protos.TAllocateDataRequest, opts ...grpc.CallOption) (*protos.TAllocateDataResponse, error) {
	out := new(protos.TAllocateDataResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/AllocateData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) AcquireLock(ctx context.Context, in *protos.TAcquireLockRequest, opts ...grpc.CallOption) (*protos.TAcquireLockResponse, error) {
	out := new(protos.TAcquireLockResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/AcquireLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) ReleaseLock(ctx context.Context, in *protos.TReleaseLockRequest, opts ...grpc.CallOption) (*protos.TReleaseLockResponse, error) {
	out := new(protos.TReleaseLockResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/ReleaseLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) TestLock(ctx context.Context, in *protos.TTestLockRequest, opts ...grpc.CallOption) (*protos.TTestLockResponse, error) {
	out := new(protos.TTestLockResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/TestLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFileStoreServiceClient) ExecuteAction(ctx context.Context, in *protos.TExecuteActionRequest, opts ...grpc.CallOption) (*protos.TExecuteActionResponse, error) {
	out := new(protos.TExecuteActionResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TFileStoreService/ExecuteAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TFileStoreServiceServer is the server API for TFileStoreService service.
type TFileStoreServiceServer interface {
	Ping(context.Context, *protos.TPingRequest) (*protos.TPingResponse, error)
	CreateFileStore(context.Context, *protos.TCreateFileStoreRequest) (*protos.TCreateFileStoreResponse, error)
	DestroyFileStore(context.Context, *protos.TDestroyFileStoreRequest) (*protos.TDestroyFileStoreResponse, error)
	GetFileStoreInfo(context.Context, *protos.TGetFileStoreInfoRequest) (*protos.TGetFileStoreInfoResponse, error)
	ListFileStores(context.Context, *protos.TListFileStoresRequest) (*protos.TListFileStoresResponse, error)
	AlterFileStore(context.Context, *protos.TAlterFileStoreRequest) (*protos.TAlterFileStoreResponse, error)
	ResizeFileStore(context.Context, *protos.TResizeFileStoreRequest) (*protos.TResizeFileStoreResponse, error)
	DescribeFileStoreModel(context.Context, *protos.TDescribeFileStoreModelRequest) (*protos.TDescribeFileStoreModelResponse, error)
	StatFileStore(context.Context, *protos.TStatFileStoreRequest) (*protos.TStatFileStoreResponse, error)
	AddClusterNode(context.Context, *protos.TAddClusterNodeRequest) (*protos.TAddClusterNodeResponse, error)
	RemoveClusterNode(context.Context, *protos.TRemoveClusterNodeRequest) (*protos.TRemoveClusterNodeResponse, error)
	ListClusterNodes(context.Context, *protos.TListClusterNodesRequest) (*protos.TListClusterNodesResponse, error)
	AddClusterClients(context.Context, *protos.TAddClusterClientsRequest) (*protos.TAddClusterClientsResponse, error)
	RemoveClusterClients(context.Context, *protos.TRemoveClusterClientsRequest) (*protos.TRemoveClusterClientsResponse, error)
	ListClusterClients(context.Context, *protos.TListClusterClientsRequest) (*protos.TListClusterClientsResponse, error)
	UpdateCluster(context.Context, *protos.TUpdateClusterRequest) (*protos.TUpdateClusterResponse, error)
	CreateSession(context.Context, *protos.TCreateSessionRequest) (*protos.TCreateSessionResponse, error)
	DestroySession(context.Context, *protos.TDestroySessionRequest) (*protos.TDestroySessionResponse, error)
	ResetSession(context.Context, *protos.TResetSessionRequest) (*protos.TResetSessionResponse, error)
	PingSession(context.Context, *protos.TPingSessionRequest) (*protos.TPingSessionResponse, error)
	SubscribeSession(context.Context, *protos.TSubscribeSessionRequest) (*protos.TSubscribeSessionResponse, error)
	GetSessionEvents(context.Context, *protos.TGetSessionEventsRequest) (*protos.TGetSessionEventsResponse, error)
	GetSessionEventsStream(*protos.TGetSessionEventsRequest, TFileStoreService_GetSessionEventsStreamServer) error
	CreateCheckpoint(context.Context, *protos.TCreateCheckpointRequest) (*protos.TCreateCheckpointResponse, error)
	DestroyCheckpoint(context.Context, *protos.TDestroyCheckpointRequest) (*protos.TDestroyCheckpointResponse, error)
	ResolvePath(context.Context, *protos.TResolvePathRequest) (*protos.TResolvePathResponse, error)
	CreateNode(context.Context, *protos.TCreateNodeRequest) (*protos.TCreateNodeResponse, error)
	UnlinkNode(context.Context, *protos.TUnlinkNodeRequest) (*protos.TUnlinkNodeResponse, error)
	RenameNode(context.Context, *protos.TRenameNodeRequest) (*protos.TRenameNodeResponse, error)
	AccessNode(context.Context, *protos.TAccessNodeRequest) (*protos.TAccessNodeResponse, error)
	ReadLink(context.Context, *protos.TReadLinkRequest) (*protos.TReadLinkResponse, error)
	ListNodes(context.Context, *protos.TListNodesRequest) (*protos.TListNodesResponse, error)
	SetNodeAttr(context.Context, *protos.TSetNodeAttrRequest) (*protos.TSetNodeAttrResponse, error)
	GetNodeAttr(context.Context, *protos.TGetNodeAttrRequest) (*protos.TGetNodeAttrResponse, error)
	SetNodeXAttr(context.Context, *protos.TSetNodeXAttrRequest) (*protos.TSetNodeXAttrResponse, error)
	GetNodeXAttr(context.Context, *protos.TGetNodeXAttrRequest) (*protos.TGetNodeXAttrResponse, error)
	ListNodeXAttr(context.Context, *protos.TListNodeXAttrRequest) (*protos.TListNodeXAttrResponse, error)
	RemoveNodeXAttr(context.Context, *protos.TRemoveNodeXAttrRequest) (*protos.TRemoveNodeXAttrResponse, error)
	CreateHandle(context.Context, *protos.TCreateHandleRequest) (*protos.TCreateHandleResponse, error)
	DestroyHandle(context.Context, *protos.TDestroyHandleRequest) (*protos.TDestroyHandleResponse, error)
	ReadData(context.Context, *protos.TReadDataRequest) (*protos.TReadDataResponse, error)
	WriteData(context.Context, *protos.TWriteDataRequest) (*protos.TWriteDataResponse, error)
	AllocateData(context.Context, *protos.TAllocateDataRequest) (*protos.TAllocateDataResponse, error)
	AcquireLock(context.Context, *protos.TAcquireLockRequest) (*protos.TAcquireLockResponse, error)
	ReleaseLock(context.Context, *protos.TReleaseLockRequest) (*protos.TReleaseLockResponse, error)
	TestLock(context.Context, *protos.TTestLockRequest) (*protos.TTestLockResponse, error)
	ExecuteAction(context.Context, *protos.TExecuteActionRequest) (*protos.TExecuteActionResponse, error)
}

// UnimplementedTFileStoreServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTFileStoreServiceServer struct {
}

func (*UnimplementedTFileStoreServiceServer) Ping(context.Context, *protos.TPingRequest) (*protos.TPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedTFileStoreServiceServer) CreateFileStore(context.Context, *protos.TCreateFileStoreRequest) (*protos.TCreateFileStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFileStore not implemented")
}
func (*UnimplementedTFileStoreServiceServer) DestroyFileStore(context.Context, *protos.TDestroyFileStoreRequest) (*protos.TDestroyFileStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyFileStore not implemented")
}
func (*UnimplementedTFileStoreServiceServer) GetFileStoreInfo(context.Context, *protos.TGetFileStoreInfoRequest) (*protos.TGetFileStoreInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileStoreInfo not implemented")
}
func (*UnimplementedTFileStoreServiceServer) ListFileStores(context.Context, *protos.TListFileStoresRequest) (*protos.TListFileStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFileStores not implemented")
}
func (*UnimplementedTFileStoreServiceServer) AlterFileStore(context.Context, *protos.TAlterFileStoreRequest) (*protos.TAlterFileStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterFileStore not implemented")
}
func (*UnimplementedTFileStoreServiceServer) ResizeFileStore(context.Context, *protos.TResizeFileStoreRequest) (*protos.TResizeFileStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizeFileStore not implemented")
}
func (*UnimplementedTFileStoreServiceServer) DescribeFileStoreModel(context.Context, *protos.TDescribeFileStoreModelRequest) (*protos.TDescribeFileStoreModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeFileStoreModel not implemented")
}
func (*UnimplementedTFileStoreServiceServer) StatFileStore(context.Context, *protos.TStatFileStoreRequest) (*protos.TStatFileStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatFileStore not implemented")
}
func (*UnimplementedTFileStoreServiceServer) AddClusterNode(context.Context, *protos.TAddClusterNodeRequest) (*protos.TAddClusterNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClusterNode not implemented")
}
func (*UnimplementedTFileStoreServiceServer) RemoveClusterNode(context.Context, *protos.TRemoveClusterNodeRequest) (*protos.TRemoveClusterNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveClusterNode not implemented")
}
func (*UnimplementedTFileStoreServiceServer) ListClusterNodes(context.Context, *protos.TListClusterNodesRequest) (*protos.TListClusterNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterNodes not implemented")
}
func (*UnimplementedTFileStoreServiceServer) AddClusterClients(context.Context, *protos.TAddClusterClientsRequest) (*protos.TAddClusterClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClusterClients not implemented")
}
func (*UnimplementedTFileStoreServiceServer) RemoveClusterClients(context.Context, *protos.TRemoveClusterClientsRequest) (*protos.TRemoveClusterClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveClusterClients not implemented")
}
func (*UnimplementedTFileStoreServiceServer) ListClusterClients(context.Context, *protos.TListClusterClientsRequest) (*protos.TListClusterClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterClients not implemented")
}
func (*UnimplementedTFileStoreServiceServer) UpdateCluster(context.Context, *protos.TUpdateClusterRequest) (*protos.TUpdateClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCluster not implemented")
}
func (*UnimplementedTFileStoreServiceServer) CreateSession(context.Context, *protos.TCreateSessionRequest) (*protos.TCreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (*UnimplementedTFileStoreServiceServer) DestroySession(context.Context, *protos.TDestroySessionRequest) (*protos.TDestroySessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroySession not implemented")
}
func (*UnimplementedTFileStoreServiceServer) ResetSession(context.Context, *protos.TResetSessionRequest) (*protos.TResetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetSession not implemented")
}
func (*UnimplementedTFileStoreServiceServer) PingSession(context.Context, *protos.TPingSessionRequest) (*protos.TPingSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingSession not implemented")
}
func (*UnimplementedTFileStoreServiceServer) SubscribeSession(context.Context, *protos.TSubscribeSessionRequest) (*protos.TSubscribeSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeSession not implemented")
}
func (*UnimplementedTFileStoreServiceServer) GetSessionEvents(context.Context, *protos.TGetSessionEventsRequest) (*protos.TGetSessionEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionEvents not implemented")
}
func (*UnimplementedTFileStoreServiceServer) GetSessionEventsStream(*protos.TGetSessionEventsRequest, TFileStoreService_GetSessionEventsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSessionEventsStream not implemented")
}
func (*UnimplementedTFileStoreServiceServer) CreateCheckpoint(context.Context, *protos.TCreateCheckpointRequest) (*protos.TCreateCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCheckpoint not implemented")
}
func (*UnimplementedTFileStoreServiceServer) DestroyCheckpoint(context.Context, *protos.TDestroyCheckpointRequest) (*protos.TDestroyCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyCheckpoint not implemented")
}
func (*UnimplementedTFileStoreServiceServer) ResolvePath(context.Context, *protos.TResolvePathRequest) (*protos.TResolvePathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolvePath not implemented")
}
func (*UnimplementedTFileStoreServiceServer) CreateNode(context.Context, *protos.TCreateNodeRequest) (*protos.TCreateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (*UnimplementedTFileStoreServiceServer) UnlinkNode(context.Context, *protos.TUnlinkNodeRequest) (*protos.TUnlinkNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkNode not implemented")
}
func (*UnimplementedTFileStoreServiceServer) RenameNode(context.Context, *protos.TRenameNodeRequest) (*protos.TRenameNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameNode not implemented")
}
func (*UnimplementedTFileStoreServiceServer) AccessNode(context.Context, *protos.TAccessNodeRequest) (*protos.TAccessNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessNode not implemented")
}
func (*UnimplementedTFileStoreServiceServer) ReadLink(context.Context, *protos.TReadLinkRequest) (*protos.TReadLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadLink not implemented")
}
func (*UnimplementedTFileStoreServiceServer) ListNodes(context.Context, *protos.TListNodesRequest) (*protos.TListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (*UnimplementedTFileStoreServiceServer) SetNodeAttr(context.Context, *protos.TSetNodeAttrRequest) (*protos.TSetNodeAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNodeAttr not implemented")
}
func (*UnimplementedTFileStoreServiceServer) GetNodeAttr(context.Context, *protos.TGetNodeAttrRequest) (*protos.TGetNodeAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeAttr not implemented")
}
func (*UnimplementedTFileStoreServiceServer) SetNodeXAttr(context.Context, *protos.TSetNodeXAttrRequest) (*protos.TSetNodeXAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNodeXAttr not implemented")
}
func (*UnimplementedTFileStoreServiceServer) GetNodeXAttr(context.Context, *protos.TGetNodeXAttrRequest) (*protos.TGetNodeXAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeXAttr not implemented")
}
func (*UnimplementedTFileStoreServiceServer) ListNodeXAttr(context.Context, *protos.TListNodeXAttrRequest) (*protos.TListNodeXAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeXAttr not implemented")
}
func (*UnimplementedTFileStoreServiceServer) RemoveNodeXAttr(context.Context, *protos.TRemoveNodeXAttrRequest) (*protos.TRemoveNodeXAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNodeXAttr not implemented")
}
func (*UnimplementedTFileStoreServiceServer) CreateHandle(context.Context, *protos.TCreateHandleRequest) (*protos.TCreateHandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHandle not implemented")
}
func (*UnimplementedTFileStoreServiceServer) DestroyHandle(context.Context, *protos.TDestroyHandleRequest) (*protos.TDestroyHandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyHandle not implemented")
}
func (*UnimplementedTFileStoreServiceServer) ReadData(context.Context, *protos.TReadDataRequest) (*protos.TReadDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadData not implemented")
}
func (*UnimplementedTFileStoreServiceServer) WriteData(context.Context, *protos.TWriteDataRequest) (*protos.TWriteDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteData not implemented")
}
func (*UnimplementedTFileStoreServiceServer) AllocateData(context.Context, *protos.TAllocateDataRequest) (*protos.TAllocateDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateData not implemented")
}
func (*UnimplementedTFileStoreServiceServer) AcquireLock(context.Context, *protos.TAcquireLockRequest) (*protos.TAcquireLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireLock not implemented")
}
func (*UnimplementedTFileStoreServiceServer) ReleaseLock(context.Context, *protos.TReleaseLockRequest) (*protos.TReleaseLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseLock not implemented")
}
func (*UnimplementedTFileStoreServiceServer) TestLock(context.Context, *protos.TTestLockRequest) (*protos.TTestLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestLock not implemented")
}
func (*UnimplementedTFileStoreServiceServer) ExecuteAction(context.Context, *protos.TExecuteActionRequest) (*protos.TExecuteActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAction not implemented")
}

func RegisterTFileStoreServiceServer(s *grpc.Server, srv TFileStoreServiceServer) {
	s.RegisterService(&_TFileStoreService_serviceDesc, srv)
}

func _TFileStoreService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).Ping(ctx, req.(*protos.TPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_CreateFileStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TCreateFileStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).CreateFileStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/CreateFileStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).CreateFileStore(ctx, req.(*protos.TCreateFileStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_DestroyFileStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TDestroyFileStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).DestroyFileStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/DestroyFileStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).DestroyFileStore(ctx, req.(*protos.TDestroyFileStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_GetFileStoreInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TGetFileStoreInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).GetFileStoreInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/GetFileStoreInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).GetFileStoreInfo(ctx, req.(*protos.TGetFileStoreInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_ListFileStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TListFileStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).ListFileStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/ListFileStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).ListFileStores(ctx, req.(*protos.TListFileStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_AlterFileStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TAlterFileStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).AlterFileStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/AlterFileStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).AlterFileStore(ctx, req.(*protos.TAlterFileStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_ResizeFileStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TResizeFileStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).ResizeFileStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/ResizeFileStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).ResizeFileStore(ctx, req.(*protos.TResizeFileStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_DescribeFileStoreModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TDescribeFileStoreModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).DescribeFileStoreModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/DescribeFileStoreModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).DescribeFileStoreModel(ctx, req.(*protos.TDescribeFileStoreModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_StatFileStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TStatFileStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).StatFileStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/StatFileStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).StatFileStore(ctx, req.(*protos.TStatFileStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_AddClusterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TAddClusterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).AddClusterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/AddClusterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).AddClusterNode(ctx, req.(*protos.TAddClusterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_RemoveClusterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TRemoveClusterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).RemoveClusterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/RemoveClusterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).RemoveClusterNode(ctx, req.(*protos.TRemoveClusterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_ListClusterNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TListClusterNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).ListClusterNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/ListClusterNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).ListClusterNodes(ctx, req.(*protos.TListClusterNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_AddClusterClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TAddClusterClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).AddClusterClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/AddClusterClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).AddClusterClients(ctx, req.(*protos.TAddClusterClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_RemoveClusterClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TRemoveClusterClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).RemoveClusterClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/RemoveClusterClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).RemoveClusterClients(ctx, req.(*protos.TRemoveClusterClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_ListClusterClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TListClusterClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).ListClusterClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/ListClusterClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).ListClusterClients(ctx, req.(*protos.TListClusterClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TUpdateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/UpdateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).UpdateCluster(ctx, req.(*protos.TUpdateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TCreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).CreateSession(ctx, req.(*protos.TCreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_DestroySession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TDestroySessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).DestroySession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/DestroySession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).DestroySession(ctx, req.(*protos.TDestroySessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_ResetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TResetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).ResetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/ResetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).ResetSession(ctx, req.(*protos.TResetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_PingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TPingSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).PingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/PingSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).PingSession(ctx, req.(*protos.TPingSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_SubscribeSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TSubscribeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).SubscribeSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/SubscribeSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).SubscribeSession(ctx, req.(*protos.TSubscribeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_GetSessionEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TGetSessionEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).GetSessionEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/GetSessionEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).GetSessionEvents(ctx, req.(*protos.TGetSessionEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_GetSessionEventsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(protos.TGetSessionEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TFileStoreServiceServer).GetSessionEventsStream(m, &tFileStoreServiceGetSessionEventsStreamServer{stream})
}

type TFileStoreService_GetSessionEventsStreamServer interface {
	Send(*protos.TGetSessionEventsResponse) error
	grpc.ServerStream
}

type tFileStoreServiceGetSessionEventsStreamServer struct {
	grpc.ServerStream
}

func (x *tFileStoreServiceGetSessionEventsStreamServer) Send(m *protos.TGetSessionEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TFileStoreService_CreateCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TCreateCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).CreateCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/CreateCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).CreateCheckpoint(ctx, req.(*protos.TCreateCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_DestroyCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TDestroyCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).DestroyCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/DestroyCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).DestroyCheckpoint(ctx, req.(*protos.TDestroyCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_ResolvePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TResolvePathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).ResolvePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/ResolvePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).ResolvePath(ctx, req.(*protos.TResolvePathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TCreateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/CreateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).CreateNode(ctx, req.(*protos.TCreateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_UnlinkNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TUnlinkNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).UnlinkNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/UnlinkNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).UnlinkNode(ctx, req.(*protos.TUnlinkNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_RenameNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TRenameNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).RenameNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/RenameNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).RenameNode(ctx, req.(*protos.TRenameNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_AccessNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TAccessNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).AccessNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/AccessNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).AccessNode(ctx, req.(*protos.TAccessNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_ReadLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TReadLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).ReadLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/ReadLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).ReadLink(ctx, req.(*protos.TReadLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).ListNodes(ctx, req.(*protos.TListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_SetNodeAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TSetNodeAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).SetNodeAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/SetNodeAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).SetNodeAttr(ctx, req.(*protos.TSetNodeAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_GetNodeAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TGetNodeAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).GetNodeAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/GetNodeAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).GetNodeAttr(ctx, req.(*protos.TGetNodeAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_SetNodeXAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TSetNodeXAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).SetNodeXAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/SetNodeXAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).SetNodeXAttr(ctx, req.(*protos.TSetNodeXAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_GetNodeXAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TGetNodeXAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).GetNodeXAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/GetNodeXAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).GetNodeXAttr(ctx, req.(*protos.TGetNodeXAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_ListNodeXAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TListNodeXAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).ListNodeXAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/ListNodeXAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).ListNodeXAttr(ctx, req.(*protos.TListNodeXAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_RemoveNodeXAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TRemoveNodeXAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).RemoveNodeXAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/RemoveNodeXAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).RemoveNodeXAttr(ctx, req.(*protos.TRemoveNodeXAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_CreateHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TCreateHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).CreateHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/CreateHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).CreateHandle(ctx, req.(*protos.TCreateHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_DestroyHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TDestroyHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).DestroyHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/DestroyHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).DestroyHandle(ctx, req.(*protos.TDestroyHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_ReadData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TReadDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).ReadData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/ReadData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).ReadData(ctx, req.(*protos.TReadDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_WriteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TWriteDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).WriteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/WriteData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).WriteData(ctx, req.(*protos.TWriteDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_AllocateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TAllocateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).AllocateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/AllocateData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).AllocateData(ctx, req.(*protos.TAllocateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_AcquireLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TAcquireLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).AcquireLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/AcquireLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).AcquireLock(ctx, req.(*protos.TAcquireLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_ReleaseLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TReleaseLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).ReleaseLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/ReleaseLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).ReleaseLock(ctx, req.(*protos.TReleaseLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_TestLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TTestLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).TestLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/TestLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).TestLock(ctx, req.(*protos.TTestLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFileStoreService_ExecuteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TExecuteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFileStoreServiceServer).ExecuteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TFileStoreService/ExecuteAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFileStoreServiceServer).ExecuteAction(ctx, req.(*protos.TExecuteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TFileStoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NCloud.NFileStore.NProto.TFileStoreService",
	HandlerType: (*TFileStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _TFileStoreService_Ping_Handler,
		},
		{
			MethodName: "CreateFileStore",
			Handler:    _TFileStoreService_CreateFileStore_Handler,
		},
		{
			MethodName: "DestroyFileStore",
			Handler:    _TFileStoreService_DestroyFileStore_Handler,
		},
		{
			MethodName: "GetFileStoreInfo",
			Handler:    _TFileStoreService_GetFileStoreInfo_Handler,
		},
		{
			MethodName: "ListFileStores",
			Handler:    _TFileStoreService_ListFileStores_Handler,
		},
		{
			MethodName: "AlterFileStore",
			Handler:    _TFileStoreService_AlterFileStore_Handler,
		},
		{
			MethodName: "ResizeFileStore",
			Handler:    _TFileStoreService_ResizeFileStore_Handler,
		},
		{
			MethodName: "DescribeFileStoreModel",
			Handler:    _TFileStoreService_DescribeFileStoreModel_Handler,
		},
		{
			MethodName: "StatFileStore",
			Handler:    _TFileStoreService_StatFileStore_Handler,
		},
		{
			MethodName: "AddClusterNode",
			Handler:    _TFileStoreService_AddClusterNode_Handler,
		},
		{
			MethodName: "RemoveClusterNode",
			Handler:    _TFileStoreService_RemoveClusterNode_Handler,
		},
		{
			MethodName: "ListClusterNodes",
			Handler:    _TFileStoreService_ListClusterNodes_Handler,
		},
		{
			MethodName: "AddClusterClients",
			Handler:    _TFileStoreService_AddClusterClients_Handler,
		},
		{
			MethodName: "RemoveClusterClients",
			Handler:    _TFileStoreService_RemoveClusterClients_Handler,
		},
		{
			MethodName: "ListClusterClients",
			Handler:    _TFileStoreService_ListClusterClients_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _TFileStoreService_UpdateCluster_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _TFileStoreService_CreateSession_Handler,
		},
		{
			MethodName: "DestroySession",
			Handler:    _TFileStoreService_DestroySession_Handler,
		},
		{
			MethodName: "ResetSession",
			Handler:    _TFileStoreService_ResetSession_Handler,
		},
		{
			MethodName: "PingSession",
			Handler:    _TFileStoreService_PingSession_Handler,
		},
		{
			MethodName: "SubscribeSession",
			Handler:    _TFileStoreService_SubscribeSession_Handler,
		},
		{
			MethodName: "GetSessionEvents",
			Handler:    _TFileStoreService_GetSessionEvents_Handler,
		},
		{
			MethodName: "CreateCheckpoint",
			Handler:    _TFileStoreService_CreateCheckpoint_Handler,
		},
		{
			MethodName: "DestroyCheckpoint",
			Handler:    _TFileStoreService_DestroyCheckpoint_Handler,
		},
		{
			MethodName: "ResolvePath",
			Handler:    _TFileStoreService_ResolvePath_Handler,
		},
		{
			MethodName: "CreateNode",
			Handler:    _TFileStoreService_CreateNode_Handler,
		},
		{
			MethodName: "UnlinkNode",
			Handler:    _TFileStoreService_UnlinkNode_Handler,
		},
		{
			MethodName: "RenameNode",
			Handler:    _TFileStoreService_RenameNode_Handler,
		},
		{
			MethodName: "AccessNode",
			Handler:    _TFileStoreService_AccessNode_Handler,
		},
		{
			MethodName: "ReadLink",
			Handler:    _TFileStoreService_ReadLink_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _TFileStoreService_ListNodes_Handler,
		},
		{
			MethodName: "SetNodeAttr",
			Handler:    _TFileStoreService_SetNodeAttr_Handler,
		},
		{
			MethodName: "GetNodeAttr",
			Handler:    _TFileStoreService_GetNodeAttr_Handler,
		},
		{
			MethodName: "SetNodeXAttr",
			Handler:    _TFileStoreService_SetNodeXAttr_Handler,
		},
		{
			MethodName: "GetNodeXAttr",
			Handler:    _TFileStoreService_GetNodeXAttr_Handler,
		},
		{
			MethodName: "ListNodeXAttr",
			Handler:    _TFileStoreService_ListNodeXAttr_Handler,
		},
		{
			MethodName: "RemoveNodeXAttr",
			Handler:    _TFileStoreService_RemoveNodeXAttr_Handler,
		},
		{
			MethodName: "CreateHandle",
			Handler:    _TFileStoreService_CreateHandle_Handler,
		},
		{
			MethodName: "DestroyHandle",
			Handler:    _TFileStoreService_DestroyHandle_Handler,
		},
		{
			MethodName: "ReadData",
			Handler:    _TFileStoreService_ReadData_Handler,
		},
		{
			MethodName: "WriteData",
			Handler:    _TFileStoreService_WriteData_Handler,
		},
		{
			MethodName: "AllocateData",
			Handler:    _TFileStoreService_AllocateData_Handler,
		},
		{
			MethodName: "AcquireLock",
			Handler:    _TFileStoreService_AcquireLock_Handler,
		},
		{
			MethodName: "ReleaseLock",
			Handler:    _TFileStoreService_ReleaseLock_Handler,
		},
		{
			MethodName: "TestLock",
			Handler:    _TFileStoreService_TestLock_Handler,
		},
		{
			MethodName: "ExecuteAction",
			Handler:    _TFileStoreService_ExecuteAction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSessionEventsStream",
			Handler:       _TFileStoreService_GetSessionEventsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloud/filestore/public/api/grpc/service.proto",
}

// TEndpointManagerServiceClient is the client API for TEndpointManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TEndpointManagerServiceClient interface {
	StartEndpoint(ctx context.Context, in *protos.TStartEndpointRequest, opts ...grpc.CallOption) (*protos.TStartEndpointResponse, error)
	StopEndpoint(ctx context.Context, in *protos.TStopEndpointRequest, opts ...grpc.CallOption) (*protos.TStopEndpointResponse, error)
	ListEndpoints(ctx context.Context, in *protos.TListEndpointsRequest, opts ...grpc.CallOption) (*protos.TListEndpointsResponse, error)
	KickEndpoint(ctx context.Context, in *protos.TKickEndpointRequest, opts ...grpc.CallOption) (*protos.TKickEndpointResponse, error)
	Ping(ctx context.Context, in *protos.TPingRequest, opts ...grpc.CallOption) (*protos.TPingResponse, error)
}

type tEndpointManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTEndpointManagerServiceClient(cc grpc.ClientConnInterface) TEndpointManagerServiceClient {
	return &tEndpointManagerServiceClient{cc}
}

func (c *tEndpointManagerServiceClient) StartEndpoint(ctx context.Context, in *protos.TStartEndpointRequest, opts ...grpc.CallOption) (*protos.TStartEndpointResponse, error) {
	out := new(protos.TStartEndpointResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TEndpointManagerService/StartEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tEndpointManagerServiceClient) StopEndpoint(ctx context.Context, in *protos.TStopEndpointRequest, opts ...grpc.CallOption) (*protos.TStopEndpointResponse, error) {
	out := new(protos.TStopEndpointResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TEndpointManagerService/StopEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tEndpointManagerServiceClient) ListEndpoints(ctx context.Context, in *protos.TListEndpointsRequest, opts ...grpc.CallOption) (*protos.TListEndpointsResponse, error) {
	out := new(protos.TListEndpointsResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TEndpointManagerService/ListEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tEndpointManagerServiceClient) KickEndpoint(ctx context.Context, in *protos.TKickEndpointRequest, opts ...grpc.CallOption) (*protos.TKickEndpointResponse, error) {
	out := new(protos.TKickEndpointResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TEndpointManagerService/KickEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tEndpointManagerServiceClient) Ping(ctx context.Context, in *protos.TPingRequest, opts ...grpc.CallOption) (*protos.TPingResponse, error) {
	out := new(protos.TPingResponse)
	err := c.cc.Invoke(ctx, "/NCloud.NFileStore.NProto.TEndpointManagerService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TEndpointManagerServiceServer is the server API for TEndpointManagerService service.
type TEndpointManagerServiceServer interface {
	StartEndpoint(context.Context, *protos.TStartEndpointRequest) (*protos.TStartEndpointResponse, error)
	StopEndpoint(context.Context, *protos.TStopEndpointRequest) (*protos.TStopEndpointResponse, error)
	ListEndpoints(context.Context, *protos.TListEndpointsRequest) (*protos.TListEndpointsResponse, error)
	KickEndpoint(context.Context, *protos.TKickEndpointRequest) (*protos.TKickEndpointResponse, error)
	Ping(context.Context, *protos.TPingRequest) (*protos.TPingResponse, error)
}

// UnimplementedTEndpointManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTEndpointManagerServiceServer struct {
}

func (*UnimplementedTEndpointManagerServiceServer) StartEndpoint(context.Context, *protos.TStartEndpointRequest) (*protos.TStartEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartEndpoint not implemented")
}
func (*UnimplementedTEndpointManagerServiceServer) StopEndpoint(context.Context, *protos.TStopEndpointRequest) (*protos.TStopEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopEndpoint not implemented")
}
func (*UnimplementedTEndpointManagerServiceServer) ListEndpoints(context.Context, *protos.TListEndpointsRequest) (*protos.TListEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEndpoints not implemented")
}
func (*UnimplementedTEndpointManagerServiceServer) KickEndpoint(context.Context, *protos.TKickEndpointRequest) (*protos.TKickEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickEndpoint not implemented")
}
func (*UnimplementedTEndpointManagerServiceServer) Ping(context.Context, *protos.TPingRequest) (*protos.TPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterTEndpointManagerServiceServer(s *grpc.Server, srv TEndpointManagerServiceServer) {
	s.RegisterService(&_TEndpointManagerService_serviceDesc, srv)
}

func _TEndpointManagerService_StartEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TStartEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TEndpointManagerServiceServer).StartEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TEndpointManagerService/StartEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TEndpointManagerServiceServer).StartEndpoint(ctx, req.(*protos.TStartEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TEndpointManagerService_StopEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TStopEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TEndpointManagerServiceServer).StopEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TEndpointManagerService/StopEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TEndpointManagerServiceServer).StopEndpoint(ctx, req.(*protos.TStopEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TEndpointManagerService_ListEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TListEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TEndpointManagerServiceServer).ListEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TEndpointManagerService/ListEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TEndpointManagerServiceServer).ListEndpoints(ctx, req.(*protos.TListEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TEndpointManagerService_KickEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TKickEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TEndpointManagerServiceServer).KickEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TEndpointManagerService/KickEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TEndpointManagerServiceServer).KickEndpoint(ctx, req.(*protos.TKickEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TEndpointManagerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.TPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TEndpointManagerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NCloud.NFileStore.NProto.TEndpointManagerService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TEndpointManagerServiceServer).Ping(ctx, req.(*protos.TPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TEndpointManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NCloud.NFileStore.NProto.TEndpointManagerService",
	HandlerType: (*TEndpointManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartEndpoint",
			Handler:    _TEndpointManagerService_StartEndpoint_Handler,
		},
		{
			MethodName: "StopEndpoint",
			Handler:    _TEndpointManagerService_StopEndpoint_Handler,
		},
		{
			MethodName: "ListEndpoints",
			Handler:    _TEndpointManagerService_ListEndpoints_Handler,
		},
		{
			MethodName: "KickEndpoint",
			Handler:    _TEndpointManagerService_KickEndpoint_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _TEndpointManagerService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud/filestore/public/api/grpc/service.proto",
}
