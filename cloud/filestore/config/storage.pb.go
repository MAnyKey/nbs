// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/filestore/config/storage.proto

package config

import (
	protos "github.com/ydb-platform/nbs/cloud/storage/core/protos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TStorageConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Schemeshard directory for tablets.
	SchemeShardDir *string `protobuf:"bytes,1,opt,name=SchemeShardDir" json:"SchemeShardDir,omitempty"`
	// Number of reties before pipe client reports failure.
	PipeClientRetryCount *uint32 `protobuf:"varint,2,opt,name=PipeClientRetryCount" json:"PipeClientRetryCount,omitempty"`
	// Minimum timeout before pipe client reconnect attempt.
	PipeClientMinRetryTime *uint32 `protobuf:"varint,3,opt,name=PipeClientMinRetryTime" json:"PipeClientMinRetryTime,omitempty"`
	// Maximum timeout before pipe client reconnect attempt.
	PipeClientMaxRetryTime *uint32 `protobuf:"varint,4,opt,name=PipeClientMaxRetryTime" json:"PipeClientMaxRetryTime,omitempty"`
	// Timeout before automatically removing session.
	IdleSessionTimeout *uint32 `protobuf:"varint,5,opt,name=IdleSessionTimeout" json:"IdleSessionTimeout,omitempty"`
	// Timeout for establishing session.
	EstablishSessionTimeout *uint32 `protobuf:"varint,6,opt,name=EstablishSessionTimeout" json:"EstablishSessionTimeout,omitempty"`
	// Write batching timeout.
	WriteBatchEnabled *bool `protobuf:"varint,7,opt,name=WriteBatchEnabled" json:"WriteBatchEnabled,omitempty"`
	// Write batching timeout.
	WriteBatchTimeout *uint32 `protobuf:"varint,8,opt,name=WriteBatchTimeout" json:"WriteBatchTimeout,omitempty"`
	// Minimum write request size (in bytes) that lets us write the data
	// directly to blobstorage (as a mixed/merged blob).
	WriteBlobThreshold *uint32 `protobuf:"varint,9,opt,name=WriteBlobThreshold" json:"WriteBlobThreshold,omitempty"`
	// The size of data (in bytes) in the fresh blocks table that triggers
	// flushing.
	FlushThreshold *uint32 `protobuf:"varint,10,opt,name=FlushThreshold" json:"FlushThreshold,omitempty"`
	// Backpressure thresholds.
	CleanupThreshold        *uint32 `protobuf:"varint,11,opt,name=CleanupThreshold" json:"CleanupThreshold,omitempty"`
	CompactionThreshold     *uint32 `protobuf:"varint,12,opt,name=CompactionThreshold" json:"CompactionThreshold,omitempty"`
	CollectGarbageThreshold *uint32 `protobuf:"varint,13,opt,name=CollectGarbageThreshold" json:"CollectGarbageThreshold,omitempty"`
	// The size of data (in bytes) in the fresh bytes table that triggers
	// flushing.
	FlushBytesThreshold *uint32 `protobuf:"varint,14,opt,name=FlushBytesThreshold" json:"FlushBytesThreshold,omitempty"`
	// Size of allocation unit for HDD drives (in GiB).
	AllocationUnitHDD *uint32 `protobuf:"varint,15,opt,name=AllocationUnitHDD" json:"AllocationUnitHDD,omitempty"`
	// Size of allocation unit for SSD drives (in GiB).
	AllocationUnitSSD *uint32 `protobuf:"varint,16,opt,name=AllocationUnitSSD" json:"AllocationUnitSSD,omitempty"`
	// Channel configuration for HDD.
	HDDSystemChannelPoolKind *string `protobuf:"bytes,17,opt,name=HDDSystemChannelPoolKind" json:"HDDSystemChannelPoolKind,omitempty"`
	HDDLogChannelPoolKind    *string `protobuf:"bytes,18,opt,name=HDDLogChannelPoolKind" json:"HDDLogChannelPoolKind,omitempty"`
	HDDIndexChannelPoolKind  *string `protobuf:"bytes,19,opt,name=HDDIndexChannelPoolKind" json:"HDDIndexChannelPoolKind,omitempty"`
	HDDFreshChannelPoolKind  *string `protobuf:"bytes,20,opt,name=HDDFreshChannelPoolKind" json:"HDDFreshChannelPoolKind,omitempty"`
	HDDMixedChannelPoolKind  *string `protobuf:"bytes,21,opt,name=HDDMixedChannelPoolKind" json:"HDDMixedChannelPoolKind,omitempty"`
	// Channel configuration for SSD.
	SSDSystemChannelPoolKind *string `protobuf:"bytes,22,opt,name=SSDSystemChannelPoolKind" json:"SSDSystemChannelPoolKind,omitempty"`
	SSDLogChannelPoolKind    *string `protobuf:"bytes,23,opt,name=SSDLogChannelPoolKind" json:"SSDLogChannelPoolKind,omitempty"`
	SSDIndexChannelPoolKind  *string `protobuf:"bytes,24,opt,name=SSDIndexChannelPoolKind" json:"SSDIndexChannelPoolKind,omitempty"`
	SSDFreshChannelPoolKind  *string `protobuf:"bytes,25,opt,name=SSDFreshChannelPoolKind" json:"SSDFreshChannelPoolKind,omitempty"`
	SSDMixedChannelPoolKind  *string `protobuf:"bytes,26,opt,name=SSDMixedChannelPoolKind" json:"SSDMixedChannelPoolKind,omitempty"`
	// Performance per allocation unit for HDD.
	HDDUnitReadBandwidth  *uint32 `protobuf:"varint,27,opt,name=HDDUnitReadBandwidth" json:"HDDUnitReadBandwidth,omitempty"`   // in MiB/s
	HDDUnitWriteBandwidth *uint32 `protobuf:"varint,28,opt,name=HDDUnitWriteBandwidth" json:"HDDUnitWriteBandwidth,omitempty"` // in MiB/s
	HDDMaxReadBandwidth   *uint32 `protobuf:"varint,29,opt,name=HDDMaxReadBandwidth" json:"HDDMaxReadBandwidth,omitempty"`     // in MiB/s
	HDDMaxWriteBandwidth  *uint32 `protobuf:"varint,30,opt,name=HDDMaxWriteBandwidth" json:"HDDMaxWriteBandwidth,omitempty"`   // in MiB/s
	HDDUnitReadIops       *uint32 `protobuf:"varint,31,opt,name=HDDUnitReadIops" json:"HDDUnitReadIops,omitempty"`
	HDDUnitWriteIops      *uint32 `protobuf:"varint,32,opt,name=HDDUnitWriteIops" json:"HDDUnitWriteIops,omitempty"`
	HDDMaxReadIops        *uint32 `protobuf:"varint,33,opt,name=HDDMaxReadIops" json:"HDDMaxReadIops,omitempty"`
	HDDMaxWriteIops       *uint32 `protobuf:"varint,34,opt,name=HDDMaxWriteIops" json:"HDDMaxWriteIops,omitempty"`
	// Performance per allocation unit for SSD.
	SSDUnitReadBandwidth  *uint32 `protobuf:"varint,35,opt,name=SSDUnitReadBandwidth" json:"SSDUnitReadBandwidth,omitempty"`   // in MiB/s
	SSDUnitWriteBandwidth *uint32 `protobuf:"varint,36,opt,name=SSDUnitWriteBandwidth" json:"SSDUnitWriteBandwidth,omitempty"` // in MiB/s
	SSDMaxReadBandwidth   *uint32 `protobuf:"varint,37,opt,name=SSDMaxReadBandwidth" json:"SSDMaxReadBandwidth,omitempty"`     // in MiB/s
	SSDMaxWriteBandwidth  *uint32 `protobuf:"varint,38,opt,name=SSDMaxWriteBandwidth" json:"SSDMaxWriteBandwidth,omitempty"`   // in MiB/s
	SSDUnitReadIops       *uint32 `protobuf:"varint,39,opt,name=SSDUnitReadIops" json:"SSDUnitReadIops,omitempty"`
	SSDUnitWriteIops      *uint32 `protobuf:"varint,40,opt,name=SSDUnitWriteIops" json:"SSDUnitWriteIops,omitempty"`
	SSDMaxReadIops        *uint32 `protobuf:"varint,41,opt,name=SSDMaxReadIops" json:"SSDMaxReadIops,omitempty"`
	SSDMaxWriteIops       *uint32 `protobuf:"varint,42,opt,name=SSDMaxWriteIops" json:"SSDMaxWriteIops,omitempty"`
	// Minumal channels count for the tablet configuration.
	MinChannelCount *uint32 `protobuf:"varint,43,opt,name=MinChannelCount" json:"MinChannelCount,omitempty"`
	// Maximum number of bytes in response.
	MaxResponseBytes *uint32 `protobuf:"varint,44,opt,name=MaxResponseBytes" json:"MaxResponseBytes,omitempty"`
	// Channel configuration for Hybrid.
	HybridSystemChannelPoolKind *string `protobuf:"bytes,45,opt,name=HybridSystemChannelPoolKind" json:"HybridSystemChannelPoolKind,omitempty"`
	HybridLogChannelPoolKind    *string `protobuf:"bytes,46,opt,name=HybridLogChannelPoolKind" json:"HybridLogChannelPoolKind,omitempty"`
	HybridIndexChannelPoolKind  *string `protobuf:"bytes,47,opt,name=HybridIndexChannelPoolKind" json:"HybridIndexChannelPoolKind,omitempty"`
	HybridFreshChannelPoolKind  *string `protobuf:"bytes,48,opt,name=HybridFreshChannelPoolKind" json:"HybridFreshChannelPoolKind,omitempty"`
	HybridMixedChannelPoolKind  *string `protobuf:"bytes,49,opt,name=HybridMixedChannelPoolKind" json:"HybridMixedChannelPoolKind,omitempty"`
	// Override storage media kind for too slow HDD.
	HDDMediaKindOverride *uint32 `protobuf:"varint,50,opt,name=HDDMediaKindOverride" json:"HDDMediaKindOverride,omitempty"`
	// Nodes limit & ratio for the filesystem.
	DefaultNodesLimit *uint32 `protobuf:"varint,51,opt,name=DefaultNodesLimit" json:"DefaultNodesLimit,omitempty"`
	SizeToNodesRatio  *uint32 `protobuf:"varint,52,opt,name=SizeToNodesRatio" json:"SizeToNodesRatio,omitempty"`
	// Do not allow to start tablets on specific nodes.
	DisableLocalService *bool `protobuf:"varint,53,opt,name=DisableLocalService" json:"DisableLocalService,omitempty"`
	// Number of last request ids kept per session for deduplicate cache.
	DupCacheEntryCount *uint32 `protobuf:"varint,54,opt,name=DupCacheEntryCount" json:"DupCacheEntryCount,omitempty"`
	// Process no more than this number of new/garbage blobs per one
	// DeleteGarbage tx.
	MaxDeleteGarbageBlobsPerTx *uint32 `protobuf:"varint,55,opt,name=MaxDeleteGarbageBlobsPerTx" json:"MaxDeleteGarbageBlobsPerTx,omitempty"`
	// Do run CollectGarbage at start.
	EnableCollectGarbageAtStart *bool `protobuf:"varint,56,opt,name=EnableCollectGarbageAtStart" json:"EnableCollectGarbageAtStart,omitempty"`
	// Enables persistent backup for tablet boot infos.
	TabletBootInfoBackupFilePath *string `protobuf:"bytes,57,opt,name=TabletBootInfoBackupFilePath" json:"TabletBootInfoBackupFilePath,omitempty"`
	// In fallback mode, all requests to Hive are served from cache.
	HiveProxyFallbackMode *bool `protobuf:"varint,58,opt,name=HiveProxyFallbackMode" json:"HiveProxyFallbackMode,omitempty"`
	// Thresholds which enable backpressure.
	FlushThresholdForBackpressure      *uint32 `protobuf:"varint,59,opt,name=FlushThresholdForBackpressure" json:"FlushThresholdForBackpressure,omitempty"`
	CleanupThresholdForBackpressure    *uint32 `protobuf:"varint,60,opt,name=CleanupThresholdForBackpressure" json:"CleanupThresholdForBackpressure,omitempty"`
	CompactionThresholdForBackpressure *uint32 `protobuf:"varint,61,opt,name=CompactionThresholdForBackpressure" json:"CompactionThresholdForBackpressure,omitempty"`
	FlushBytesThresholdForBackpressure *uint32 `protobuf:"varint,62,opt,name=FlushBytesThresholdForBackpressure" json:"FlushBytesThresholdForBackpressure,omitempty"`
	// Threshold for blob size in bytes.
	MaxBlobSize *uint32 `protobuf:"varint,63,opt,name=MaxBlobSize" json:"MaxBlobSize,omitempty"`
	// Enable file system throttling.
	ThrottlingEnabled *bool `protobuf:"varint,64,opt,name=ThrottlingEnabled" json:"ThrottlingEnabled,omitempty"`
	// Max blocks count for a single truncate tx.
	MaxBlocksPerTruncateTx *uint32 `protobuf:"varint,65,opt,name=MaxBlocksPerTruncateTx" json:"MaxBlocksPerTruncateTx,omitempty"`
	MaxTruncateTxInflight  *uint32 `protobuf:"varint,66,opt,name=MaxTruncateTxInflight" json:"MaxTruncateTxInflight,omitempty"`
	// Maximum number of entries in response.
	MaxResponseEntries *uint32 `protobuf:"varint,67,opt,name=MaxResponseEntries" json:"MaxResponseEntries,omitempty"`
	// Performance profile configuration for SSD.
	SSDThrottlingEnabled             *bool   `protobuf:"varint,68,opt,name=SSDThrottlingEnabled" json:"SSDThrottlingEnabled,omitempty"`
	SSDBoostTime                     *uint32 `protobuf:"varint,69,opt,name=SSDBoostTime" json:"SSDBoostTime,omitempty"`             // in ms
	SSDBoostRefillTime               *uint32 `protobuf:"varint,70,opt,name=SSDBoostRefillTime" json:"SSDBoostRefillTime,omitempty"` // in ms
	SSDUnitBoost                     *uint32 `protobuf:"varint,71,opt,name=SSDUnitBoost" json:"SSDUnitBoost,omitempty"`
	SSDBurstPercentage               *uint32 `protobuf:"varint,72,opt,name=SSDBurstPercentage" json:"SSDBurstPercentage,omitempty"`
	SSDDefaultPostponedRequestWeight *uint32 `protobuf:"varint,73,opt,name=SSDDefaultPostponedRequestWeight" json:"SSDDefaultPostponedRequestWeight,omitempty"`
	SSDMaxPostponedWeight            *uint32 `protobuf:"varint,74,opt,name=SSDMaxPostponedWeight" json:"SSDMaxPostponedWeight,omitempty"`
	SSDMaxWriteCostMultiplier        *uint32 `protobuf:"varint,75,opt,name=SSDMaxWriteCostMultiplier" json:"SSDMaxWriteCostMultiplier,omitempty"`
	SSDMaxPostponedTime              *uint32 `protobuf:"varint,76,opt,name=SSDMaxPostponedTime" json:"SSDMaxPostponedTime,omitempty"` // in ms
	SSDMaxPostponedCount             *uint32 `protobuf:"varint,77,opt,name=SSDMaxPostponedCount" json:"SSDMaxPostponedCount,omitempty"`
	// Performance profile configuration for HDD.
	HDDThrottlingEnabled             *bool   `protobuf:"varint,78,opt,name=HDDThrottlingEnabled" json:"HDDThrottlingEnabled,omitempty"`
	HDDBoostTime                     *uint32 `protobuf:"varint,79,opt,name=HDDBoostTime" json:"HDDBoostTime,omitempty"`             // in ms
	HDDBoostRefillTime               *uint32 `protobuf:"varint,80,opt,name=HDDBoostRefillTime" json:"HDDBoostRefillTime,omitempty"` // in ms
	HDDUnitBoost                     *uint32 `protobuf:"varint,81,opt,name=HDDUnitBoost" json:"HDDUnitBoost,omitempty"`
	HDDBurstPercentage               *uint32 `protobuf:"varint,82,opt,name=HDDBurstPercentage" json:"HDDBurstPercentage,omitempty"`
	HDDDefaultPostponedRequestWeight *uint32 `protobuf:"varint,83,opt,name=HDDDefaultPostponedRequestWeight" json:"HDDDefaultPostponedRequestWeight,omitempty"`
	HDDMaxPostponedWeight            *uint32 `protobuf:"varint,84,opt,name=HDDMaxPostponedWeight" json:"HDDMaxPostponedWeight,omitempty"`
	HDDMaxWriteCostMultiplier        *uint32 `protobuf:"varint,85,opt,name=HDDMaxWriteCostMultiplier" json:"HDDMaxWriteCostMultiplier,omitempty"`
	HDDMaxPostponedTime              *uint32 `protobuf:"varint,86,opt,name=HDDMaxPostponedTime" json:"HDDMaxPostponedTime,omitempty"` // in ms
	HDDMaxPostponedCount             *uint32 `protobuf:"varint,87,opt,name=HDDMaxPostponedCount" json:"HDDMaxPostponedCount,omitempty"`
	// Timeout in between forced range compaction attempts.
	CompactionRetryTimeout *uint32 `protobuf:"varint,88,opt,name=CompactionRetryTimeout" json:"CompactionRetryTimeout,omitempty"` // in ms
	// Min percentage of reassignable channels after which reassign requests
	// are sent.
	ReassignChannelsPercentageThreshold *uint32                    `protobuf:"varint,89,opt,name=ReassignChannelsPercentageThreshold" json:"ReassignChannelsPercentageThreshold,omitempty"`
	CpuLackThreshold                    *uint32                    `protobuf:"varint,90,opt,name=CpuLackThreshold" json:"CpuLackThreshold,omitempty"`
	AuthorizationMode                   *protos.EAuthorizationMode `protobuf:"varint,91,opt,name=AuthorizationMode,enum=NCloud.NProto.EAuthorizationMode" json:"AuthorizationMode,omitempty"`
	// FolderId of this NFS instance. Used for authorization.
	FolderId *string `protobuf:"bytes,92,opt,name=FolderId" json:"FolderId,omitempty"`
	// Number of last sessions kept in storage
	SessionHistoryEntryCount *uint32 `protobuf:"varint,93,opt,name=SessionHistoryEntryCount" json:"SessionHistoryEntryCount,omitempty"`
	// Tenant hive tablet id different from root to be used by hive proxy.
	// Should be configured once and for the lifetime of the cluster.
	TenantHiveTabletId *uint64 `protobuf:"varint,329,opt,name=TenantHiveTabletId" json:"TenantHiveTabletId,omitempty"`
}

func (x *TStorageConfig) Reset() {
	*x = TStorageConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_config_storage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TStorageConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TStorageConfig) ProtoMessage() {}

func (x *TStorageConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_config_storage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TStorageConfig.ProtoReflect.Descriptor instead.
func (*TStorageConfig) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_config_storage_proto_rawDescGZIP(), []int{0}
}

func (x *TStorageConfig) GetSchemeShardDir() string {
	if x != nil && x.SchemeShardDir != nil {
		return *x.SchemeShardDir
	}
	return ""
}

func (x *TStorageConfig) GetPipeClientRetryCount() uint32 {
	if x != nil && x.PipeClientRetryCount != nil {
		return *x.PipeClientRetryCount
	}
	return 0
}

func (x *TStorageConfig) GetPipeClientMinRetryTime() uint32 {
	if x != nil && x.PipeClientMinRetryTime != nil {
		return *x.PipeClientMinRetryTime
	}
	return 0
}

func (x *TStorageConfig) GetPipeClientMaxRetryTime() uint32 {
	if x != nil && x.PipeClientMaxRetryTime != nil {
		return *x.PipeClientMaxRetryTime
	}
	return 0
}

func (x *TStorageConfig) GetIdleSessionTimeout() uint32 {
	if x != nil && x.IdleSessionTimeout != nil {
		return *x.IdleSessionTimeout
	}
	return 0
}

func (x *TStorageConfig) GetEstablishSessionTimeout() uint32 {
	if x != nil && x.EstablishSessionTimeout != nil {
		return *x.EstablishSessionTimeout
	}
	return 0
}

func (x *TStorageConfig) GetWriteBatchEnabled() bool {
	if x != nil && x.WriteBatchEnabled != nil {
		return *x.WriteBatchEnabled
	}
	return false
}

func (x *TStorageConfig) GetWriteBatchTimeout() uint32 {
	if x != nil && x.WriteBatchTimeout != nil {
		return *x.WriteBatchTimeout
	}
	return 0
}

func (x *TStorageConfig) GetWriteBlobThreshold() uint32 {
	if x != nil && x.WriteBlobThreshold != nil {
		return *x.WriteBlobThreshold
	}
	return 0
}

func (x *TStorageConfig) GetFlushThreshold() uint32 {
	if x != nil && x.FlushThreshold != nil {
		return *x.FlushThreshold
	}
	return 0
}

func (x *TStorageConfig) GetCleanupThreshold() uint32 {
	if x != nil && x.CleanupThreshold != nil {
		return *x.CleanupThreshold
	}
	return 0
}

func (x *TStorageConfig) GetCompactionThreshold() uint32 {
	if x != nil && x.CompactionThreshold != nil {
		return *x.CompactionThreshold
	}
	return 0
}

func (x *TStorageConfig) GetCollectGarbageThreshold() uint32 {
	if x != nil && x.CollectGarbageThreshold != nil {
		return *x.CollectGarbageThreshold
	}
	return 0
}

func (x *TStorageConfig) GetFlushBytesThreshold() uint32 {
	if x != nil && x.FlushBytesThreshold != nil {
		return *x.FlushBytesThreshold
	}
	return 0
}

func (x *TStorageConfig) GetAllocationUnitHDD() uint32 {
	if x != nil && x.AllocationUnitHDD != nil {
		return *x.AllocationUnitHDD
	}
	return 0
}

func (x *TStorageConfig) GetAllocationUnitSSD() uint32 {
	if x != nil && x.AllocationUnitSSD != nil {
		return *x.AllocationUnitSSD
	}
	return 0
}

func (x *TStorageConfig) GetHDDSystemChannelPoolKind() string {
	if x != nil && x.HDDSystemChannelPoolKind != nil {
		return *x.HDDSystemChannelPoolKind
	}
	return ""
}

func (x *TStorageConfig) GetHDDLogChannelPoolKind() string {
	if x != nil && x.HDDLogChannelPoolKind != nil {
		return *x.HDDLogChannelPoolKind
	}
	return ""
}

func (x *TStorageConfig) GetHDDIndexChannelPoolKind() string {
	if x != nil && x.HDDIndexChannelPoolKind != nil {
		return *x.HDDIndexChannelPoolKind
	}
	return ""
}

func (x *TStorageConfig) GetHDDFreshChannelPoolKind() string {
	if x != nil && x.HDDFreshChannelPoolKind != nil {
		return *x.HDDFreshChannelPoolKind
	}
	return ""
}

func (x *TStorageConfig) GetHDDMixedChannelPoolKind() string {
	if x != nil && x.HDDMixedChannelPoolKind != nil {
		return *x.HDDMixedChannelPoolKind
	}
	return ""
}

func (x *TStorageConfig) GetSSDSystemChannelPoolKind() string {
	if x != nil && x.SSDSystemChannelPoolKind != nil {
		return *x.SSDSystemChannelPoolKind
	}
	return ""
}

func (x *TStorageConfig) GetSSDLogChannelPoolKind() string {
	if x != nil && x.SSDLogChannelPoolKind != nil {
		return *x.SSDLogChannelPoolKind
	}
	return ""
}

func (x *TStorageConfig) GetSSDIndexChannelPoolKind() string {
	if x != nil && x.SSDIndexChannelPoolKind != nil {
		return *x.SSDIndexChannelPoolKind
	}
	return ""
}

func (x *TStorageConfig) GetSSDFreshChannelPoolKind() string {
	if x != nil && x.SSDFreshChannelPoolKind != nil {
		return *x.SSDFreshChannelPoolKind
	}
	return ""
}

func (x *TStorageConfig) GetSSDMixedChannelPoolKind() string {
	if x != nil && x.SSDMixedChannelPoolKind != nil {
		return *x.SSDMixedChannelPoolKind
	}
	return ""
}

func (x *TStorageConfig) GetHDDUnitReadBandwidth() uint32 {
	if x != nil && x.HDDUnitReadBandwidth != nil {
		return *x.HDDUnitReadBandwidth
	}
	return 0
}

func (x *TStorageConfig) GetHDDUnitWriteBandwidth() uint32 {
	if x != nil && x.HDDUnitWriteBandwidth != nil {
		return *x.HDDUnitWriteBandwidth
	}
	return 0
}

func (x *TStorageConfig) GetHDDMaxReadBandwidth() uint32 {
	if x != nil && x.HDDMaxReadBandwidth != nil {
		return *x.HDDMaxReadBandwidth
	}
	return 0
}

func (x *TStorageConfig) GetHDDMaxWriteBandwidth() uint32 {
	if x != nil && x.HDDMaxWriteBandwidth != nil {
		return *x.HDDMaxWriteBandwidth
	}
	return 0
}

func (x *TStorageConfig) GetHDDUnitReadIops() uint32 {
	if x != nil && x.HDDUnitReadIops != nil {
		return *x.HDDUnitReadIops
	}
	return 0
}

func (x *TStorageConfig) GetHDDUnitWriteIops() uint32 {
	if x != nil && x.HDDUnitWriteIops != nil {
		return *x.HDDUnitWriteIops
	}
	return 0
}

func (x *TStorageConfig) GetHDDMaxReadIops() uint32 {
	if x != nil && x.HDDMaxReadIops != nil {
		return *x.HDDMaxReadIops
	}
	return 0
}

func (x *TStorageConfig) GetHDDMaxWriteIops() uint32 {
	if x != nil && x.HDDMaxWriteIops != nil {
		return *x.HDDMaxWriteIops
	}
	return 0
}

func (x *TStorageConfig) GetSSDUnitReadBandwidth() uint32 {
	if x != nil && x.SSDUnitReadBandwidth != nil {
		return *x.SSDUnitReadBandwidth
	}
	return 0
}

func (x *TStorageConfig) GetSSDUnitWriteBandwidth() uint32 {
	if x != nil && x.SSDUnitWriteBandwidth != nil {
		return *x.SSDUnitWriteBandwidth
	}
	return 0
}

func (x *TStorageConfig) GetSSDMaxReadBandwidth() uint32 {
	if x != nil && x.SSDMaxReadBandwidth != nil {
		return *x.SSDMaxReadBandwidth
	}
	return 0
}

func (x *TStorageConfig) GetSSDMaxWriteBandwidth() uint32 {
	if x != nil && x.SSDMaxWriteBandwidth != nil {
		return *x.SSDMaxWriteBandwidth
	}
	return 0
}

func (x *TStorageConfig) GetSSDUnitReadIops() uint32 {
	if x != nil && x.SSDUnitReadIops != nil {
		return *x.SSDUnitReadIops
	}
	return 0
}

func (x *TStorageConfig) GetSSDUnitWriteIops() uint32 {
	if x != nil && x.SSDUnitWriteIops != nil {
		return *x.SSDUnitWriteIops
	}
	return 0
}

func (x *TStorageConfig) GetSSDMaxReadIops() uint32 {
	if x != nil && x.SSDMaxReadIops != nil {
		return *x.SSDMaxReadIops
	}
	return 0
}

func (x *TStorageConfig) GetSSDMaxWriteIops() uint32 {
	if x != nil && x.SSDMaxWriteIops != nil {
		return *x.SSDMaxWriteIops
	}
	return 0
}

func (x *TStorageConfig) GetMinChannelCount() uint32 {
	if x != nil && x.MinChannelCount != nil {
		return *x.MinChannelCount
	}
	return 0
}

func (x *TStorageConfig) GetMaxResponseBytes() uint32 {
	if x != nil && x.MaxResponseBytes != nil {
		return *x.MaxResponseBytes
	}
	return 0
}

func (x *TStorageConfig) GetHybridSystemChannelPoolKind() string {
	if x != nil && x.HybridSystemChannelPoolKind != nil {
		return *x.HybridSystemChannelPoolKind
	}
	return ""
}

func (x *TStorageConfig) GetHybridLogChannelPoolKind() string {
	if x != nil && x.HybridLogChannelPoolKind != nil {
		return *x.HybridLogChannelPoolKind
	}
	return ""
}

func (x *TStorageConfig) GetHybridIndexChannelPoolKind() string {
	if x != nil && x.HybridIndexChannelPoolKind != nil {
		return *x.HybridIndexChannelPoolKind
	}
	return ""
}

func (x *TStorageConfig) GetHybridFreshChannelPoolKind() string {
	if x != nil && x.HybridFreshChannelPoolKind != nil {
		return *x.HybridFreshChannelPoolKind
	}
	return ""
}

func (x *TStorageConfig) GetHybridMixedChannelPoolKind() string {
	if x != nil && x.HybridMixedChannelPoolKind != nil {
		return *x.HybridMixedChannelPoolKind
	}
	return ""
}

func (x *TStorageConfig) GetHDDMediaKindOverride() uint32 {
	if x != nil && x.HDDMediaKindOverride != nil {
		return *x.HDDMediaKindOverride
	}
	return 0
}

func (x *TStorageConfig) GetDefaultNodesLimit() uint32 {
	if x != nil && x.DefaultNodesLimit != nil {
		return *x.DefaultNodesLimit
	}
	return 0
}

func (x *TStorageConfig) GetSizeToNodesRatio() uint32 {
	if x != nil && x.SizeToNodesRatio != nil {
		return *x.SizeToNodesRatio
	}
	return 0
}

func (x *TStorageConfig) GetDisableLocalService() bool {
	if x != nil && x.DisableLocalService != nil {
		return *x.DisableLocalService
	}
	return false
}

func (x *TStorageConfig) GetDupCacheEntryCount() uint32 {
	if x != nil && x.DupCacheEntryCount != nil {
		return *x.DupCacheEntryCount
	}
	return 0
}

func (x *TStorageConfig) GetMaxDeleteGarbageBlobsPerTx() uint32 {
	if x != nil && x.MaxDeleteGarbageBlobsPerTx != nil {
		return *x.MaxDeleteGarbageBlobsPerTx
	}
	return 0
}

func (x *TStorageConfig) GetEnableCollectGarbageAtStart() bool {
	if x != nil && x.EnableCollectGarbageAtStart != nil {
		return *x.EnableCollectGarbageAtStart
	}
	return false
}

func (x *TStorageConfig) GetTabletBootInfoBackupFilePath() string {
	if x != nil && x.TabletBootInfoBackupFilePath != nil {
		return *x.TabletBootInfoBackupFilePath
	}
	return ""
}

func (x *TStorageConfig) GetHiveProxyFallbackMode() bool {
	if x != nil && x.HiveProxyFallbackMode != nil {
		return *x.HiveProxyFallbackMode
	}
	return false
}

func (x *TStorageConfig) GetFlushThresholdForBackpressure() uint32 {
	if x != nil && x.FlushThresholdForBackpressure != nil {
		return *x.FlushThresholdForBackpressure
	}
	return 0
}

func (x *TStorageConfig) GetCleanupThresholdForBackpressure() uint32 {
	if x != nil && x.CleanupThresholdForBackpressure != nil {
		return *x.CleanupThresholdForBackpressure
	}
	return 0
}

func (x *TStorageConfig) GetCompactionThresholdForBackpressure() uint32 {
	if x != nil && x.CompactionThresholdForBackpressure != nil {
		return *x.CompactionThresholdForBackpressure
	}
	return 0
}

func (x *TStorageConfig) GetFlushBytesThresholdForBackpressure() uint32 {
	if x != nil && x.FlushBytesThresholdForBackpressure != nil {
		return *x.FlushBytesThresholdForBackpressure
	}
	return 0
}

func (x *TStorageConfig) GetMaxBlobSize() uint32 {
	if x != nil && x.MaxBlobSize != nil {
		return *x.MaxBlobSize
	}
	return 0
}

func (x *TStorageConfig) GetThrottlingEnabled() bool {
	if x != nil && x.ThrottlingEnabled != nil {
		return *x.ThrottlingEnabled
	}
	return false
}

func (x *TStorageConfig) GetMaxBlocksPerTruncateTx() uint32 {
	if x != nil && x.MaxBlocksPerTruncateTx != nil {
		return *x.MaxBlocksPerTruncateTx
	}
	return 0
}

func (x *TStorageConfig) GetMaxTruncateTxInflight() uint32 {
	if x != nil && x.MaxTruncateTxInflight != nil {
		return *x.MaxTruncateTxInflight
	}
	return 0
}

func (x *TStorageConfig) GetMaxResponseEntries() uint32 {
	if x != nil && x.MaxResponseEntries != nil {
		return *x.MaxResponseEntries
	}
	return 0
}

func (x *TStorageConfig) GetSSDThrottlingEnabled() bool {
	if x != nil && x.SSDThrottlingEnabled != nil {
		return *x.SSDThrottlingEnabled
	}
	return false
}

func (x *TStorageConfig) GetSSDBoostTime() uint32 {
	if x != nil && x.SSDBoostTime != nil {
		return *x.SSDBoostTime
	}
	return 0
}

func (x *TStorageConfig) GetSSDBoostRefillTime() uint32 {
	if x != nil && x.SSDBoostRefillTime != nil {
		return *x.SSDBoostRefillTime
	}
	return 0
}

func (x *TStorageConfig) GetSSDUnitBoost() uint32 {
	if x != nil && x.SSDUnitBoost != nil {
		return *x.SSDUnitBoost
	}
	return 0
}

func (x *TStorageConfig) GetSSDBurstPercentage() uint32 {
	if x != nil && x.SSDBurstPercentage != nil {
		return *x.SSDBurstPercentage
	}
	return 0
}

func (x *TStorageConfig) GetSSDDefaultPostponedRequestWeight() uint32 {
	if x != nil && x.SSDDefaultPostponedRequestWeight != nil {
		return *x.SSDDefaultPostponedRequestWeight
	}
	return 0
}

func (x *TStorageConfig) GetSSDMaxPostponedWeight() uint32 {
	if x != nil && x.SSDMaxPostponedWeight != nil {
		return *x.SSDMaxPostponedWeight
	}
	return 0
}

func (x *TStorageConfig) GetSSDMaxWriteCostMultiplier() uint32 {
	if x != nil && x.SSDMaxWriteCostMultiplier != nil {
		return *x.SSDMaxWriteCostMultiplier
	}
	return 0
}

func (x *TStorageConfig) GetSSDMaxPostponedTime() uint32 {
	if x != nil && x.SSDMaxPostponedTime != nil {
		return *x.SSDMaxPostponedTime
	}
	return 0
}

func (x *TStorageConfig) GetSSDMaxPostponedCount() uint32 {
	if x != nil && x.SSDMaxPostponedCount != nil {
		return *x.SSDMaxPostponedCount
	}
	return 0
}

func (x *TStorageConfig) GetHDDThrottlingEnabled() bool {
	if x != nil && x.HDDThrottlingEnabled != nil {
		return *x.HDDThrottlingEnabled
	}
	return false
}

func (x *TStorageConfig) GetHDDBoostTime() uint32 {
	if x != nil && x.HDDBoostTime != nil {
		return *x.HDDBoostTime
	}
	return 0
}

func (x *TStorageConfig) GetHDDBoostRefillTime() uint32 {
	if x != nil && x.HDDBoostRefillTime != nil {
		return *x.HDDBoostRefillTime
	}
	return 0
}

func (x *TStorageConfig) GetHDDUnitBoost() uint32 {
	if x != nil && x.HDDUnitBoost != nil {
		return *x.HDDUnitBoost
	}
	return 0
}

func (x *TStorageConfig) GetHDDBurstPercentage() uint32 {
	if x != nil && x.HDDBurstPercentage != nil {
		return *x.HDDBurstPercentage
	}
	return 0
}

func (x *TStorageConfig) GetHDDDefaultPostponedRequestWeight() uint32 {
	if x != nil && x.HDDDefaultPostponedRequestWeight != nil {
		return *x.HDDDefaultPostponedRequestWeight
	}
	return 0
}

func (x *TStorageConfig) GetHDDMaxPostponedWeight() uint32 {
	if x != nil && x.HDDMaxPostponedWeight != nil {
		return *x.HDDMaxPostponedWeight
	}
	return 0
}

func (x *TStorageConfig) GetHDDMaxWriteCostMultiplier() uint32 {
	if x != nil && x.HDDMaxWriteCostMultiplier != nil {
		return *x.HDDMaxWriteCostMultiplier
	}
	return 0
}

func (x *TStorageConfig) GetHDDMaxPostponedTime() uint32 {
	if x != nil && x.HDDMaxPostponedTime != nil {
		return *x.HDDMaxPostponedTime
	}
	return 0
}

func (x *TStorageConfig) GetHDDMaxPostponedCount() uint32 {
	if x != nil && x.HDDMaxPostponedCount != nil {
		return *x.HDDMaxPostponedCount
	}
	return 0
}

func (x *TStorageConfig) GetCompactionRetryTimeout() uint32 {
	if x != nil && x.CompactionRetryTimeout != nil {
		return *x.CompactionRetryTimeout
	}
	return 0
}

func (x *TStorageConfig) GetReassignChannelsPercentageThreshold() uint32 {
	if x != nil && x.ReassignChannelsPercentageThreshold != nil {
		return *x.ReassignChannelsPercentageThreshold
	}
	return 0
}

func (x *TStorageConfig) GetCpuLackThreshold() uint32 {
	if x != nil && x.CpuLackThreshold != nil {
		return *x.CpuLackThreshold
	}
	return 0
}

func (x *TStorageConfig) GetAuthorizationMode() protos.EAuthorizationMode {
	if x != nil && x.AuthorizationMode != nil {
		return *x.AuthorizationMode
	}
	return protos.EAuthorizationMode(0)
}

func (x *TStorageConfig) GetFolderId() string {
	if x != nil && x.FolderId != nil {
		return *x.FolderId
	}
	return ""
}

func (x *TStorageConfig) GetSessionHistoryEntryCount() uint32 {
	if x != nil && x.SessionHistoryEntryCount != nil {
		return *x.SessionHistoryEntryCount
	}
	return 0
}

func (x *TStorageConfig) GetTenantHiveTabletId() uint64 {
	if x != nil && x.TenantHiveTabletId != nil {
		return *x.TenantHiveTabletId
	}
	return 0
}

var File_cloud_filestore_config_storage_proto protoreflect.FileDescriptor

var file_cloud_filestore_config_storage_proto_rawDesc = []byte{
	0x0a, 0x24, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x27, 0x0a, 0x0e, 0x54, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x44, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x44, 0x69, 0x72, 0x12,
	0x32, 0x0a, 0x14, 0x50, 0x69, 0x70, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x50,
	0x69, 0x70, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x69, 0x70, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x50, 0x69, 0x70, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x69, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x50,
	0x69, 0x70, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x50, 0x69, 0x70,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x62,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x75, 0x70, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x30, 0x0a,
	0x13, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x38, 0x0a, 0x17, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x44, 0x44,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x44, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x53, 0x44, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x74, 0x53, 0x53, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x48, 0x44, 0x44, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x48, 0x44, 0x44, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x48, 0x44, 0x44, 0x4c, 0x6f, 0x67, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x48, 0x44, 0x44, 0x4c, 0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x48, 0x44, 0x44,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x48, 0x44, 0x44, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x48, 0x44, 0x44, 0x46, 0x72, 0x65, 0x73, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x48, 0x44, 0x44, 0x46, 0x72, 0x65, 0x73, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x38, 0x0a,
	0x17, 0x48, 0x44, 0x44, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x48, 0x44, 0x44, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x53, 0x44, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x53, 0x53, 0x44, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x53, 0x44, 0x4c, 0x6f, 0x67, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x53, 0x53, 0x44, 0x4c, 0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x53, 0x44,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x53, 0x53, 0x44, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x53, 0x44, 0x46, 0x72, 0x65, 0x73, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x53, 0x53, 0x44, 0x46, 0x72, 0x65, 0x73, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x38, 0x0a,
	0x17, 0x53, 0x53, 0x44, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x53, 0x53, 0x44, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x48, 0x44, 0x44, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x48,
	0x44, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x48, 0x44, 0x44, 0x55,
	0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x44, 0x44, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x48, 0x44, 0x44,
	0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61,
	0x64, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x12,
	0x32, 0x0a, 0x14, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x53,
	0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x53, 0x44,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65,
	0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x53,
	0x53, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x53, 0x53, 0x44, 0x4d, 0x61,
	0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x28, 0x0a, 0x0f, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f,
	0x70, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x53, 0x44,
	0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x52,
	0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x53,
	0x53, 0x44, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x4d, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x4d, 0x61, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x1b, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1b, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x3a, 0x0a, 0x18, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x4c, 0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x4c, 0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x48,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x48,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x46, 0x72, 0x65, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x46, 0x72, 0x65, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x48,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x48,
	0x44, 0x44, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x48, 0x44, 0x44, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x44,
	0x75, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x44, 0x75, 0x70, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x4d,
	0x61, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x42,
	0x6c, 0x6f, 0x62, 0x73, 0x50, 0x65, 0x72, 0x54, 0x78, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1a, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67,
	0x65, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x50, 0x65, 0x72, 0x54, 0x78, 0x12, 0x40, 0x0a, 0x1b, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x47, 0x61, 0x72, 0x62,
	0x61, 0x67, 0x65, 0x41, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x47,
	0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x41, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x42, 0x0a,
	0x1c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x34, 0x0a, 0x15, 0x48, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x46, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x48, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x46, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x6f,
	0x72, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x48, 0x0a,
	0x1f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x4e, 0x0a, 0x22, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x6f,
	0x72, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x22, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x4e, 0x0a, 0x22, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x6f,
	0x72, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x22, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x42, 0x6c,
	0x6f, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x61,
	0x78, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x68, 0x72,
	0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x4d, 0x61, 0x78, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54,
	0x78, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x50, 0x65, 0x72, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x78, 0x12,
	0x34, 0x0a, 0x15, 0x4d, 0x61, 0x78, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x78,
	0x49, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x4d, 0x61, 0x78, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x78, 0x49, 0x6e, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x53, 0x44, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x44, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x53, 0x53, 0x44, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x53, 0x44,
	0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x53, 0x53, 0x44, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x53, 0x53, 0x44, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x53, 0x53, 0x44, 0x42, 0x6f,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x53, 0x53, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x6f, 0x6f, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x53, 0x44, 0x42, 0x75, 0x72, 0x73, 0x74, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x53,
	0x53, 0x44, 0x42, 0x75, 0x72, 0x73, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x4a, 0x0a, 0x20, 0x53, 0x53, 0x44, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x53, 0x53, 0x44,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x34, 0x0a,
	0x15, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x53, 0x53,
	0x44, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x70,
	0x6f, 0x6e, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x73,
	0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x53, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x48, 0x44, 0x44, 0x54, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x4e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x48, 0x44, 0x44, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74,
	0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x48,
	0x44, 0x44, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x48, 0x44, 0x44, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x48, 0x44, 0x44, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x66, 0x69, 0x6c,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x48, 0x44, 0x44,
	0x42, 0x6f, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x18,
	0x51, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x48, 0x44, 0x44, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x6f,
	0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x48, 0x44, 0x44, 0x42, 0x75, 0x72, 0x73, 0x74, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x48, 0x44, 0x44, 0x42, 0x75, 0x72, 0x73, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x48, 0x44, 0x44, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x48,
	0x44, 0x44, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x34, 0x0a, 0x15, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e,
	0x65, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x73,
	0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x50,
	0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x57, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x48, 0x44, 0x44, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x70,
	0x6f, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x50, 0x0a, 0x23, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x23,
	0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x70, 0x75, 0x4c, 0x61, 0x63, 0x6b, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x43,
	0x70, 0x75, 0x4c, 0x61, 0x63, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x4f, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x4e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x5c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x48, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x18, 0xc9,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x48, 0x69, 0x76,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6e, 0x62, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
}

var (
	file_cloud_filestore_config_storage_proto_rawDescOnce sync.Once
	file_cloud_filestore_config_storage_proto_rawDescData = file_cloud_filestore_config_storage_proto_rawDesc
)

func file_cloud_filestore_config_storage_proto_rawDescGZIP() []byte {
	file_cloud_filestore_config_storage_proto_rawDescOnce.Do(func() {
		file_cloud_filestore_config_storage_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_filestore_config_storage_proto_rawDescData)
	})
	return file_cloud_filestore_config_storage_proto_rawDescData
}

var file_cloud_filestore_config_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_cloud_filestore_config_storage_proto_goTypes = []interface{}{
	(*TStorageConfig)(nil),         // 0: NCloud.NFileStore.NProto.TStorageConfig
	(protos.EAuthorizationMode)(0), // 1: NCloud.NProto.EAuthorizationMode
}
var file_cloud_filestore_config_storage_proto_depIdxs = []int32{
	1, // 0: NCloud.NFileStore.NProto.TStorageConfig.AuthorizationMode:type_name -> NCloud.NProto.EAuthorizationMode
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_cloud_filestore_config_storage_proto_init() }
func file_cloud_filestore_config_storage_proto_init() {
	if File_cloud_filestore_config_storage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_filestore_config_storage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TStorageConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_filestore_config_storage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_filestore_config_storage_proto_goTypes,
		DependencyIndexes: file_cloud_filestore_config_storage_proto_depIdxs,
		MessageInfos:      file_cloud_filestore_config_storage_proto_msgTypes,
	}.Build()
	File_cloud_filestore_config_storage_proto = out.File
	file_cloud_filestore_config_storage_proto_rawDesc = nil
	file_cloud_filestore_config_storage_proto_goTypes = nil
	file_cloud_filestore_config_storage_proto_depIdxs = nil
}
