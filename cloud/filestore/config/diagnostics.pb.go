// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.0
// source: cloud/filestore/config/diagnostics.proto

package config

import (
	protos "github.com/ydb-platform/nbs/cloud/storage/core/protos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TDiagnosticsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For proper monpage link generation.
	BastionNameSuffix *string `protobuf:"bytes,1,opt,name=BastionNameSuffix" json:"BastionNameSuffix,omitempty"`
	// Solomon cluster name (e.g. yandexcloud_prod_vla).
	SolomonClusterName *string `protobuf:"bytes,2,opt,name=SolomonClusterName" json:"SolomonClusterName,omitempty"`
	// Solomon host url.
	SolomonUrl *string `protobuf:"bytes,3,opt,name=SolomonUrl" json:"SolomonUrl,omitempty"`
	// Project name in solomon.
	SolomonProject *string `protobuf:"bytes,4,opt,name=SolomonProject" json:"SolomonProject,omitempty"`
	// Monserver will listen on this port.
	FilestoreMonPort *uint32 `protobuf:"varint,5,opt,name=FilestoreMonPort" json:"FilestoreMonPort,omitempty"`
	// The tracks of the requests whose processing time in ms exceeds these
	// values have a chance to be logged.
	HDDSlowRequestThreshold *uint32 `protobuf:"varint,6,opt,name=HDDSlowRequestThreshold" json:"HDDSlowRequestThreshold,omitempty"`
	SSDSlowRequestThreshold *uint32 `protobuf:"varint,7,opt,name=SSDSlowRequestThreshold" json:"SSDSlowRequestThreshold,omitempty"`
	// Sampling rate for request tracking.
	SamplingRate *uint32 `protobuf:"varint,8,opt,name=SamplingRate" json:"SamplingRate,omitempty"`
	// Sampling rate for requests with processing time above "slow" threshold.
	SlowRequestSamplingRate *uint32 `protobuf:"varint,9,opt,name=SlowRequestSamplingRate" json:"SlowRequestSamplingRate,omitempty"`
	// Dump profile log data every ProfileLogTimeThreshold ms.
	ProfileLogTimeThreshold *uint32 `protobuf:"varint,10,opt,name=ProfileLogTimeThreshold" json:"ProfileLogTimeThreshold,omitempty"`
	// Unified agent endpoint
	TracesUnifiedAgentEndpoint *string `protobuf:"bytes,11,opt,name=TracesUnifiedAgentEndpoint" json:"TracesUnifiedAgentEndpoint,omitempty"`
	// Traces "syslog" identifier.
	TracesSyslogIdentifier *string `protobuf:"bytes,12,opt,name=TracesSyslogIdentifier" json:"TracesSyslogIdentifier,omitempty"`
	// Number of shuttles in lwtrace pool.
	LWTraceShuttleCount *uint32 `protobuf:"varint,13,opt,name=LWTraceShuttleCount" json:"LWTraceShuttleCount,omitempty"`
	// The tracks of the requests whose processing time in ms exceeds
	// corresponding values have a chance to be logged.
	RequestThresholds []*protos.TLWTraceThreshold `protobuf:"bytes,14,rep,name=RequestThresholds" json:"RequestThresholds,omitempty"`
	// Used to form path to file with cpu wait counters
	CpuWaitServiceName *string `protobuf:"bytes,15,opt,name=CpuWaitServiceName" json:"CpuWaitServiceName,omitempty"`
	// Aggregate and write metrics values in Metrics service to monlib counters
	// every MetricsUpdateInterval ms.
	MetricsUpdateInterval *uint32 `protobuf:"varint,16,opt,name=MetricsUpdateInterval" json:"MetricsUpdateInterval,omitempty"`
	// Slow requests threshold for execution time in ms.
	SlowExecutionTimeRequestThreshold *uint32 `protobuf:"varint,17,opt,name=SlowExecutionTimeRequestThreshold" json:"SlowExecutionTimeRequestThreshold,omitempty"`
	// Slow requests threshold for total time in ms.
	SlowTotalTimeRequestThreshold *uint32 `protobuf:"varint,18,opt,name=SlowTotalTimeRequestThreshold" json:"SlowTotalTimeRequestThreshold,omitempty"`
	// Predictor's interval window (ms).
	PostponeTimePredictorInterval *uint32 `protobuf:"varint,19,opt,name=PostponeTimePredictorInterval" json:"PostponeTimePredictorInterval,omitempty"`
	// Max possible predicted time (ms).
	PostponeTimePredictorMaxTime *uint32 `protobuf:"varint,20,opt,name=PostponeTimePredictorMaxTime" json:"PostponeTimePredictorMaxTime,omitempty"`
	// Requests percentage in predictor to calculate possible delay [0.0, 1.0].
	PostponeTimePredictorPercentage *float64 `protobuf:"fixed64,21,opt,name=PostponeTimePredictorPercentage" json:"PostponeTimePredictorPercentage,omitempty"`
}

func (x *TDiagnosticsConfig) Reset() {
	*x = TDiagnosticsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_filestore_config_diagnostics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDiagnosticsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDiagnosticsConfig) ProtoMessage() {}

func (x *TDiagnosticsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_filestore_config_diagnostics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDiagnosticsConfig.ProtoReflect.Descriptor instead.
func (*TDiagnosticsConfig) Descriptor() ([]byte, []int) {
	return file_cloud_filestore_config_diagnostics_proto_rawDescGZIP(), []int{0}
}

func (x *TDiagnosticsConfig) GetBastionNameSuffix() string {
	if x != nil && x.BastionNameSuffix != nil {
		return *x.BastionNameSuffix
	}
	return ""
}

func (x *TDiagnosticsConfig) GetSolomonClusterName() string {
	if x != nil && x.SolomonClusterName != nil {
		return *x.SolomonClusterName
	}
	return ""
}

func (x *TDiagnosticsConfig) GetSolomonUrl() string {
	if x != nil && x.SolomonUrl != nil {
		return *x.SolomonUrl
	}
	return ""
}

func (x *TDiagnosticsConfig) GetSolomonProject() string {
	if x != nil && x.SolomonProject != nil {
		return *x.SolomonProject
	}
	return ""
}

func (x *TDiagnosticsConfig) GetFilestoreMonPort() uint32 {
	if x != nil && x.FilestoreMonPort != nil {
		return *x.FilestoreMonPort
	}
	return 0
}

func (x *TDiagnosticsConfig) GetHDDSlowRequestThreshold() uint32 {
	if x != nil && x.HDDSlowRequestThreshold != nil {
		return *x.HDDSlowRequestThreshold
	}
	return 0
}

func (x *TDiagnosticsConfig) GetSSDSlowRequestThreshold() uint32 {
	if x != nil && x.SSDSlowRequestThreshold != nil {
		return *x.SSDSlowRequestThreshold
	}
	return 0
}

func (x *TDiagnosticsConfig) GetSamplingRate() uint32 {
	if x != nil && x.SamplingRate != nil {
		return *x.SamplingRate
	}
	return 0
}

func (x *TDiagnosticsConfig) GetSlowRequestSamplingRate() uint32 {
	if x != nil && x.SlowRequestSamplingRate != nil {
		return *x.SlowRequestSamplingRate
	}
	return 0
}

func (x *TDiagnosticsConfig) GetProfileLogTimeThreshold() uint32 {
	if x != nil && x.ProfileLogTimeThreshold != nil {
		return *x.ProfileLogTimeThreshold
	}
	return 0
}

func (x *TDiagnosticsConfig) GetTracesUnifiedAgentEndpoint() string {
	if x != nil && x.TracesUnifiedAgentEndpoint != nil {
		return *x.TracesUnifiedAgentEndpoint
	}
	return ""
}

func (x *TDiagnosticsConfig) GetTracesSyslogIdentifier() string {
	if x != nil && x.TracesSyslogIdentifier != nil {
		return *x.TracesSyslogIdentifier
	}
	return ""
}

func (x *TDiagnosticsConfig) GetLWTraceShuttleCount() uint32 {
	if x != nil && x.LWTraceShuttleCount != nil {
		return *x.LWTraceShuttleCount
	}
	return 0
}

func (x *TDiagnosticsConfig) GetRequestThresholds() []*protos.TLWTraceThreshold {
	if x != nil {
		return x.RequestThresholds
	}
	return nil
}

func (x *TDiagnosticsConfig) GetCpuWaitServiceName() string {
	if x != nil && x.CpuWaitServiceName != nil {
		return *x.CpuWaitServiceName
	}
	return ""
}

func (x *TDiagnosticsConfig) GetMetricsUpdateInterval() uint32 {
	if x != nil && x.MetricsUpdateInterval != nil {
		return *x.MetricsUpdateInterval
	}
	return 0
}

func (x *TDiagnosticsConfig) GetSlowExecutionTimeRequestThreshold() uint32 {
	if x != nil && x.SlowExecutionTimeRequestThreshold != nil {
		return *x.SlowExecutionTimeRequestThreshold
	}
	return 0
}

func (x *TDiagnosticsConfig) GetSlowTotalTimeRequestThreshold() uint32 {
	if x != nil && x.SlowTotalTimeRequestThreshold != nil {
		return *x.SlowTotalTimeRequestThreshold
	}
	return 0
}

func (x *TDiagnosticsConfig) GetPostponeTimePredictorInterval() uint32 {
	if x != nil && x.PostponeTimePredictorInterval != nil {
		return *x.PostponeTimePredictorInterval
	}
	return 0
}

func (x *TDiagnosticsConfig) GetPostponeTimePredictorMaxTime() uint32 {
	if x != nil && x.PostponeTimePredictorMaxTime != nil {
		return *x.PostponeTimePredictorMaxTime
	}
	return 0
}

func (x *TDiagnosticsConfig) GetPostponeTimePredictorPercentage() float64 {
	if x != nil && x.PostponeTimePredictorPercentage != nil {
		return *x.PostponeTimePredictorPercentage
	}
	return 0
}

var File_cloud_filestore_config_diagnostics_proto protoreflect.FileDescriptor

var file_cloud_filestore_config_diagnostics_proto_rawDesc = []byte{
	0x0a, 0x28, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x4e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x09, 0x0a, 0x12,
	0x54, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x42, 0x61, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42,
	0x61, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x12, 0x2e, 0x0a, 0x12, 0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x53, 0x6f,
	0x6c, 0x6f, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x12, 0x26, 0x0a, 0x0e, 0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x48, 0x44, 0x44, 0x53, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x48, 0x44, 0x44, 0x53, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x38,
	0x0a, 0x17, 0x53, 0x53, 0x44, 0x53, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x53, 0x53, 0x44, 0x53, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x17,
	0x53, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x53,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x3e, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x55, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x57, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x53, 0x68, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x68,
	0x75, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x11, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x57, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x70,
	0x75, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x70, 0x75, 0x57, 0x61, 0x69, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x4c, 0x0a, 0x21, 0x53, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x53, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x44,
	0x0a, 0x1d, 0x53, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x53, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x44, 0x0a, 0x1d, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x50, 0x6f, 0x73,
	0x74, 0x70, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x1c, 0x50, 0x6f,
	0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1c, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48,
	0x0a, 0x1f, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x6e, 0x62, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
}

var (
	file_cloud_filestore_config_diagnostics_proto_rawDescOnce sync.Once
	file_cloud_filestore_config_diagnostics_proto_rawDescData = file_cloud_filestore_config_diagnostics_proto_rawDesc
)

func file_cloud_filestore_config_diagnostics_proto_rawDescGZIP() []byte {
	file_cloud_filestore_config_diagnostics_proto_rawDescOnce.Do(func() {
		file_cloud_filestore_config_diagnostics_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_filestore_config_diagnostics_proto_rawDescData)
	})
	return file_cloud_filestore_config_diagnostics_proto_rawDescData
}

var file_cloud_filestore_config_diagnostics_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_cloud_filestore_config_diagnostics_proto_goTypes = []interface{}{
	(*TDiagnosticsConfig)(nil),       // 0: NCloud.NFileStore.NProto.TDiagnosticsConfig
	(*protos.TLWTraceThreshold)(nil), // 1: NCloud.NProto.TLWTraceThreshold
}
var file_cloud_filestore_config_diagnostics_proto_depIdxs = []int32{
	1, // 0: NCloud.NFileStore.NProto.TDiagnosticsConfig.RequestThresholds:type_name -> NCloud.NProto.TLWTraceThreshold
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_cloud_filestore_config_diagnostics_proto_init() }
func file_cloud_filestore_config_diagnostics_proto_init() {
	if File_cloud_filestore_config_diagnostics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_filestore_config_diagnostics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDiagnosticsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_filestore_config_diagnostics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_filestore_config_diagnostics_proto_goTypes,
		DependencyIndexes: file_cloud_filestore_config_diagnostics_proto_depIdxs,
		MessageInfos:      file_cloud_filestore_config_diagnostics_proto_msgTypes,
	}.Build()
	File_cloud_filestore_config_diagnostics_proto = out.File
	file_cloud_filestore_config_diagnostics_proto_rawDesc = nil
	file_cloud_filestore_config_diagnostics_proto_goTypes = nil
	file_cloud_filestore_config_diagnostics_proto_depIdxs = nil
}
